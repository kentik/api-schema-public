// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/device/v202308beta1/device.proto

package device

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type DeviceSnmpV3Conf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username                 string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AuthenticationProtocol   string `protobuf:"bytes,2,opt,name=authentication_protocol,json=authenticationProtocol,proto3" json:"authentication_protocol,omitempty"`
	AuthenticationPassphrase string `protobuf:"bytes,3,opt,name=authentication_passphrase,json=authenticationPassphrase,proto3" json:"authentication_passphrase,omitempty"`
	PrivacyProtocol          string `protobuf:"bytes,4,opt,name=privacy_protocol,json=privacyProtocol,proto3" json:"privacy_protocol,omitempty"`
	PrivacyPassphrase        string `protobuf:"bytes,5,opt,name=privacy_passphrase,json=privacyPassphrase,proto3" json:"privacy_passphrase,omitempty"`
}

func (x *DeviceSnmpV3Conf) Reset() {
	*x = DeviceSnmpV3Conf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSnmpV3Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSnmpV3Conf) ProtoMessage() {}

func (x *DeviceSnmpV3Conf) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSnmpV3Conf.ProtoReflect.Descriptor instead.
func (*DeviceSnmpV3Conf) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceSnmpV3Conf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetAuthenticationProtocol() string {
	if x != nil {
		return x.AuthenticationProtocol
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetAuthenticationPassphrase() string {
	if x != nil {
		return x.AuthenticationPassphrase
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetPrivacyProtocol() string {
	if x != nil {
		return x.PrivacyProtocol
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetPrivacyPassphrase() string {
	if x != nil {
		return x.PrivacyPassphrase
	}
	return ""
}

// {{.Name}}
type DeviceNmsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId   string               `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	IpAddress string               `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Snmp      *DeviceNmsSnmpConfig `protobuf:"bytes,4,opt,name=snmp,proto3" json:"snmp,omitempty"`
	St        *DeviceNmsStConfig   `protobuf:"bytes,5,opt,name=st,proto3" json:"st,omitempty"`
}

func (x *DeviceNmsConfig) Reset() {
	*x = DeviceNmsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNmsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNmsConfig) ProtoMessage() {}

func (x *DeviceNmsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNmsConfig.ProtoReflect.Descriptor instead.
func (*DeviceNmsConfig) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceNmsConfig) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *DeviceNmsConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DeviceNmsConfig) GetSnmp() *DeviceNmsSnmpConfig {
	if x != nil {
		return x.Snmp
	}
	return nil
}

func (x *DeviceNmsConfig) GetSt() *DeviceNmsStConfig {
	if x != nil {
		return x.St
	}
	return nil
}

// {{.Name}}
type DeviceNmsSnmpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialName string               `protobuf:"bytes,1,opt,name=credential_name,json=credentialName,proto3" json:"credential_name,omitempty"`
	Port           uint32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Timeout        *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *DeviceNmsSnmpConfig) Reset() {
	*x = DeviceNmsSnmpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNmsSnmpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNmsSnmpConfig) ProtoMessage() {}

func (x *DeviceNmsSnmpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNmsSnmpConfig.ProtoReflect.Descriptor instead.
func (*DeviceNmsSnmpConfig) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceNmsSnmpConfig) GetCredentialName() string {
	if x != nil {
		return x.CredentialName
	}
	return ""
}

func (x *DeviceNmsSnmpConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceNmsSnmpConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// {{.Name}}
type DeviceNmsStConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredentialName string               `protobuf:"bytes,1,opt,name=credential_name,json=credentialName,proto3" json:"credential_name,omitempty"`
	Port           uint32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Timeout        *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Secure         bool                 `protobuf:"varint,4,opt,name=secure,proto3" json:"secure,omitempty"`
}

func (x *DeviceNmsStConfig) Reset() {
	*x = DeviceNmsStConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNmsStConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNmsStConfig) ProtoMessage() {}

func (x *DeviceNmsStConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNmsStConfig.ProtoReflect.Descriptor instead.
func (*DeviceNmsStConfig) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceNmsStConfig) GetCredentialName() string {
	if x != nil {
		return x.CredentialName
	}
	return ""
}

func (x *DeviceNmsStConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceNmsStConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *DeviceNmsStConfig) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

// {{.Name}}
type DeviceConcise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceName           string            `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceSubtype        string            `protobuf:"bytes,3,opt,name=device_subtype,json=deviceSubtype,proto3" json:"device_subtype,omitempty"`
	CdnAttr              string            `protobuf:"bytes,4,opt,name=cdn_attr,json=cdnAttr,proto3" json:"cdn_attr,omitempty"`
	DeviceDescription    string            `protobuf:"bytes,5,opt,name=device_description,json=deviceDescription,proto3" json:"device_description,omitempty"`
	SendingIps           []string          `protobuf:"bytes,6,rep,name=sending_ips,json=sendingIps,proto3" json:"sending_ips,omitempty"`
	DeviceSampleRate     float64           `protobuf:"fixed64,7,opt,name=device_sample_rate,json=deviceSampleRate,proto3" json:"device_sample_rate,omitempty"`
	PlanId               uint32            `protobuf:"varint,8,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	SiteId               uint32            `protobuf:"varint,9,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	MinimizeSnmp         *bool             `protobuf:"varint,10,opt,name=minimize_snmp,json=minimizeSnmp,proto3,oneof" json:"minimize_snmp,omitempty"`
	DeviceSnmpIp         string            `protobuf:"bytes,11,opt,name=device_snmp_ip,json=deviceSnmpIp,proto3" json:"device_snmp_ip,omitempty"`
	DeviceSnmpCommunity  string            `protobuf:"bytes,12,opt,name=device_snmp_community,json=deviceSnmpCommunity,proto3" json:"device_snmp_community,omitempty"`
	DeviceSnmpV3Conf     *DeviceSnmpV3Conf `protobuf:"bytes,13,opt,name=device_snmp_v3_conf,json=deviceSnmpV3Conf,proto3" json:"device_snmp_v3_conf,omitempty"`
	DeviceBgpType        string            `protobuf:"bytes,14,opt,name=device_bgp_type,json=deviceBgpType,proto3" json:"device_bgp_type,omitempty"`
	DeviceBgpNeighborIp  string            `protobuf:"bytes,15,opt,name=device_bgp_neighbor_ip,json=deviceBgpNeighborIp,proto3" json:"device_bgp_neighbor_ip,omitempty"`
	DeviceBgpNeighborIp6 string            `protobuf:"bytes,16,opt,name=device_bgp_neighbor_ip6,json=deviceBgpNeighborIp6,proto3" json:"device_bgp_neighbor_ip6,omitempty"`
	DeviceBgpNeighborAsn string            `protobuf:"bytes,17,opt,name=device_bgp_neighbor_asn,json=deviceBgpNeighborAsn,proto3" json:"device_bgp_neighbor_asn,omitempty"`
	DeviceBgpPassword    string            `protobuf:"bytes,18,opt,name=device_bgp_password,json=deviceBgpPassword,proto3" json:"device_bgp_password,omitempty"`
	UseBgpDeviceId       uint32            `protobuf:"varint,19,opt,name=use_bgp_device_id,json=useBgpDeviceId,proto3" json:"use_bgp_device_id,omitempty"`
	DeviceBgpFlowspec    bool              `protobuf:"varint,20,opt,name=device_bgp_flowspec,json=deviceBgpFlowspec,proto3" json:"device_bgp_flowspec,omitempty"`
	Nms                  *DeviceNmsConfig  `protobuf:"bytes,21,opt,name=nms,proto3" json:"nms,omitempty"`
}

func (x *DeviceConcise) Reset() {
	*x = DeviceConcise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConcise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConcise) ProtoMessage() {}

func (x *DeviceConcise) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConcise.ProtoReflect.Descriptor instead.
func (*DeviceConcise) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceConcise) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceConcise) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceConcise) GetDeviceSubtype() string {
	if x != nil {
		return x.DeviceSubtype
	}
	return ""
}

func (x *DeviceConcise) GetCdnAttr() string {
	if x != nil {
		return x.CdnAttr
	}
	return ""
}

func (x *DeviceConcise) GetDeviceDescription() string {
	if x != nil {
		return x.DeviceDescription
	}
	return ""
}

func (x *DeviceConcise) GetSendingIps() []string {
	if x != nil {
		return x.SendingIps
	}
	return nil
}

func (x *DeviceConcise) GetDeviceSampleRate() float64 {
	if x != nil {
		return x.DeviceSampleRate
	}
	return 0
}

func (x *DeviceConcise) GetPlanId() uint32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *DeviceConcise) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *DeviceConcise) GetMinimizeSnmp() bool {
	if x != nil && x.MinimizeSnmp != nil {
		return *x.MinimizeSnmp
	}
	return false
}

func (x *DeviceConcise) GetDeviceSnmpIp() string {
	if x != nil {
		return x.DeviceSnmpIp
	}
	return ""
}

func (x *DeviceConcise) GetDeviceSnmpCommunity() string {
	if x != nil {
		return x.DeviceSnmpCommunity
	}
	return ""
}

func (x *DeviceConcise) GetDeviceSnmpV3Conf() *DeviceSnmpV3Conf {
	if x != nil {
		return x.DeviceSnmpV3Conf
	}
	return nil
}

func (x *DeviceConcise) GetDeviceBgpType() string {
	if x != nil {
		return x.DeviceBgpType
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpNeighborIp() string {
	if x != nil {
		return x.DeviceBgpNeighborIp
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpNeighborIp6() string {
	if x != nil {
		return x.DeviceBgpNeighborIp6
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpNeighborAsn() string {
	if x != nil {
		return x.DeviceBgpNeighborAsn
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpPassword() string {
	if x != nil {
		return x.DeviceBgpPassword
	}
	return ""
}

func (x *DeviceConcise) GetUseBgpDeviceId() uint32 {
	if x != nil {
		return x.UseBgpDeviceId
	}
	return 0
}

func (x *DeviceConcise) GetDeviceBgpFlowspec() bool {
	if x != nil {
		return x.DeviceBgpFlowspec
	}
	return false
}

func (x *DeviceConcise) GetNms() *DeviceNmsConfig {
	if x != nil {
		return x.Nms
	}
	return nil
}

// {{.Name}}
type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteName  string  `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Lat       float64 `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon       float64 `protobuf:"fixed64,4,opt,name=lon,proto3" json:"lon,omitempty"`
	CompanyId string  `protobuf:"bytes,5,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{5}
}

func (x *Site) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Site) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *Site) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Site) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Site) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

// {{.Name}}
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{6}
}

func (x *Plan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// {{.Name}}
type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=edate,proto3" json:"edate,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=cdate,proto3" json:"cdate,omitempty"`
	UserId        string                 `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CompanyId     string                 `protobuf:"bytes,7,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Color         string                 `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
	Order         string                 `protobuf:"bytes,9,opt,name=order,proto3" json:"order,omitempty"`
	PivotDeviceId string                 `protobuf:"bytes,10,opt,name=pivot_device_id,json=pivotDeviceId,proto3" json:"pivot_device_id,omitempty"`
	PivotLabelId  string                 `protobuf:"bytes,11,opt,name=pivot_label_id,json=pivotLabelId,proto3" json:"pivot_label_id,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{7}
}

func (x *Label) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Label) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Label) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Label) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Label) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Label) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Label) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Label) GetPivotDeviceId() string {
	if x != nil {
		return x.PivotDeviceId
	}
	return ""
}

func (x *Label) GetPivotLabelId() string {
	if x != nil {
		return x.PivotLabelId
	}
	return ""
}

// {{.Name}}
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceDescription string `protobuf:"bytes,1,opt,name=interface_description,json=interfaceDescription,proto3" json:"interface_description,omitempty"`
	InitialSnmpSpeed     string `protobuf:"bytes,2,opt,name=initial_snmp_speed,json=initialSnmpSpeed,proto3" json:"initial_snmp_speed,omitempty"`
	DeviceId             string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SnmpSpeed            string `protobuf:"bytes,4,opt,name=snmp_speed,json=snmpSpeed,proto3" json:"snmp_speed,omitempty"`
	SnmpAlias            string `protobuf:"bytes,5,opt,name=snmp_alias,json=snmpAlias,proto3" json:"snmp_alias,omitempty"`
	SnmpId               string `protobuf:"bytes,6,opt,name=snmp_id,json=snmpId,proto3" json:"snmp_id,omitempty"`
	ConnectivityType     string `protobuf:"bytes,7,opt,name=connectivity_type,json=connectivityType,proto3" json:"connectivity_type,omitempty"`
	NetworkBoundary      string `protobuf:"bytes,8,opt,name=network_boundary,json=networkBoundary,proto3" json:"network_boundary,omitempty"`
	Provider             string `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{8}
}

func (x *Interface) GetInterfaceDescription() string {
	if x != nil {
		return x.InterfaceDescription
	}
	return ""
}

func (x *Interface) GetInitialSnmpSpeed() string {
	if x != nil {
		return x.InitialSnmpSpeed
	}
	return ""
}

func (x *Interface) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Interface) GetSnmpSpeed() string {
	if x != nil {
		return x.SnmpSpeed
	}
	return ""
}

func (x *Interface) GetSnmpAlias() string {
	if x != nil {
		return x.SnmpAlias
	}
	return ""
}

func (x *Interface) GetSnmpId() string {
	if x != nil {
		return x.SnmpId
	}
	return ""
}

func (x *Interface) GetConnectivityType() string {
	if x != nil {
		return x.ConnectivityType
	}
	return ""
}

func (x *Interface) GetNetworkBoundary() string {
	if x != nil {
		return x.NetworkBoundary
	}
	return ""
}

func (x *Interface) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

// {{.Name}}
type CustomColumnData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId    string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FieldId     string `protobuf:"bytes,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	ColName     string `protobuf:"bytes,3,opt,name=col_name,json=colName,proto3" json:"col_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ColType     string `protobuf:"bytes,5,opt,name=col_type,json=colType,proto3" json:"col_type,omitempty"`
	DeviceType  string `protobuf:"bytes,6,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
}

func (x *CustomColumnData) Reset() {
	*x = CustomColumnData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomColumnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomColumnData) ProtoMessage() {}

func (x *CustomColumnData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomColumnData.ProtoReflect.Descriptor instead.
func (*CustomColumnData) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{9}
}

func (x *CustomColumnData) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CustomColumnData) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *CustomColumnData) GetColName() string {
	if x != nil {
		return x.ColName
	}
	return ""
}

func (x *CustomColumnData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomColumnData) GetColType() string {
	if x != nil {
		return x.ColType
	}
	return ""
}

func (x *CustomColumnData) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

// {{.Name}}
type GnmiV1Conf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DialoutServer string `protobuf:"bytes,1,opt,name=dialout_server,json=dialoutServer,proto3" json:"dialout_server,omitempty"`
}

func (x *GnmiV1Conf) Reset() {
	*x = GnmiV1Conf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnmiV1Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnmiV1Conf) ProtoMessage() {}

func (x *GnmiV1Conf) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnmiV1Conf.ProtoReflect.Descriptor instead.
func (*GnmiV1Conf) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{10}
}

func (x *GnmiV1Conf) GetDialoutServer() string {
	if x != nil {
		return x.DialoutServer
	}
	return ""
}

// {{.Name}}
type DeviceDetailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyId               string                 `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	DeviceName              string                 `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceAlias             string                 `protobuf:"bytes,4,opt,name=device_alias,json=deviceAlias,proto3" json:"device_alias,omitempty"`
	DeviceType              string                 `protobuf:"bytes,5,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DeviceDescription       string                 `protobuf:"bytes,6,opt,name=device_description,json=deviceDescription,proto3" json:"device_description,omitempty"`
	Site                    *Site                  `protobuf:"bytes,7,opt,name=site,proto3" json:"site,omitempty"`
	Plan                    *Plan                  `protobuf:"bytes,8,opt,name=plan,proto3" json:"plan,omitempty"`
	Labels                  []*Label               `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
	AllInterfaces           []*Interface           `protobuf:"bytes,10,rep,name=all_interfaces,json=allInterfaces,proto3" json:"all_interfaces,omitempty"`
	DeviceFlowType          string                 `protobuf:"bytes,11,opt,name=device_flow_type,json=deviceFlowType,proto3" json:"device_flow_type,omitempty"`
	DeviceSampleRate        string                 `protobuf:"bytes,12,opt,name=device_sample_rate,json=deviceSampleRate,proto3" json:"device_sample_rate,omitempty"`
	SendingIps              []string               `protobuf:"bytes,13,rep,name=sending_ips,json=sendingIps,proto3" json:"sending_ips,omitempty"`
	DeviceSnmpIp            string                 `protobuf:"bytes,14,opt,name=device_snmp_ip,json=deviceSnmpIp,proto3" json:"device_snmp_ip,omitempty"`
	DeviceSnmpCommunity     string                 `protobuf:"bytes,15,opt,name=device_snmp_community,json=deviceSnmpCommunity,proto3" json:"device_snmp_community,omitempty"`
	MinimizeSnmp            *bool                  `protobuf:"varint,16,opt,name=minimize_snmp,json=minimizeSnmp,proto3,oneof" json:"minimize_snmp,omitempty"`
	DeviceBgpType           string                 `protobuf:"bytes,17,opt,name=device_bgp_type,json=deviceBgpType,proto3" json:"device_bgp_type,omitempty"`
	DeviceBgpNeighborIp     string                 `protobuf:"bytes,18,opt,name=device_bgp_neighbor_ip,json=deviceBgpNeighborIp,proto3" json:"device_bgp_neighbor_ip,omitempty"`
	DeviceBgpNeighborIp6    string                 `protobuf:"bytes,19,opt,name=device_bgp_neighbor_ip6,json=deviceBgpNeighborIp6,proto3" json:"device_bgp_neighbor_ip6,omitempty"`
	DeviceBgpNeighborAsn    string                 `protobuf:"bytes,20,opt,name=device_bgp_neighbor_asn,json=deviceBgpNeighborAsn,proto3" json:"device_bgp_neighbor_asn,omitempty"`
	DeviceBgpFlowspec       bool                   `protobuf:"varint,21,opt,name=device_bgp_flowspec,json=deviceBgpFlowspec,proto3" json:"device_bgp_flowspec,omitempty"`
	DeviceBgpPassword       string                 `protobuf:"bytes,22,opt,name=device_bgp_password,json=deviceBgpPassword,proto3" json:"device_bgp_password,omitempty"`
	DeviceBgpLabelUnicast   bool                   `protobuf:"varint,23,opt,name=device_bgp_label_unicast,json=deviceBgpLabelUnicast,proto3" json:"device_bgp_label_unicast,omitempty"`
	BgpLookupStrategy       string                 `protobuf:"bytes,24,opt,name=bgp_lookup_strategy,json=bgpLookupStrategy,proto3" json:"bgp_lookup_strategy,omitempty"`
	DeviceStatus            string                 `protobuf:"bytes,25,opt,name=device_status,json=deviceStatus,proto3" json:"device_status,omitempty"`
	UseBgpDeviceId          string                 `protobuf:"bytes,26,opt,name=use_bgp_device_id,json=useBgpDeviceId,proto3" json:"use_bgp_device_id,omitempty"`
	CustomColumns           string                 `protobuf:"bytes,27,opt,name=custom_columns,json=customColumns,proto3" json:"custom_columns,omitempty"`
	CustomColumnData        []*CustomColumnData    `protobuf:"bytes,28,rep,name=custom_column_data,json=customColumnData,proto3" json:"custom_column_data,omitempty"`
	DeviceChfClientPort     string                 `protobuf:"bytes,29,opt,name=device_chf_client_port,json=deviceChfClientPort,proto3" json:"device_chf_client_port,omitempty"`
	DeviceChfClientProtocol string                 `protobuf:"bytes,30,opt,name=device_chf_client_protocol,json=deviceChfClientProtocol,proto3" json:"device_chf_client_protocol,omitempty"`
	DeviceChfInterface      string                 `protobuf:"bytes,31,opt,name=device_chf_interface,json=deviceChfInterface,proto3" json:"device_chf_interface,omitempty"`
	DeviceAgentType         string                 `protobuf:"bytes,32,opt,name=device_agent_type,json=deviceAgentType,proto3" json:"device_agent_type,omitempty"`
	MaxFlowRate             uint32                 `protobuf:"varint,33,opt,name=max_flow_rate,json=maxFlowRate,proto3" json:"max_flow_rate,omitempty"`
	MaxBigFlowRate          uint32                 `protobuf:"varint,34,opt,name=max_big_flow_rate,json=maxBigFlowRate,proto3" json:"max_big_flow_rate,omitempty"`
	DeviceProxyBgp          string                 `protobuf:"bytes,35,opt,name=device_proxy_bgp,json=deviceProxyBgp,proto3" json:"device_proxy_bgp,omitempty"`
	DeviceProxyBgp6         string                 `protobuf:"bytes,36,opt,name=device_proxy_bgp6,json=deviceProxyBgp6,proto3" json:"device_proxy_bgp6,omitempty"`
	CreatedDate             *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	UpdatedDate             *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
	DeviceSnmpV3ConfEnabled bool                   `protobuf:"varint,39,opt,name=device_snmp_v3_conf_enabled,json=deviceSnmpV3ConfEnabled,proto3" json:"device_snmp_v3_conf_enabled,omitempty"`
	DeviceSnmpV3Conf        *DeviceSnmpV3Conf      `protobuf:"bytes,40,opt,name=device_snmp_v3_conf,json=deviceSnmpV3Conf,proto3" json:"device_snmp_v3_conf,omitempty"`
	CdnAttr                 string                 `protobuf:"bytes,41,opt,name=cdn_attr,json=cdnAttr,proto3" json:"cdn_attr,omitempty"`
	BgpPeerIp4              string                 `protobuf:"bytes,42,opt,name=bgp_peer_ip4,json=bgpPeerIp4,proto3" json:"bgp_peer_ip4,omitempty"`
	BgpPeerIp6              string                 `protobuf:"bytes,43,opt,name=bgp_peer_ip6,json=bgpPeerIp6,proto3" json:"bgp_peer_ip6,omitempty"`
	DeviceSubtype           string                 `protobuf:"bytes,44,opt,name=device_subtype,json=deviceSubtype,proto3" json:"device_subtype,omitempty"`
	DeviceVendorType        string                 `protobuf:"bytes,45,opt,name=device_vendor_type,json=deviceVendorType,proto3" json:"device_vendor_type,omitempty"`
	DeviceModelType         string                 `protobuf:"bytes,46,opt,name=device_model_type,json=deviceModelType,proto3" json:"device_model_type,omitempty"`
	CloudExportId           string                 `protobuf:"bytes,47,opt,name=cloud_export_id,json=cloudExportId,proto3" json:"cloud_export_id,omitempty"`
	DeviceKproxy            string                 `protobuf:"bytes,48,opt,name=device_kproxy,json=deviceKproxy,proto3" json:"device_kproxy,omitempty"`
	SnmpEnabled             string                 `protobuf:"bytes,49,opt,name=snmp_enabled,json=snmpEnabled,proto3" json:"snmp_enabled,omitempty"`
	SnmpDisabledReason      string                 `protobuf:"bytes,50,opt,name=snmp_disabled_reason,json=snmpDisabledReason,proto3" json:"snmp_disabled_reason,omitempty"`
	SnmpDisabledReasonOther string                 `protobuf:"bytes,51,opt,name=snmp_disabled_reason_other,json=snmpDisabledReasonOther,proto3" json:"snmp_disabled_reason_other,omitempty"`
	BgpDisabledReason       string                 `protobuf:"bytes,52,opt,name=bgp_disabled_reason,json=bgpDisabledReason,proto3" json:"bgp_disabled_reason,omitempty"`
	BgpDisabledReasonOther  string                 `protobuf:"bytes,53,opt,name=bgp_disabled_reason_other,json=bgpDisabledReasonOther,proto3" json:"bgp_disabled_reason_other,omitempty"`
	DeviceManufacturer      string                 `protobuf:"bytes,54,opt,name=device_manufacturer,json=deviceManufacturer,proto3" json:"device_manufacturer,omitempty"`
	DeviceAlert             string                 `protobuf:"bytes,55,opt,name=device_alert,json=deviceAlert,proto3" json:"device_alert,omitempty"`
	Role                    string                 `protobuf:"bytes,56,opt,name=role,proto3" json:"role,omitempty"`
	DeviceGnmiV1Conf        *GnmiV1Conf            `protobuf:"bytes,57,opt,name=device_gnmi_v1_conf,json=deviceGnmiV1Conf,proto3" json:"device_gnmi_v1_conf,omitempty"`
	UseAsnFromFlow          bool                   `protobuf:"varint,58,opt,name=use_asn_from_flow,json=useAsnFromFlow,proto3" json:"use_asn_from_flow,omitempty"`
	MaxInterface            uint32                 `protobuf:"varint,59,opt,name=max_interface,json=maxInterface,proto3" json:"max_interface,omitempty"`
	MaxInterfaceCheck       uint32                 `protobuf:"varint,60,opt,name=max_interface_check,json=maxInterfaceCheck,proto3" json:"max_interface_check,omitempty"`
	Nms                     *DeviceNmsConfig       `protobuf:"bytes,61,opt,name=nms,proto3" json:"nms,omitempty"`
}

func (x *DeviceDetailed) Reset() {
	*x = DeviceDetailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDetailed) ProtoMessage() {}

func (x *DeviceDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDetailed.ProtoReflect.Descriptor instead.
func (*DeviceDetailed) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceDetailed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceDetailed) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceAlias() string {
	if x != nil {
		return x.DeviceAlias
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceDescription() string {
	if x != nil {
		return x.DeviceDescription
	}
	return ""
}

func (x *DeviceDetailed) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *DeviceDetailed) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *DeviceDetailed) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DeviceDetailed) GetAllInterfaces() []*Interface {
	if x != nil {
		return x.AllInterfaces
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceFlowType() string {
	if x != nil {
		return x.DeviceFlowType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceSampleRate() string {
	if x != nil {
		return x.DeviceSampleRate
	}
	return ""
}

func (x *DeviceDetailed) GetSendingIps() []string {
	if x != nil {
		return x.SendingIps
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceSnmpIp() string {
	if x != nil {
		return x.DeviceSnmpIp
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceSnmpCommunity() string {
	if x != nil {
		return x.DeviceSnmpCommunity
	}
	return ""
}

func (x *DeviceDetailed) GetMinimizeSnmp() bool {
	if x != nil && x.MinimizeSnmp != nil {
		return *x.MinimizeSnmp
	}
	return false
}

func (x *DeviceDetailed) GetDeviceBgpType() string {
	if x != nil {
		return x.DeviceBgpType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpNeighborIp() string {
	if x != nil {
		return x.DeviceBgpNeighborIp
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpNeighborIp6() string {
	if x != nil {
		return x.DeviceBgpNeighborIp6
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpNeighborAsn() string {
	if x != nil {
		return x.DeviceBgpNeighborAsn
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpFlowspec() bool {
	if x != nil {
		return x.DeviceBgpFlowspec
	}
	return false
}

func (x *DeviceDetailed) GetDeviceBgpPassword() string {
	if x != nil {
		return x.DeviceBgpPassword
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpLabelUnicast() bool {
	if x != nil {
		return x.DeviceBgpLabelUnicast
	}
	return false
}

func (x *DeviceDetailed) GetBgpLookupStrategy() string {
	if x != nil {
		return x.BgpLookupStrategy
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceStatus() string {
	if x != nil {
		return x.DeviceStatus
	}
	return ""
}

func (x *DeviceDetailed) GetUseBgpDeviceId() string {
	if x != nil {
		return x.UseBgpDeviceId
	}
	return ""
}

func (x *DeviceDetailed) GetCustomColumns() string {
	if x != nil {
		return x.CustomColumns
	}
	return ""
}

func (x *DeviceDetailed) GetCustomColumnData() []*CustomColumnData {
	if x != nil {
		return x.CustomColumnData
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceChfClientPort() string {
	if x != nil {
		return x.DeviceChfClientPort
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceChfClientProtocol() string {
	if x != nil {
		return x.DeviceChfClientProtocol
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceChfInterface() string {
	if x != nil {
		return x.DeviceChfInterface
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceAgentType() string {
	if x != nil {
		return x.DeviceAgentType
	}
	return ""
}

func (x *DeviceDetailed) GetMaxFlowRate() uint32 {
	if x != nil {
		return x.MaxFlowRate
	}
	return 0
}

func (x *DeviceDetailed) GetMaxBigFlowRate() uint32 {
	if x != nil {
		return x.MaxBigFlowRate
	}
	return 0
}

func (x *DeviceDetailed) GetDeviceProxyBgp() string {
	if x != nil {
		return x.DeviceProxyBgp
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceProxyBgp6() string {
	if x != nil {
		return x.DeviceProxyBgp6
	}
	return ""
}

func (x *DeviceDetailed) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *DeviceDetailed) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceSnmpV3ConfEnabled() bool {
	if x != nil {
		return x.DeviceSnmpV3ConfEnabled
	}
	return false
}

func (x *DeviceDetailed) GetDeviceSnmpV3Conf() *DeviceSnmpV3Conf {
	if x != nil {
		return x.DeviceSnmpV3Conf
	}
	return nil
}

func (x *DeviceDetailed) GetCdnAttr() string {
	if x != nil {
		return x.CdnAttr
	}
	return ""
}

func (x *DeviceDetailed) GetBgpPeerIp4() string {
	if x != nil {
		return x.BgpPeerIp4
	}
	return ""
}

func (x *DeviceDetailed) GetBgpPeerIp6() string {
	if x != nil {
		return x.BgpPeerIp6
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceSubtype() string {
	if x != nil {
		return x.DeviceSubtype
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceVendorType() string {
	if x != nil {
		return x.DeviceVendorType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceModelType() string {
	if x != nil {
		return x.DeviceModelType
	}
	return ""
}

func (x *DeviceDetailed) GetCloudExportId() string {
	if x != nil {
		return x.CloudExportId
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceKproxy() string {
	if x != nil {
		return x.DeviceKproxy
	}
	return ""
}

func (x *DeviceDetailed) GetSnmpEnabled() string {
	if x != nil {
		return x.SnmpEnabled
	}
	return ""
}

func (x *DeviceDetailed) GetSnmpDisabledReason() string {
	if x != nil {
		return x.SnmpDisabledReason
	}
	return ""
}

func (x *DeviceDetailed) GetSnmpDisabledReasonOther() string {
	if x != nil {
		return x.SnmpDisabledReasonOther
	}
	return ""
}

func (x *DeviceDetailed) GetBgpDisabledReason() string {
	if x != nil {
		return x.BgpDisabledReason
	}
	return ""
}

func (x *DeviceDetailed) GetBgpDisabledReasonOther() string {
	if x != nil {
		return x.BgpDisabledReasonOther
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceAlert() string {
	if x != nil {
		return x.DeviceAlert
	}
	return ""
}

func (x *DeviceDetailed) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceGnmiV1Conf() *GnmiV1Conf {
	if x != nil {
		return x.DeviceGnmiV1Conf
	}
	return nil
}

func (x *DeviceDetailed) GetUseAsnFromFlow() bool {
	if x != nil {
		return x.UseAsnFromFlow
	}
	return false
}

func (x *DeviceDetailed) GetMaxInterface() uint32 {
	if x != nil {
		return x.MaxInterface
	}
	return 0
}

func (x *DeviceDetailed) GetMaxInterfaceCheck() uint32 {
	if x != nil {
		return x.MaxInterfaceCheck
	}
	return 0
}

func (x *DeviceDetailed) GetNms() *DeviceNmsConfig {
	if x != nil {
		return x.Nms
	}
	return nil
}

// {{.Name}}
type LabelConcise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LabelConcise) Reset() {
	*x = LabelConcise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelConcise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelConcise) ProtoMessage() {}

func (x *LabelConcise) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelConcise.ProtoReflect.Descriptor instead.
func (*LabelConcise) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{12}
}

func (x *LabelConcise) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// {{.Name}}
type ListDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDevicesRequest) Reset() {
	*x = ListDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesRequest) ProtoMessage() {}

func (x *ListDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{13}
}

// {{.Name}}
type ListDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices      []*DeviceDetailed `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	InvalidCount uint32            `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListDevicesResponse) Reset() {
	*x = ListDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResponse) ProtoMessage() {}

func (x *ListDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{14}
}

func (x *ListDevicesResponse) GetDevices() []*DeviceDetailed {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ListDevicesResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{15}
}

func (x *GetDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceDetailed `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *GetDeviceResponse) Reset() {
	*x = GetDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResponse) ProtoMessage() {}

func (x *GetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{16}
}

func (x *GetDeviceResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceConcise `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{17}
}

func (x *CreateDeviceRequest) GetDevice() *DeviceConcise {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type CreateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceDetailed `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{18}
}

func (x *CreateDeviceResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type CreateDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceConcise `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *CreateDevicesRequest) Reset() {
	*x = CreateDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevicesRequest) ProtoMessage() {}

func (x *CreateDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevicesRequest.ProtoReflect.Descriptor instead.
func (*CreateDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{19}
}

func (x *CreateDevicesRequest) GetDevices() []*DeviceConcise {
	if x != nil {
		return x.Devices
	}
	return nil
}

// {{.Name}}
type CreateDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices       []*DeviceDetailed `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	FailedDevices []string          `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *CreateDevicesResponse) Reset() {
	*x = CreateDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevicesResponse) ProtoMessage() {}

func (x *CreateDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevicesResponse.ProtoReflect.Descriptor instead.
func (*CreateDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{20}
}

func (x *CreateDevicesResponse) GetDevices() []*DeviceDetailed {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CreateDevicesResponse) GetFailedDevices() []string {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

// {{.Name}}
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceConcise `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateDeviceRequest) GetDevice() *DeviceConcise {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type UpdateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceDetailed `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceResponse) Reset() {
	*x = UpdateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResponse) ProtoMessage() {}

func (x *UpdateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateDeviceResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type UpdateDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceConcise `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *UpdateDevicesRequest) Reset() {
	*x = UpdateDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevicesRequest) ProtoMessage() {}

func (x *UpdateDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevicesRequest.ProtoReflect.Descriptor instead.
func (*UpdateDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateDevicesRequest) GetDevices() []*DeviceConcise {
	if x != nil {
		return x.Devices
	}
	return nil
}

// {{.Name}}
type UpdateDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices       []*DeviceDetailed `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	FailedDevices []string          `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *UpdateDevicesResponse) Reset() {
	*x = UpdateDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevicesResponse) ProtoMessage() {}

func (x *UpdateDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevicesResponse.ProtoReflect.Descriptor instead.
func (*UpdateDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateDevicesResponse) GetDevices() []*DeviceDetailed {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *UpdateDevicesResponse) GetFailedDevices() []string {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

// {{.Name}}
type UpdateDeviceLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels []*LabelConcise `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *UpdateDeviceLabelsRequest) Reset() {
	*x = UpdateDeviceLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceLabelsRequest) ProtoMessage() {}

func (x *UpdateDeviceLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceLabelsRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceLabelsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateDeviceLabelsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeviceLabelsRequest) GetLabels() []*LabelConcise {
	if x != nil {
		return x.Labels
	}
	return nil
}

// {{.Name}}
type UpdateDeviceLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceDetailed `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceLabelsResponse) Reset() {
	*x = UpdateDeviceLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceLabelsResponse) ProtoMessage() {}

func (x *UpdateDeviceLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceLabelsResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceLabelsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateDeviceLabelsResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{28}
}

// {{.Name}}
type DeleteDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteDevicesRequest) Reset() {
	*x = DeleteDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicesRequest) ProtoMessage() {}

func (x *DeleteDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicesRequest.ProtoReflect.Descriptor instead.
func (*DeleteDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteDevicesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// {{.Name}}
type DeleteDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedDevices []string `protobuf:"bytes,1,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *DeleteDevicesResponse) Reset() {
	*x = DeleteDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicesResponse) ProtoMessage() {}

func (x *DeleteDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicesResponse.ProtoReflect.Descriptor instead.
func (*DeleteDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteDevicesResponse) GetFailedDevices() []string {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

var File_kentik_device_v202308beta1_device_proto protoreflect.FileDescriptor

var file_kentik_device_v202308beta1_device_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x07, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x6e, 0x6d, 0x70, 0x56, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8b, 0x01,
	0x92, 0x41, 0x87, 0x01, 0x32, 0x84, 0x01, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20,
	0x28, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x2d, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x20, 0x76, 0x69, 0x61, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x2e, 0x20, 0x2a,
	0x2a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x58, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x29, 0x20,
	0x2d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x76, 0x69, 0x61, 0x20, 0x53,
	0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0xe8,
	0x01, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0xaa, 0x01, 0x92, 0x41, 0xa6, 0x01, 0x32, 0xa3, 0x01, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x20, 0x28, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x29, 0x20, 0x2d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x53, 0x4e,
	0x4d, 0x50, 0x20, 0x76, 0x33, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x29, 0x52,
	0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x32, 0x5d, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x29, 0x20, 0x2d,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x76, 0x69, 0x61,
	0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0xbe, 0x01, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x32, 0x87, 0x01,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x20, 0x28, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x20, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x29, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x0f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x20,
	0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x04, 0x73, 0x6e, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6d, 0x73, 0x53, 0x6e, 0x6d, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x32, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x53, 0x4e, 0x4d, 0x50,
	0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x04, 0x73, 0x6e, 0x6d, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x02,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6d, 0x73, 0x53,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x44, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x52, 0x02, 0x73, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x6d, 0x73, 0x53, 0x6e, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x4e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x70,
	0x6f, 0x72, 0x74, 0x2c, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x31, 0x36, 0x31, 0x2e,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x2c, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x32, 0x73, 0x2e, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6d, 0x73, 0x53, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x63, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x35, 0x4e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x54, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a,
	0x92, 0x41, 0x27, 0x32, 0x25, 0x53, 0x54, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x20, 0x74, 0x6f,
	0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x36, 0x30, 0x33, 0x30, 0x2e, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x5d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x32, 0x23, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2c, 0x20, 0x74, 0x6f, 0x20, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x32, 0x73, 0x2e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x55, 0x73, 0x65, 0x20, 0x53, 0x53, 0x4c, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x22, 0xab, 0x25, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x69,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x24, 0x32, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x32, 0x7a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x20, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x3a, 0x20, 0x6d, 0x69, 0x6e, 0x3d, 0x34, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x3d, 0x36,
	0x30, 0x2e, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61,
	0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x35, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x20, 0x28, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x29, 0x20, 0x2d, 0x20, 0x54,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x8d, 0x02, 0x0a, 0x08, 0x63, 0x64, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xf1, 0x01, 0x92, 0x41, 0xed, 0x01, 0x32, 0xea, 0x01, 0x43, 0x44,
	0x4e, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x28, 0x63, 0x64,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x29, 0x20, 0x2d, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x44, 0x4e, 0x53, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x74, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x27, 0x73, 0x20, 0x43, 0x44,
	0x4e, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x3a, 0x20, 0x22, 0x59, 0x22, 0x20, 0x6f, 0x72, 0x20, 0x22, 0x4e, 0x22,
	0x2e, 0x20, 0x2a, 0x2a, 0x20, 0x63, 0x64, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x27, 0x73, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x22, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x6e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2d,
	0x64, 0x6e, 0x73, 0x2d, 0x77, 0x77, 0x77, 0x22, 0x52, 0x07, 0x63, 0x64, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67,
	0x92, 0x41, 0x64, 0x32, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x3a, 0x20, 0x61, 0x6e, 0x79, 0x2e, 0x20, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x6d,
	0x61, 0x78, 0x3d, 0x31, 0x32, 0x38, 0x2e, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe3, 0x01, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0xc1, 0x01, 0x92, 0x41, 0xbd, 0x01, 0x32, 0xba, 0x01, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x69, 0x70, 0x20, 0x28, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x73,
	0x29, 0x20, 0x2d, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x28, 0x65, 0x73, 0x29, 0x2c,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x20, 0x2a, 0x2a, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x70, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x27, 0x73, 0x20, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x22, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x73,
	0x12, 0xea, 0x02, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0xbb, 0x02,
	0x92, 0x41, 0xb7, 0x02, 0x32, 0xb4, 0x02, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x72, 0x61,
	0x74, 0x65, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20,
	0x62, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x31, 0x2e, 0x20, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20,
	0x76, 0x61, 0x72, 0x69, 0x65, 0x73, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x6f, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3b,
	0x20, 0x73, 0x65, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x62, 0x30, 0x32, 0x2e,
	0x68, 0x74, 0x6d, 0x23, 0x41, 0x62, 0x30, 0x32, 0x2d, 0x46, 0x6c, 0x6f, 0x77, 0x5f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x2a, 0x2a, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x27, 0x73, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x22, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x52, 0x10, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x32, 0x8d, 0x01, 0x50, 0x6c, 0x61, 0x6e, 0x20, 0x28, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2e, 0x20, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x28, 0x73, 0x29,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e,
	0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0xbb,
	0x01, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0xa1, 0x01, 0x92, 0x41, 0x9d, 0x01, 0x32, 0x9a, 0x01, 0x53, 0x69, 0x74, 0x65, 0x20, 0x28,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x28, 0x69,
	0x66, 0x20, 0x61, 0x6e, 0x79, 0x29, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2e, 0x20, 0x53, 0x69, 0x74, 0x65, 0x20, 0x49, 0x44,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x69,
	0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x2e, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0xb8, 0x03, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x8d, 0x03, 0x92, 0x41, 0x89, 0x03, 0x32, 0x86, 0x03, 0x53, 0x4e,
	0x4d, 0x50, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x22, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x22, 0x20, 0x28, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x29, 0x2c, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x20,
	0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x31, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
	0x20, 0x33, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20,
	0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x20, 0x28, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x29,
	0x20, 0x28, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x77, 0x6f,
	0x6e, 0x27, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x36, 0x20, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x2e, 0x20, 0x2a, 0x2a, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x27, 0x73, 0x20, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x22, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x22, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x53, 0x6e, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xa2, 0x01, 0x92, 0x41, 0x9e, 0x01, 0x32, 0x9b, 0x01, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x49, 0x50, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x70, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x53, 0x4e, 0x4d, 0x50, 0x20, 0x49, 0x50, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x70, 0x20, 0x69, 0x73, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x20, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x27, 0x73, 0x20, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x22, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x22, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x6d,
	0x70, 0x49, 0x70, 0x12, 0xec, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xb7, 0x01, 0x92, 0x41, 0xb3, 0x01, 0x32, 0xb0, 0x01, 0x53, 0x4e, 0x4d,
	0x50, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x28, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x27, 0x73, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x22, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x52, 0x13, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x12, 0xfc, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e,
	0x6d, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x56, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x42, 0x9e,
	0x01, 0x92, 0x41, 0x9a, 0x01, 0x32, 0x97, 0x01, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x29, 0x20, 0x2d, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x6c, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x27, 0x73, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x22, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x52,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x56, 0x33, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0xf2, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc9, 0x01, 0x92, 0x41,
	0xc5, 0x01, 0x32, 0xc2, 0x01, 0x42, 0x47, 0x50, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x29, 0x20, 0x2d, 0x20, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x62, 0x67, 0x70, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x20, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x20, 0x22, 0x6e, 0x6f, 0x6e,
	0x65, 0x22, 0x20, 0x28, 0x75, 0x73, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x20,
	0x49, 0x50, 0x2f, 0x41, 0x53, 0x4e, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x29, 0x2c,
	0x20, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x20, 0x28, 0x70, 0x65, 0x65, 0x72, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x29, 0x2c, 0x20, 0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x20, 0x28, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x65, 0x72, 0x65, 0x64, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x29, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x85, 0x02, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0xcf, 0x01, 0x92, 0x41, 0xcb, 0x01, 0x32, 0xc8,
	0x01, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x49, 0x50, 0x76, 0x34, 0x20, 0x70, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x69, 0x70, 0x29, 0x20, 0x2d, 0x20, 0x41, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x50,
	0x76, 0x34, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x2a,
	0x2a, 0x20, 0x41, 0x6e, 0x20, 0x49, 0x50, 0x76, 0x34, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72,
	0x20, 0x49, 0x50, 0x76, 0x36, 0x20, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x12, 0x88,
	0x02, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xd0, 0x01, 0x92, 0x41, 0xcc, 0x01, 0x32, 0xc9, 0x01, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x49,
	0x50, 0x76, 0x36, 0x20, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x36, 0x29, 0x20, 0x2d, 0x20,
	0x41, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x50, 0x76, 0x36, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x2a, 0x2a, 0x20, 0x41, 0x6e, 0x20, 0x49,
	0x50, 0x76, 0x34, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x49, 0x50, 0x76, 0x36, 0x20,
	0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x22, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x36, 0x12, 0x82, 0x02, 0x0a, 0x17, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0xca, 0x01, 0x92, 0x41,
	0xc6, 0x01, 0x32, 0xc3, 0x01, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x41, 0x53, 0x4e, 0x20, 0x28, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x41, 0x53, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x28, 0x41,
	0x53, 0x4e, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6e,
	0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x20, 0x2a, 0x2a, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x61, 0x73, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x73, 0x6e, 0x12, 0xa0,
	0x02, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0xef, 0x01, 0x92,
	0x41, 0xeb, 0x01, 0x32, 0xe8, 0x01, 0x42, 0x47, 0x50, 0x20, 0x6d, 0x64, 0x35, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x2d, 0x20, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x42, 0x47, 0x50, 0x20, 0x4d, 0x44, 0x35, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x28, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x42, 0x47, 0x50,
	0x20, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x20, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x3a, 0x20, 0x33, 0x32, 0x2e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67,
	0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73,
	0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x11,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0xa4, 0x02, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xf8, 0x01,
	0x92, 0x41, 0xf4, 0x01, 0x32, 0xf1, 0x01, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x42, 0x47, 0x50, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x28, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x29, 0x20, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x73, 0x65,
	0x20, 0x42, 0x47, 0x50, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x20, 0x62, 0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x2a, 0x2a,
	0x20, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x22, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x29, 0x2e, 0x20, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x61, 0x20, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x42, 0x67, 0x70,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x65, 0x92, 0x41, 0x62, 0x32, 0x60, 0x42, 0x47, 0x50,
	0x20, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x28, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x62, 0x67, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x29, 0x20, 0x2d, 0x20,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x7a, 0x0a, 0x03, 0x6e, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32,
	0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x4e, 0x4d, 0x53, 0x2e, 0x52, 0x03, 0x6e, 0x6d, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x22, 0xce,
	0x01, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x53, 0x69, 0x74, 0x65, 0x20, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x53,
	0x69, 0x74, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x53, 0x69, 0x74, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x53, 0x69, 0x74, 0x65,
	0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x20, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x50, 0x6c, 0x61, 0x6e, 0x20, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x04, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41,
	0x13, 0x32, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x32, 0x14, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0x52, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x50,
	0x0a, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c,
	0x32, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0x92, 0x41, 0x0d, 0x32, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x32, 0x0e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20,
	0x49, 0x44, 0x52, 0x0c, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x89, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x32, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6e, 0x6d,
	0x70, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x53, 0x4e,
	0x4d, 0x50, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09, 0x73, 0x6e, 0x6d, 0x70, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x53, 0x4e,
	0x4d, 0x50, 0x20, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x09, 0x73, 0x6e, 0x6d, 0x70, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x32, 0x07, 0x53, 0x4e, 0x4d, 0x50, 0x20,
	0x49, 0x44, 0x52, 0x06, 0x73, 0x6e, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x40, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a,
	0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x49, 0x44, 0x52,
	0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d,
	0x32, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d,
	0x32, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x0a, 0x47, 0x6e, 0x6d,
	0x69, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x75, 0x74, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0xf9, 0x22, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x24, 0x32, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x46, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x42, 0x09, 0x92, 0x41, 0x06, 0x32, 0x04, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x09, 0x92, 0x41, 0x06, 0x32, 0x04, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x45, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x20, 0x72, 0x61, 0x74, 0x65, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x32, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x49, 0x50, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e,
	0x6d, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10,
	0x32, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x49, 0x50,
	0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x49, 0x70, 0x12, 0x4e,
	0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x32, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x6e, 0x6d, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3c,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x69, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32,
	0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x20, 0x49, 0x50, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x12, 0x53, 0x0a, 0x17,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x36, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x32, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x20, 0x49, 0x50, 0x36, 0x52, 0x14, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70,
	0x36, 0x12, 0x53, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x42, 0x47, 0x50, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x20, 0x41, 0x53, 0x4e,
	0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x48, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x42, 0x47, 0x50, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x52, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x48, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x32, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x67, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x18, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x32, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x20, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x15, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x42, 0x47, 0x50, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x11, 0x62, 0x67, 0x70, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x37, 0x0a, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x67, 0x70,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x55, 0x73, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x49, 0x44, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x42, 0x67, 0x70,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x16, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x66, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x43, 0x48, 0x46, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a, 0x1a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x66, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x43, 0x48, 0x46,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x14, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x43, 0x48, 0x46, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x66, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x4d, 0x61, 0x78, 0x20, 0x66, 0x6c, 0x6f, 0x77,
	0x20, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x4d, 0x61, 0x78, 0x20, 0x62, 0x69, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x77,
	0x20, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x42, 0x69, 0x67, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x67, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x20, 0x42, 0x47, 0x50, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x42, 0x67, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x67, 0x70, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x20, 0x42, 0x47, 0x50, 0x36, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x67, 0x70, 0x36, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x32, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32,
	0x21, 0x4c, 0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54,
	0x43, 0x29, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x67, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x76,
	0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x56, 0x33, 0x43, 0x6f, 0x6e,
	0x66, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x6d, 0x70, 0x56, 0x33, 0x43,
	0x6f, 0x6e, 0x66, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x76, 0x33, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6e,
	0x6d, 0x70, 0x56, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x64, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32,
	0x0e, 0x43, 0x44, 0x4e, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x07, 0x63, 0x64, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x34, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0x42, 0x47, 0x50, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x49, 0x50,
	0x34, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x49, 0x70, 0x34, 0x12, 0x33, 0x0a,
	0x0c, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x36, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x42, 0x47, 0x50, 0x20, 0x70, 0x65,
	0x65, 0x72, 0x20, 0x49, 0x50, 0x36, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x70, 0x36, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32,
	0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x32, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x4b, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x34, 0x0a, 0x0c, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x53, 0x4e, 0x4d,
	0x50, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x0b, 0x73, 0x6e, 0x6d, 0x70, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x53, 0x4e, 0x4d, 0x50, 0x20,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x12, 0x73, 0x6e, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x1a, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x53, 0x4e,
	0x4d, 0x50, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x17, 0x73, 0x6e, 0x6d, 0x70, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x13, 0x62, 0x67, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x32, 0x13, 0x42, 0x47, 0x50, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x62, 0x67, 0x70, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x19, 0x62,
	0x67, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x32, 0x19, 0x42, 0x47, 0x50, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x16,
	0x62, 0x67, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x52, 0x12, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x06, 0x32, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x6e, 0x6d, 0x69, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x32, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x47, 0x4e, 0x4d, 0x49, 0x20, 0x76, 0x31,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x6e, 0x6d, 0x69, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x41, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0x92, 0x41, 0x13,
	0x32, 0x11, 0x55, 0x73, 0x65, 0x20, 0x41, 0x53, 0x4e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x41, 0x73, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32,
	0x0d, 0x4d, 0x61, 0x78, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13,
	0x4d, 0x61, 0x78, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x75, 0x0a, 0x03, 0x6e, 0x6d, 0x73, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x4e, 0x4d, 0x53, 0x2e, 0x52, 0x03, 0x6e, 0x6d, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x22,
	0x2d, 0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x32, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x69, 0x73, 0x65, 0x42, 0x28, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32,
	0x29, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x42, 0x38, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x5e, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x69, 0x73, 0x65, 0x42, 0x42, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x4e, 0x65, 0x77, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7d, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x42, 0x38, 0x92, 0x41,
	0x31, 0x32, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0xeb, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xc9, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x73, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x42, 0x31,
	0x92, 0x41, 0x2a, 0x32, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x20, 0x32, 0x1e,
	0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x26, 0x32, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x32, 0xf6,
	0x1a, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xaa, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb9, 0x01, 0x92, 0x41, 0x7e, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x1a, 0x5c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x28,
	0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x30,
	0x31, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29, 0x2e, 0x2a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0xf2, 0xd7, 0x02, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc9, 0x02,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x92, 0x41, 0x9d, 0x01, 0x12,
	0x23, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x1a, 0x6b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x30, 0x31, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29,
	0x2e, 0x2a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xd7, 0x02, 0x11,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe6, 0x02, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf2, 0x01,
	0x92, 0x41, 0xb2, 0x01, 0x12, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x1a, 0x88, 0x01,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28,
	0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x30,
	0x31, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29, 0x2e, 0x2a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xd7, 0x02, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x22, 0x1b, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x83, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x02, 0x92, 0x41, 0xc6, 0x01,
	0x12, 0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x28, 0x6d, 0x61,
	0x78, 0x20, 0x31, 0x30, 0x30, 0x29, 0x2e, 0x1a, 0x8d, 0x01, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x28, 0x73,
	0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x30, 0x31,
	0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29, 0x2e, 0x2a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0xf2, 0xd7, 0x02, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x22, 0x21, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x03, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x02, 0x92,
	0x41, 0xd3, 0x01, 0x12, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x1a, 0x9e, 0x01, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28,
	0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x30,
	0x31, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29, 0x2e, 0x2a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xd7, 0x02, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x1a, 0x27, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xac,
	0x03, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x02, 0x92, 0x41, 0xef, 0x01, 0x12, 0x34, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x28, 0x6d, 0x61, 0x78, 0x20, 0x31, 0x30, 0x30,
	0x29, 0x2e, 0x1a, 0xa7, 0x01, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34,
	0x2f, 0x43, 0x62, 0x30, 0x31, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29, 0x2e, 0x2a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0xf2, 0xd7, 0x02, 0x12, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x1a, 0x21, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xc2, 0x03,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbc, 0x02, 0x92, 0x41, 0xf0, 0x01, 0x12, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x1a, 0xbc, 0x01, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5d, 0x28, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x31, 0x36, 0x2e, 0x68, 0x74, 0x6d,
	0x29, 0x29, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x69, 0x64, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xf2, 0xd7, 0x02, 0x12, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x1a, 0x27, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xd5, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x92, 0x41, 0x9f, 0x01, 0x12, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x1a, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x49, 0x44, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x34, 0x2f, 0x43, 0x62, 0x30, 0x31, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29, 0x2e, 0x2a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xd7, 0x02, 0x12,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xee, 0x02, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf7, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x12, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x1a, 0x75, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49, 0x44, 0x73,
	0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x5b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x43,
	0x62, 0x30, 0x31, 0x2e, 0x68, 0x74, 0x6d, 0x29, 0x29, 0x2e, 0x2a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0xf2, 0xd7, 0x02, 0x12, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x1a, 0x2a, 0xca, 0x41, 0x13,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x90, 0xd8, 0x02, 0x03, 0x42, 0xee, 0x03, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x92, 0x41, 0x9c, 0x03, 0x12, 0xb5, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x12, 0x52, 0x23, 0x20, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x0c, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48,
	0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48,
	0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a, 0x25, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50,
	0x49, 0x73, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x41, 0x62, 0x30,
	0x39, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x41, 0x62, 0x30, 0x39, 0x2d, 0x41, 0x50, 0x49, 0x73, 0x5f,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_device_v202308beta1_device_proto_rawDescOnce sync.Once
	file_kentik_device_v202308beta1_device_proto_rawDescData = file_kentik_device_v202308beta1_device_proto_rawDesc
)

func file_kentik_device_v202308beta1_device_proto_rawDescGZIP() []byte {
	file_kentik_device_v202308beta1_device_proto_rawDescOnce.Do(func() {
		file_kentik_device_v202308beta1_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_device_v202308beta1_device_proto_rawDescData)
	})
	return file_kentik_device_v202308beta1_device_proto_rawDescData
}

var file_kentik_device_v202308beta1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_kentik_device_v202308beta1_device_proto_goTypes = []interface{}{
	(*DeviceSnmpV3Conf)(nil),           // 0: kentik.device.v202308beta1.DeviceSnmpV3Conf
	(*DeviceNmsConfig)(nil),            // 1: kentik.device.v202308beta1.DeviceNmsConfig
	(*DeviceNmsSnmpConfig)(nil),        // 2: kentik.device.v202308beta1.DeviceNmsSnmpConfig
	(*DeviceNmsStConfig)(nil),          // 3: kentik.device.v202308beta1.DeviceNmsStConfig
	(*DeviceConcise)(nil),              // 4: kentik.device.v202308beta1.DeviceConcise
	(*Site)(nil),                       // 5: kentik.device.v202308beta1.Site
	(*Plan)(nil),                       // 6: kentik.device.v202308beta1.Plan
	(*Label)(nil),                      // 7: kentik.device.v202308beta1.Label
	(*Interface)(nil),                  // 8: kentik.device.v202308beta1.Interface
	(*CustomColumnData)(nil),           // 9: kentik.device.v202308beta1.CustomColumnData
	(*GnmiV1Conf)(nil),                 // 10: kentik.device.v202308beta1.GnmiV1Conf
	(*DeviceDetailed)(nil),             // 11: kentik.device.v202308beta1.DeviceDetailed
	(*LabelConcise)(nil),               // 12: kentik.device.v202308beta1.LabelConcise
	(*ListDevicesRequest)(nil),         // 13: kentik.device.v202308beta1.ListDevicesRequest
	(*ListDevicesResponse)(nil),        // 14: kentik.device.v202308beta1.ListDevicesResponse
	(*GetDeviceRequest)(nil),           // 15: kentik.device.v202308beta1.GetDeviceRequest
	(*GetDeviceResponse)(nil),          // 16: kentik.device.v202308beta1.GetDeviceResponse
	(*CreateDeviceRequest)(nil),        // 17: kentik.device.v202308beta1.CreateDeviceRequest
	(*CreateDeviceResponse)(nil),       // 18: kentik.device.v202308beta1.CreateDeviceResponse
	(*CreateDevicesRequest)(nil),       // 19: kentik.device.v202308beta1.CreateDevicesRequest
	(*CreateDevicesResponse)(nil),      // 20: kentik.device.v202308beta1.CreateDevicesResponse
	(*UpdateDeviceRequest)(nil),        // 21: kentik.device.v202308beta1.UpdateDeviceRequest
	(*UpdateDeviceResponse)(nil),       // 22: kentik.device.v202308beta1.UpdateDeviceResponse
	(*UpdateDevicesRequest)(nil),       // 23: kentik.device.v202308beta1.UpdateDevicesRequest
	(*UpdateDevicesResponse)(nil),      // 24: kentik.device.v202308beta1.UpdateDevicesResponse
	(*UpdateDeviceLabelsRequest)(nil),  // 25: kentik.device.v202308beta1.UpdateDeviceLabelsRequest
	(*UpdateDeviceLabelsResponse)(nil), // 26: kentik.device.v202308beta1.UpdateDeviceLabelsResponse
	(*DeleteDeviceRequest)(nil),        // 27: kentik.device.v202308beta1.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),       // 28: kentik.device.v202308beta1.DeleteDeviceResponse
	(*DeleteDevicesRequest)(nil),       // 29: kentik.device.v202308beta1.DeleteDevicesRequest
	(*DeleteDevicesResponse)(nil),      // 30: kentik.device.v202308beta1.DeleteDevicesResponse
	(*durationpb.Duration)(nil),        // 31: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),      // 32: google.protobuf.Timestamp
}
var file_kentik_device_v202308beta1_device_proto_depIdxs = []int32{
	2,  // 0: kentik.device.v202308beta1.DeviceNmsConfig.snmp:type_name -> kentik.device.v202308beta1.DeviceNmsSnmpConfig
	3,  // 1: kentik.device.v202308beta1.DeviceNmsConfig.st:type_name -> kentik.device.v202308beta1.DeviceNmsStConfig
	31, // 2: kentik.device.v202308beta1.DeviceNmsSnmpConfig.timeout:type_name -> google.protobuf.Duration
	31, // 3: kentik.device.v202308beta1.DeviceNmsStConfig.timeout:type_name -> google.protobuf.Duration
	0,  // 4: kentik.device.v202308beta1.DeviceConcise.device_snmp_v3_conf:type_name -> kentik.device.v202308beta1.DeviceSnmpV3Conf
	1,  // 5: kentik.device.v202308beta1.DeviceConcise.nms:type_name -> kentik.device.v202308beta1.DeviceNmsConfig
	32, // 6: kentik.device.v202308beta1.Label.edate:type_name -> google.protobuf.Timestamp
	32, // 7: kentik.device.v202308beta1.Label.cdate:type_name -> google.protobuf.Timestamp
	5,  // 8: kentik.device.v202308beta1.DeviceDetailed.site:type_name -> kentik.device.v202308beta1.Site
	6,  // 9: kentik.device.v202308beta1.DeviceDetailed.plan:type_name -> kentik.device.v202308beta1.Plan
	7,  // 10: kentik.device.v202308beta1.DeviceDetailed.labels:type_name -> kentik.device.v202308beta1.Label
	8,  // 11: kentik.device.v202308beta1.DeviceDetailed.all_interfaces:type_name -> kentik.device.v202308beta1.Interface
	9,  // 12: kentik.device.v202308beta1.DeviceDetailed.custom_column_data:type_name -> kentik.device.v202308beta1.CustomColumnData
	32, // 13: kentik.device.v202308beta1.DeviceDetailed.created_date:type_name -> google.protobuf.Timestamp
	32, // 14: kentik.device.v202308beta1.DeviceDetailed.updated_date:type_name -> google.protobuf.Timestamp
	0,  // 15: kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf:type_name -> kentik.device.v202308beta1.DeviceSnmpV3Conf
	10, // 16: kentik.device.v202308beta1.DeviceDetailed.device_gnmi_v1_conf:type_name -> kentik.device.v202308beta1.GnmiV1Conf
	1,  // 17: kentik.device.v202308beta1.DeviceDetailed.nms:type_name -> kentik.device.v202308beta1.DeviceNmsConfig
	11, // 18: kentik.device.v202308beta1.ListDevicesResponse.devices:type_name -> kentik.device.v202308beta1.DeviceDetailed
	11, // 19: kentik.device.v202308beta1.GetDeviceResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 20: kentik.device.v202308beta1.CreateDeviceRequest.device:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 21: kentik.device.v202308beta1.CreateDeviceResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 22: kentik.device.v202308beta1.CreateDevicesRequest.devices:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 23: kentik.device.v202308beta1.CreateDevicesResponse.devices:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 24: kentik.device.v202308beta1.UpdateDeviceRequest.device:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 25: kentik.device.v202308beta1.UpdateDeviceResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 26: kentik.device.v202308beta1.UpdateDevicesRequest.devices:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 27: kentik.device.v202308beta1.UpdateDevicesResponse.devices:type_name -> kentik.device.v202308beta1.DeviceDetailed
	12, // 28: kentik.device.v202308beta1.UpdateDeviceLabelsRequest.labels:type_name -> kentik.device.v202308beta1.LabelConcise
	11, // 29: kentik.device.v202308beta1.UpdateDeviceLabelsResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	13, // 30: kentik.device.v202308beta1.DeviceService.ListDevices:input_type -> kentik.device.v202308beta1.ListDevicesRequest
	15, // 31: kentik.device.v202308beta1.DeviceService.GetDevice:input_type -> kentik.device.v202308beta1.GetDeviceRequest
	17, // 32: kentik.device.v202308beta1.DeviceService.CreateDevice:input_type -> kentik.device.v202308beta1.CreateDeviceRequest
	19, // 33: kentik.device.v202308beta1.DeviceService.CreateDevices:input_type -> kentik.device.v202308beta1.CreateDevicesRequest
	21, // 34: kentik.device.v202308beta1.DeviceService.UpdateDevice:input_type -> kentik.device.v202308beta1.UpdateDeviceRequest
	23, // 35: kentik.device.v202308beta1.DeviceService.UpdateDevices:input_type -> kentik.device.v202308beta1.UpdateDevicesRequest
	25, // 36: kentik.device.v202308beta1.DeviceService.UpdateDeviceLabels:input_type -> kentik.device.v202308beta1.UpdateDeviceLabelsRequest
	27, // 37: kentik.device.v202308beta1.DeviceService.DeleteDevice:input_type -> kentik.device.v202308beta1.DeleteDeviceRequest
	29, // 38: kentik.device.v202308beta1.DeviceService.DeleteDevices:input_type -> kentik.device.v202308beta1.DeleteDevicesRequest
	14, // 39: kentik.device.v202308beta1.DeviceService.ListDevices:output_type -> kentik.device.v202308beta1.ListDevicesResponse
	16, // 40: kentik.device.v202308beta1.DeviceService.GetDevice:output_type -> kentik.device.v202308beta1.GetDeviceResponse
	18, // 41: kentik.device.v202308beta1.DeviceService.CreateDevice:output_type -> kentik.device.v202308beta1.CreateDeviceResponse
	20, // 42: kentik.device.v202308beta1.DeviceService.CreateDevices:output_type -> kentik.device.v202308beta1.CreateDevicesResponse
	22, // 43: kentik.device.v202308beta1.DeviceService.UpdateDevice:output_type -> kentik.device.v202308beta1.UpdateDeviceResponse
	24, // 44: kentik.device.v202308beta1.DeviceService.UpdateDevices:output_type -> kentik.device.v202308beta1.UpdateDevicesResponse
	26, // 45: kentik.device.v202308beta1.DeviceService.UpdateDeviceLabels:output_type -> kentik.device.v202308beta1.UpdateDeviceLabelsResponse
	28, // 46: kentik.device.v202308beta1.DeviceService.DeleteDevice:output_type -> kentik.device.v202308beta1.DeleteDeviceResponse
	30, // 47: kentik.device.v202308beta1.DeviceService.DeleteDevices:output_type -> kentik.device.v202308beta1.DeleteDevicesResponse
	39, // [39:48] is the sub-list for method output_type
	30, // [30:39] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_kentik_device_v202308beta1_device_proto_init() }
func file_kentik_device_v202308beta1_device_proto_init() {
	if File_kentik_device_v202308beta1_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_device_v202308beta1_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSnmpV3Conf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNmsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNmsSnmpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNmsStConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConcise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomColumnData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GnmiV1Conf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDetailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelConcise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_device_v202308beta1_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_device_v202308beta1_device_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_kentik_device_v202308beta1_device_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_device_v202308beta1_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_device_v202308beta1_device_proto_goTypes,
		DependencyIndexes: file_kentik_device_v202308beta1_device_proto_depIdxs,
		MessageInfos:      file_kentik_device_v202308beta1_device_proto_msgTypes,
	}.Build()
	File_kentik_device_v202308beta1_device_proto = out.File
	file_kentik_device_v202308beta1_device_proto_rawDesc = nil
	file_kentik_device_v202308beta1_device_proto_goTypes = nil
	file_kentik_device_v202308beta1_device_proto_depIdxs = nil
}
