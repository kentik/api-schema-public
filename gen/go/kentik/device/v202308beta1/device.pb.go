// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kentik/device/v202308beta1/device.proto

package device

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// {{.Name}}
type DeviceSnmpV3Conf struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Username                 string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AuthenticationProtocol   string                 `protobuf:"bytes,2,opt,name=authentication_protocol,json=authenticationProtocol,proto3" json:"authentication_protocol,omitempty"`
	AuthenticationPassphrase string                 `protobuf:"bytes,3,opt,name=authentication_passphrase,json=authenticationPassphrase,proto3" json:"authentication_passphrase,omitempty"`
	PrivacyProtocol          string                 `protobuf:"bytes,4,opt,name=privacy_protocol,json=privacyProtocol,proto3" json:"privacy_protocol,omitempty"`
	PrivacyPassphrase        string                 `protobuf:"bytes,5,opt,name=privacy_passphrase,json=privacyPassphrase,proto3" json:"privacy_passphrase,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DeviceSnmpV3Conf) Reset() {
	*x = DeviceSnmpV3Conf{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSnmpV3Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSnmpV3Conf) ProtoMessage() {}

func (x *DeviceSnmpV3Conf) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSnmpV3Conf.ProtoReflect.Descriptor instead.
func (*DeviceSnmpV3Conf) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceSnmpV3Conf) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetAuthenticationProtocol() string {
	if x != nil {
		return x.AuthenticationProtocol
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetAuthenticationPassphrase() string {
	if x != nil {
		return x.AuthenticationPassphrase
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetPrivacyProtocol() string {
	if x != nil {
		return x.PrivacyProtocol
	}
	return ""
}

func (x *DeviceSnmpV3Conf) GetPrivacyPassphrase() string {
	if x != nil {
		return x.PrivacyPassphrase
	}
	return ""
}

// {{.Name}}
type DeviceNmsConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       string                 `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	IpAddress     string                 `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Snmp          *DeviceNmsSnmpConfig   `protobuf:"bytes,4,opt,name=snmp,proto3" json:"snmp,omitempty"`
	St            *DeviceNmsStConfig     `protobuf:"bytes,5,opt,name=st,proto3" json:"st,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceNmsConfig) Reset() {
	*x = DeviceNmsConfig{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceNmsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNmsConfig) ProtoMessage() {}

func (x *DeviceNmsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNmsConfig.ProtoReflect.Descriptor instead.
func (*DeviceNmsConfig) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceNmsConfig) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *DeviceNmsConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DeviceNmsConfig) GetSnmp() *DeviceNmsSnmpConfig {
	if x != nil {
		return x.Snmp
	}
	return nil
}

func (x *DeviceNmsConfig) GetSt() *DeviceNmsStConfig {
	if x != nil {
		return x.St
	}
	return nil
}

// {{.Name}}
type DeviceNmsSnmpConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CredentialName string                 `protobuf:"bytes,1,opt,name=credential_name,json=credentialName,proto3" json:"credential_name,omitempty"`
	Port           uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Timeout        *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeviceNmsSnmpConfig) Reset() {
	*x = DeviceNmsSnmpConfig{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceNmsSnmpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNmsSnmpConfig) ProtoMessage() {}

func (x *DeviceNmsSnmpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNmsSnmpConfig.ProtoReflect.Descriptor instead.
func (*DeviceNmsSnmpConfig) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceNmsSnmpConfig) GetCredentialName() string {
	if x != nil {
		return x.CredentialName
	}
	return ""
}

func (x *DeviceNmsSnmpConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceNmsSnmpConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// {{.Name}}
type DeviceNmsStConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CredentialName string                 `protobuf:"bytes,1,opt,name=credential_name,json=credentialName,proto3" json:"credential_name,omitempty"`
	Port           uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Timeout        *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Secure         bool                   `protobuf:"varint,4,opt,name=secure,proto3" json:"secure,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeviceNmsStConfig) Reset() {
	*x = DeviceNmsStConfig{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceNmsStConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNmsStConfig) ProtoMessage() {}

func (x *DeviceNmsStConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNmsStConfig.ProtoReflect.Descriptor instead.
func (*DeviceNmsStConfig) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceNmsStConfig) GetCredentialName() string {
	if x != nil {
		return x.CredentialName
	}
	return ""
}

func (x *DeviceNmsStConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DeviceNmsStConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *DeviceNmsStConfig) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

// {{.Name}}
type DeviceConcise struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id
	Id                      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceName              string            `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceSubtype           string            `protobuf:"bytes,3,opt,name=device_subtype,json=deviceSubtype,proto3" json:"device_subtype,omitempty"`
	CdnAttr                 string            `protobuf:"bytes,4,opt,name=cdn_attr,json=cdnAttr,proto3" json:"cdn_attr,omitempty"`
	DeviceDescription       string            `protobuf:"bytes,5,opt,name=device_description,json=deviceDescription,proto3" json:"device_description,omitempty"`
	SendingIps              []string          `protobuf:"bytes,6,rep,name=sending_ips,json=sendingIps,proto3" json:"sending_ips,omitempty"`
	DeviceSampleRate        float64           `protobuf:"fixed64,7,opt,name=device_sample_rate,json=deviceSampleRate,proto3" json:"device_sample_rate,omitempty"`
	PlanId                  uint32            `protobuf:"varint,8,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	SiteId                  uint32            `protobuf:"varint,9,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	MinimizeSnmp            *bool             `protobuf:"varint,10,opt,name=minimize_snmp,json=minimizeSnmp,proto3,oneof" json:"minimize_snmp,omitempty"`
	DeviceSnmpIp            string            `protobuf:"bytes,11,opt,name=device_snmp_ip,json=deviceSnmpIp,proto3" json:"device_snmp_ip,omitempty"`
	DeviceSnmpCommunity     string            `protobuf:"bytes,12,opt,name=device_snmp_community,json=deviceSnmpCommunity,proto3" json:"device_snmp_community,omitempty"`
	DeviceSnmpV3Conf        *DeviceSnmpV3Conf `protobuf:"bytes,13,opt,name=device_snmp_v3_conf,json=deviceSnmpV3Conf,proto3" json:"device_snmp_v3_conf,omitempty"`
	DeviceBgpType           string            `protobuf:"bytes,14,opt,name=device_bgp_type,json=deviceBgpType,proto3" json:"device_bgp_type,omitempty"`
	DeviceBgpNeighborIp     string            `protobuf:"bytes,15,opt,name=device_bgp_neighbor_ip,json=deviceBgpNeighborIp,proto3" json:"device_bgp_neighbor_ip,omitempty"`
	DeviceBgpNeighborIp6    string            `protobuf:"bytes,16,opt,name=device_bgp_neighbor_ip6,json=deviceBgpNeighborIp6,proto3" json:"device_bgp_neighbor_ip6,omitempty"`
	DeviceBgpNeighborAsn    string            `protobuf:"bytes,17,opt,name=device_bgp_neighbor_asn,json=deviceBgpNeighborAsn,proto3" json:"device_bgp_neighbor_asn,omitempty"`
	DeviceBgpPassword       string            `protobuf:"bytes,18,opt,name=device_bgp_password,json=deviceBgpPassword,proto3" json:"device_bgp_password,omitempty"`
	UseBgpDeviceId          uint32            `protobuf:"varint,19,opt,name=use_bgp_device_id,json=useBgpDeviceId,proto3" json:"use_bgp_device_id,omitempty"`
	DeviceBgpFlowspec       bool              `protobuf:"varint,20,opt,name=device_bgp_flowspec,json=deviceBgpFlowspec,proto3" json:"device_bgp_flowspec,omitempty"`
	Nms                     *DeviceNmsConfig  `protobuf:"bytes,21,opt,name=nms,proto3" json:"nms,omitempty"`
	DeviceBgpCredentialName string            `protobuf:"bytes,22,opt,name=device_bgp_credential_name,json=deviceBgpCredentialName,proto3" json:"device_bgp_credential_name,omitempty"`
	FlowSnmpCredentialName  string            `protobuf:"bytes,23,opt,name=flow_snmp_credential_name,json=flowSnmpCredentialName,proto3" json:"flow_snmp_credential_name,omitempty"`
	MonitoringTemplateId    uint32            `protobuf:"varint,24,opt,name=monitoring_template_id,json=monitoringTemplateId,proto3" json:"monitoring_template_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DeviceConcise) Reset() {
	*x = DeviceConcise{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceConcise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConcise) ProtoMessage() {}

func (x *DeviceConcise) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConcise.ProtoReflect.Descriptor instead.
func (*DeviceConcise) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceConcise) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceConcise) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceConcise) GetDeviceSubtype() string {
	if x != nil {
		return x.DeviceSubtype
	}
	return ""
}

func (x *DeviceConcise) GetCdnAttr() string {
	if x != nil {
		return x.CdnAttr
	}
	return ""
}

func (x *DeviceConcise) GetDeviceDescription() string {
	if x != nil {
		return x.DeviceDescription
	}
	return ""
}

func (x *DeviceConcise) GetSendingIps() []string {
	if x != nil {
		return x.SendingIps
	}
	return nil
}

func (x *DeviceConcise) GetDeviceSampleRate() float64 {
	if x != nil {
		return x.DeviceSampleRate
	}
	return 0
}

func (x *DeviceConcise) GetPlanId() uint32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *DeviceConcise) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *DeviceConcise) GetMinimizeSnmp() bool {
	if x != nil && x.MinimizeSnmp != nil {
		return *x.MinimizeSnmp
	}
	return false
}

func (x *DeviceConcise) GetDeviceSnmpIp() string {
	if x != nil {
		return x.DeviceSnmpIp
	}
	return ""
}

func (x *DeviceConcise) GetDeviceSnmpCommunity() string {
	if x != nil {
		return x.DeviceSnmpCommunity
	}
	return ""
}

func (x *DeviceConcise) GetDeviceSnmpV3Conf() *DeviceSnmpV3Conf {
	if x != nil {
		return x.DeviceSnmpV3Conf
	}
	return nil
}

func (x *DeviceConcise) GetDeviceBgpType() string {
	if x != nil {
		return x.DeviceBgpType
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpNeighborIp() string {
	if x != nil {
		return x.DeviceBgpNeighborIp
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpNeighborIp6() string {
	if x != nil {
		return x.DeviceBgpNeighborIp6
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpNeighborAsn() string {
	if x != nil {
		return x.DeviceBgpNeighborAsn
	}
	return ""
}

func (x *DeviceConcise) GetDeviceBgpPassword() string {
	if x != nil {
		return x.DeviceBgpPassword
	}
	return ""
}

func (x *DeviceConcise) GetUseBgpDeviceId() uint32 {
	if x != nil {
		return x.UseBgpDeviceId
	}
	return 0
}

func (x *DeviceConcise) GetDeviceBgpFlowspec() bool {
	if x != nil {
		return x.DeviceBgpFlowspec
	}
	return false
}

func (x *DeviceConcise) GetNms() *DeviceNmsConfig {
	if x != nil {
		return x.Nms
	}
	return nil
}

func (x *DeviceConcise) GetDeviceBgpCredentialName() string {
	if x != nil {
		return x.DeviceBgpCredentialName
	}
	return ""
}

func (x *DeviceConcise) GetFlowSnmpCredentialName() string {
	if x != nil {
		return x.FlowSnmpCredentialName
	}
	return ""
}

func (x *DeviceConcise) GetMonitoringTemplateId() uint32 {
	if x != nil {
		return x.MonitoringTemplateId
	}
	return 0
}

// {{.Name}}
type Site struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteName      string                 `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Lat           float64                `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon           float64                `protobuf:"fixed64,4,opt,name=lon,proto3" json:"lon,omitempty"`
	CompanyId     string                 `protobuf:"bytes,5,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Site) Reset() {
	*x = Site{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{5}
}

func (x *Site) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Site) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *Site) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Site) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Site) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

// {{.Name}}
type Plan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Active        bool                   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Bgp           bool                   `protobuf:"varint,4,opt,name=bgp,proto3" json:"bgp,omitempty"`
	CompanyId     string                 `protobuf:"bytes,5,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	DeviceTypes   []string               `protobuf:"bytes,7,rep,name=device_types,json=deviceTypes,proto3" json:"device_types,omitempty"`
	Devices       []string               `protobuf:"bytes,8,rep,name=devices,proto3" json:"devices,omitempty"`
	FastRetention uint32                 `protobuf:"varint,9,opt,name=fast_retention,json=fastRetention,proto3" json:"fast_retention,omitempty"`
	FullRetention uint32                 `protobuf:"varint,10,opt,name=full_retention,json=fullRetention,proto3" json:"full_retention,omitempty"`
	MaxBigdataFps uint32                 `protobuf:"varint,11,opt,name=max_bigdata_fps,json=maxBigdataFps,proto3" json:"max_bigdata_fps,omitempty"`
	MaxDevices    uint32                 `protobuf:"varint,12,opt,name=max_devices,json=maxDevices,proto3" json:"max_devices,omitempty"`
	MaxFps        uint32                 `protobuf:"varint,13,opt,name=max_fps,json=maxFps,proto3" json:"max_fps,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=edate,proto3" json:"edate,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{6}
}

func (x *Plan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Plan) GetBgp() bool {
	if x != nil {
		return x.Bgp
	}
	return false
}

func (x *Plan) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetDeviceTypes() []string {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

func (x *Plan) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Plan) GetFastRetention() uint32 {
	if x != nil {
		return x.FastRetention
	}
	return 0
}

func (x *Plan) GetFullRetention() uint32 {
	if x != nil {
		return x.FullRetention
	}
	return 0
}

func (x *Plan) GetMaxBigdataFps() uint32 {
	if x != nil {
		return x.MaxBigdataFps
	}
	return 0
}

func (x *Plan) GetMaxDevices() uint32 {
	if x != nil {
		return x.MaxDevices
	}
	return 0
}

func (x *Plan) GetMaxFps() uint32 {
	if x != nil {
		return x.MaxFps
	}
	return 0
}

func (x *Plan) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Plan) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Plan) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// {{.Name}}
type Label struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=edate,proto3" json:"edate,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=cdate,proto3" json:"cdate,omitempty"`
	UserId        string                 `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CompanyId     string                 `protobuf:"bytes,7,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Color         string                 `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
	Order         string                 `protobuf:"bytes,9,opt,name=order,proto3" json:"order,omitempty"`
	PivotDeviceId string                 `protobuf:"bytes,10,opt,name=pivot_device_id,json=pivotDeviceId,proto3" json:"pivot_device_id,omitempty"`
	PivotLabelId  string                 `protobuf:"bytes,11,opt,name=pivot_label_id,json=pivotLabelId,proto3" json:"pivot_label_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{7}
}

func (x *Label) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Label) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Label) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Label) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Label) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Label) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Label) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Label) GetPivotDeviceId() string {
	if x != nil {
		return x.PivotDeviceId
	}
	return ""
}

func (x *Label) GetPivotLabelId() string {
	if x != nil {
		return x.PivotLabelId
	}
	return ""
}

// {{.Name}}
type Interface struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InterfaceDescription string                 `protobuf:"bytes,1,opt,name=interface_description,json=interfaceDescription,proto3" json:"interface_description,omitempty"`
	InitialSnmpSpeed     string                 `protobuf:"bytes,2,opt,name=initial_snmp_speed,json=initialSnmpSpeed,proto3" json:"initial_snmp_speed,omitempty"`
	DeviceId             string                 `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SnmpSpeed            string                 `protobuf:"bytes,4,opt,name=snmp_speed,json=snmpSpeed,proto3" json:"snmp_speed,omitempty"`
	SnmpAlias            string                 `protobuf:"bytes,5,opt,name=snmp_alias,json=snmpAlias,proto3" json:"snmp_alias,omitempty"`
	SnmpId               string                 `protobuf:"bytes,6,opt,name=snmp_id,json=snmpId,proto3" json:"snmp_id,omitempty"`
	ConnectivityType     string                 `protobuf:"bytes,7,opt,name=connectivity_type,json=connectivityType,proto3" json:"connectivity_type,omitempty"`
	NetworkBoundary      string                 `protobuf:"bytes,8,opt,name=network_boundary,json=networkBoundary,proto3" json:"network_boundary,omitempty"`
	Provider             string                 `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Interface) Reset() {
	*x = Interface{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{8}
}

func (x *Interface) GetInterfaceDescription() string {
	if x != nil {
		return x.InterfaceDescription
	}
	return ""
}

func (x *Interface) GetInitialSnmpSpeed() string {
	if x != nil {
		return x.InitialSnmpSpeed
	}
	return ""
}

func (x *Interface) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Interface) GetSnmpSpeed() string {
	if x != nil {
		return x.SnmpSpeed
	}
	return ""
}

func (x *Interface) GetSnmpAlias() string {
	if x != nil {
		return x.SnmpAlias
	}
	return ""
}

func (x *Interface) GetSnmpId() string {
	if x != nil {
		return x.SnmpId
	}
	return ""
}

func (x *Interface) GetConnectivityType() string {
	if x != nil {
		return x.ConnectivityType
	}
	return ""
}

func (x *Interface) GetNetworkBoundary() string {
	if x != nil {
		return x.NetworkBoundary
	}
	return ""
}

func (x *Interface) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

// {{.Name}}
type CustomColumnData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FieldId       string                 `protobuf:"bytes,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	ColName       string                 `protobuf:"bytes,3,opt,name=col_name,json=colName,proto3" json:"col_name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ColType       string                 `protobuf:"bytes,5,opt,name=col_type,json=colType,proto3" json:"col_type,omitempty"`
	DeviceType    string                 `protobuf:"bytes,6,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomColumnData) Reset() {
	*x = CustomColumnData{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomColumnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomColumnData) ProtoMessage() {}

func (x *CustomColumnData) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomColumnData.ProtoReflect.Descriptor instead.
func (*CustomColumnData) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{9}
}

func (x *CustomColumnData) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CustomColumnData) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *CustomColumnData) GetColName() string {
	if x != nil {
		return x.ColName
	}
	return ""
}

func (x *CustomColumnData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomColumnData) GetColType() string {
	if x != nil {
		return x.ColType
	}
	return ""
}

func (x *CustomColumnData) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

// {{.Name}}
type GnmiV1Conf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DialoutServer string                 `protobuf:"bytes,1,opt,name=dialout_server,json=dialoutServer,proto3" json:"dialout_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GnmiV1Conf) Reset() {
	*x = GnmiV1Conf{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GnmiV1Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnmiV1Conf) ProtoMessage() {}

func (x *GnmiV1Conf) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnmiV1Conf.ProtoReflect.Descriptor instead.
func (*GnmiV1Conf) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{10}
}

func (x *GnmiV1Conf) GetDialoutServer() string {
	if x != nil {
		return x.DialoutServer
	}
	return ""
}

// {{.Name}}
type DeviceDetailed struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyId         string                 `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	DeviceName        string                 `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceAlias       string                 `protobuf:"bytes,4,opt,name=device_alias,json=deviceAlias,proto3" json:"device_alias,omitempty"`
	DeviceType        string                 `protobuf:"bytes,5,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DeviceDescription string                 `protobuf:"bytes,6,opt,name=device_description,json=deviceDescription,proto3" json:"device_description,omitempty"`
	Site              *Site                  `protobuf:"bytes,7,opt,name=site,proto3" json:"site,omitempty"`
	Plan              *Plan                  `protobuf:"bytes,8,opt,name=plan,proto3" json:"plan,omitempty"`
	Labels            []*Label               `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
	AllInterfaces     []*Interface           `protobuf:"bytes,10,rep,name=all_interfaces,json=allInterfaces,proto3" json:"all_interfaces,omitempty"`
	DeviceFlowType    string                 `protobuf:"bytes,11,opt,name=device_flow_type,json=deviceFlowType,proto3" json:"device_flow_type,omitempty"`
	DeviceSampleRate  string                 `protobuf:"bytes,12,opt,name=device_sample_rate,json=deviceSampleRate,proto3" json:"device_sample_rate,omitempty"`
	SendingIps        []string               `protobuf:"bytes,13,rep,name=sending_ips,json=sendingIps,proto3" json:"sending_ips,omitempty"`
	DeviceSnmpIp      string                 `protobuf:"bytes,14,opt,name=device_snmp_ip,json=deviceSnmpIp,proto3" json:"device_snmp_ip,omitempty"`
	// Keeping these tokens so we can give the user a useful error.  They are removed from DeviceRequest
	DeviceSnmpCommunity  string `protobuf:"bytes,15,opt,name=device_snmp_community,json=deviceSnmpCommunity,proto3" json:"device_snmp_community,omitempty"`
	MinimizeSnmp         *bool  `protobuf:"varint,16,opt,name=minimize_snmp,json=minimizeSnmp,proto3,oneof" json:"minimize_snmp,omitempty"`
	DeviceBgpType        string `protobuf:"bytes,17,opt,name=device_bgp_type,json=deviceBgpType,proto3" json:"device_bgp_type,omitempty"`
	DeviceBgpNeighborIp  string `protobuf:"bytes,18,opt,name=device_bgp_neighbor_ip,json=deviceBgpNeighborIp,proto3" json:"device_bgp_neighbor_ip,omitempty"`
	DeviceBgpNeighborIp6 string `protobuf:"bytes,19,opt,name=device_bgp_neighbor_ip6,json=deviceBgpNeighborIp6,proto3" json:"device_bgp_neighbor_ip6,omitempty"`
	DeviceBgpNeighborAsn string `protobuf:"bytes,20,opt,name=device_bgp_neighbor_asn,json=deviceBgpNeighborAsn,proto3" json:"device_bgp_neighbor_asn,omitempty"`
	DeviceBgpFlowspec    bool   `protobuf:"varint,21,opt,name=device_bgp_flowspec,json=deviceBgpFlowspec,proto3" json:"device_bgp_flowspec,omitempty"`
	// Keeping these tokens so we can give the user a useful error.  They are removed from DeviceRequest
	DeviceBgpPassword       string                 `protobuf:"bytes,22,opt,name=device_bgp_password,json=deviceBgpPassword,proto3" json:"device_bgp_password,omitempty"`
	DeviceBgpLabelUnicast   bool                   `protobuf:"varint,23,opt,name=device_bgp_label_unicast,json=deviceBgpLabelUnicast,proto3" json:"device_bgp_label_unicast,omitempty"`
	BgpLookupStrategy       string                 `protobuf:"bytes,24,opt,name=bgp_lookup_strategy,json=bgpLookupStrategy,proto3" json:"bgp_lookup_strategy,omitempty"`
	DeviceStatus            string                 `protobuf:"bytes,25,opt,name=device_status,json=deviceStatus,proto3" json:"device_status,omitempty"`
	UseBgpDeviceId          string                 `protobuf:"bytes,26,opt,name=use_bgp_device_id,json=useBgpDeviceId,proto3" json:"use_bgp_device_id,omitempty"`
	CustomColumns           string                 `protobuf:"bytes,27,opt,name=custom_columns,json=customColumns,proto3" json:"custom_columns,omitempty"`
	CustomColumnData        []*CustomColumnData    `protobuf:"bytes,28,rep,name=custom_column_data,json=customColumnData,proto3" json:"custom_column_data,omitempty"`
	DeviceChfClientPort     string                 `protobuf:"bytes,29,opt,name=device_chf_client_port,json=deviceChfClientPort,proto3" json:"device_chf_client_port,omitempty"`
	DeviceChfClientProtocol string                 `protobuf:"bytes,30,opt,name=device_chf_client_protocol,json=deviceChfClientProtocol,proto3" json:"device_chf_client_protocol,omitempty"`
	DeviceChfInterface      string                 `protobuf:"bytes,31,opt,name=device_chf_interface,json=deviceChfInterface,proto3" json:"device_chf_interface,omitempty"`
	DeviceAgentType         string                 `protobuf:"bytes,32,opt,name=device_agent_type,json=deviceAgentType,proto3" json:"device_agent_type,omitempty"`
	MaxFlowRate             uint32                 `protobuf:"varint,33,opt,name=max_flow_rate,json=maxFlowRate,proto3" json:"max_flow_rate,omitempty"`
	MaxBigFlowRate          uint32                 `protobuf:"varint,34,opt,name=max_big_flow_rate,json=maxBigFlowRate,proto3" json:"max_big_flow_rate,omitempty"`
	DeviceProxyBgp          string                 `protobuf:"bytes,35,opt,name=device_proxy_bgp,json=deviceProxyBgp,proto3" json:"device_proxy_bgp,omitempty"`
	DeviceProxyBgp6         string                 `protobuf:"bytes,36,opt,name=device_proxy_bgp6,json=deviceProxyBgp6,proto3" json:"device_proxy_bgp6,omitempty"`
	CreatedDate             *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	UpdatedDate             *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
	DeviceSnmpV3ConfEnabled bool                   `protobuf:"varint,39,opt,name=device_snmp_v3_conf_enabled,json=deviceSnmpV3ConfEnabled,proto3" json:"device_snmp_v3_conf_enabled,omitempty"`
	// Keeping these tokens so we can give the user a useful error.  They are removed from DeviceRequest
	DeviceSnmpV3Conf        *DeviceSnmpV3Conf `protobuf:"bytes,40,opt,name=device_snmp_v3_conf,json=deviceSnmpV3Conf,proto3" json:"device_snmp_v3_conf,omitempty"`
	CdnAttr                 string            `protobuf:"bytes,41,opt,name=cdn_attr,json=cdnAttr,proto3" json:"cdn_attr,omitempty"`
	BgpPeerIp4              string            `protobuf:"bytes,42,opt,name=bgp_peer_ip4,json=bgpPeerIp4,proto3" json:"bgp_peer_ip4,omitempty"`
	BgpPeerIp6              string            `protobuf:"bytes,43,opt,name=bgp_peer_ip6,json=bgpPeerIp6,proto3" json:"bgp_peer_ip6,omitempty"`
	DeviceSubtype           string            `protobuf:"bytes,44,opt,name=device_subtype,json=deviceSubtype,proto3" json:"device_subtype,omitempty"`
	DeviceVendorType        string            `protobuf:"bytes,45,opt,name=device_vendor_type,json=deviceVendorType,proto3" json:"device_vendor_type,omitempty"`
	DeviceModelType         string            `protobuf:"bytes,46,opt,name=device_model_type,json=deviceModelType,proto3" json:"device_model_type,omitempty"`
	CloudExportId           string            `protobuf:"bytes,47,opt,name=cloud_export_id,json=cloudExportId,proto3" json:"cloud_export_id,omitempty"`
	DeviceKproxy            string            `protobuf:"bytes,48,opt,name=device_kproxy,json=deviceKproxy,proto3" json:"device_kproxy,omitempty"`
	SnmpEnabled             string            `protobuf:"bytes,49,opt,name=snmp_enabled,json=snmpEnabled,proto3" json:"snmp_enabled,omitempty"`
	SnmpDisabledReason      string            `protobuf:"bytes,50,opt,name=snmp_disabled_reason,json=snmpDisabledReason,proto3" json:"snmp_disabled_reason,omitempty"`
	SnmpDisabledReasonOther string            `protobuf:"bytes,51,opt,name=snmp_disabled_reason_other,json=snmpDisabledReasonOther,proto3" json:"snmp_disabled_reason_other,omitempty"`
	BgpDisabledReason       string            `protobuf:"bytes,52,opt,name=bgp_disabled_reason,json=bgpDisabledReason,proto3" json:"bgp_disabled_reason,omitempty"`
	BgpDisabledReasonOther  string            `protobuf:"bytes,53,opt,name=bgp_disabled_reason_other,json=bgpDisabledReasonOther,proto3" json:"bgp_disabled_reason_other,omitempty"`
	DeviceManufacturer      string            `protobuf:"bytes,54,opt,name=device_manufacturer,json=deviceManufacturer,proto3" json:"device_manufacturer,omitempty"`
	DeviceAlert             string            `protobuf:"bytes,55,opt,name=device_alert,json=deviceAlert,proto3" json:"device_alert,omitempty"`
	Role                    string            `protobuf:"bytes,56,opt,name=role,proto3" json:"role,omitempty"`
	DeviceGnmiV1Conf        *GnmiV1Conf       `protobuf:"bytes,57,opt,name=device_gnmi_v1_conf,json=deviceGnmiV1Conf,proto3" json:"device_gnmi_v1_conf,omitempty"`
	UseAsnFromFlow          bool              `protobuf:"varint,58,opt,name=use_asn_from_flow,json=useAsnFromFlow,proto3" json:"use_asn_from_flow,omitempty"`
	MaxInterface            uint32            `protobuf:"varint,59,opt,name=max_interface,json=maxInterface,proto3" json:"max_interface,omitempty"`
	MaxInterfaceCheck       uint32            `protobuf:"varint,60,opt,name=max_interface_check,json=maxInterfaceCheck,proto3" json:"max_interface_check,omitempty"`
	Nms                     *DeviceNmsConfig  `protobuf:"bytes,61,opt,name=nms,proto3" json:"nms,omitempty"`
	DeviceBgpCredentialName string            `protobuf:"bytes,62,opt,name=device_bgp_credential_name,json=deviceBgpCredentialName,proto3" json:"device_bgp_credential_name,omitempty"`
	FlowSnmpCredentialName  string            `protobuf:"bytes,63,opt,name=flow_snmp_credential_name,json=flowSnmpCredentialName,proto3" json:"flow_snmp_credential_name,omitempty"`
	MonitoringTemplateId    uint32            `protobuf:"varint,64,opt,name=monitoring_template_id,json=monitoringTemplateId,proto3" json:"monitoring_template_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DeviceDetailed) Reset() {
	*x = DeviceDetailed{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDetailed) ProtoMessage() {}

func (x *DeviceDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDetailed.ProtoReflect.Descriptor instead.
func (*DeviceDetailed) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceDetailed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceDetailed) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceAlias() string {
	if x != nil {
		return x.DeviceAlias
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceDescription() string {
	if x != nil {
		return x.DeviceDescription
	}
	return ""
}

func (x *DeviceDetailed) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *DeviceDetailed) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *DeviceDetailed) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DeviceDetailed) GetAllInterfaces() []*Interface {
	if x != nil {
		return x.AllInterfaces
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceFlowType() string {
	if x != nil {
		return x.DeviceFlowType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceSampleRate() string {
	if x != nil {
		return x.DeviceSampleRate
	}
	return ""
}

func (x *DeviceDetailed) GetSendingIps() []string {
	if x != nil {
		return x.SendingIps
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceSnmpIp() string {
	if x != nil {
		return x.DeviceSnmpIp
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceSnmpCommunity() string {
	if x != nil {
		return x.DeviceSnmpCommunity
	}
	return ""
}

func (x *DeviceDetailed) GetMinimizeSnmp() bool {
	if x != nil && x.MinimizeSnmp != nil {
		return *x.MinimizeSnmp
	}
	return false
}

func (x *DeviceDetailed) GetDeviceBgpType() string {
	if x != nil {
		return x.DeviceBgpType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpNeighborIp() string {
	if x != nil {
		return x.DeviceBgpNeighborIp
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpNeighborIp6() string {
	if x != nil {
		return x.DeviceBgpNeighborIp6
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpNeighborAsn() string {
	if x != nil {
		return x.DeviceBgpNeighborAsn
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpFlowspec() bool {
	if x != nil {
		return x.DeviceBgpFlowspec
	}
	return false
}

func (x *DeviceDetailed) GetDeviceBgpPassword() string {
	if x != nil {
		return x.DeviceBgpPassword
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceBgpLabelUnicast() bool {
	if x != nil {
		return x.DeviceBgpLabelUnicast
	}
	return false
}

func (x *DeviceDetailed) GetBgpLookupStrategy() string {
	if x != nil {
		return x.BgpLookupStrategy
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceStatus() string {
	if x != nil {
		return x.DeviceStatus
	}
	return ""
}

func (x *DeviceDetailed) GetUseBgpDeviceId() string {
	if x != nil {
		return x.UseBgpDeviceId
	}
	return ""
}

func (x *DeviceDetailed) GetCustomColumns() string {
	if x != nil {
		return x.CustomColumns
	}
	return ""
}

func (x *DeviceDetailed) GetCustomColumnData() []*CustomColumnData {
	if x != nil {
		return x.CustomColumnData
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceChfClientPort() string {
	if x != nil {
		return x.DeviceChfClientPort
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceChfClientProtocol() string {
	if x != nil {
		return x.DeviceChfClientProtocol
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceChfInterface() string {
	if x != nil {
		return x.DeviceChfInterface
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceAgentType() string {
	if x != nil {
		return x.DeviceAgentType
	}
	return ""
}

func (x *DeviceDetailed) GetMaxFlowRate() uint32 {
	if x != nil {
		return x.MaxFlowRate
	}
	return 0
}

func (x *DeviceDetailed) GetMaxBigFlowRate() uint32 {
	if x != nil {
		return x.MaxBigFlowRate
	}
	return 0
}

func (x *DeviceDetailed) GetDeviceProxyBgp() string {
	if x != nil {
		return x.DeviceProxyBgp
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceProxyBgp6() string {
	if x != nil {
		return x.DeviceProxyBgp6
	}
	return ""
}

func (x *DeviceDetailed) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *DeviceDetailed) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceSnmpV3ConfEnabled() bool {
	if x != nil {
		return x.DeviceSnmpV3ConfEnabled
	}
	return false
}

func (x *DeviceDetailed) GetDeviceSnmpV3Conf() *DeviceSnmpV3Conf {
	if x != nil {
		return x.DeviceSnmpV3Conf
	}
	return nil
}

func (x *DeviceDetailed) GetCdnAttr() string {
	if x != nil {
		return x.CdnAttr
	}
	return ""
}

func (x *DeviceDetailed) GetBgpPeerIp4() string {
	if x != nil {
		return x.BgpPeerIp4
	}
	return ""
}

func (x *DeviceDetailed) GetBgpPeerIp6() string {
	if x != nil {
		return x.BgpPeerIp6
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceSubtype() string {
	if x != nil {
		return x.DeviceSubtype
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceVendorType() string {
	if x != nil {
		return x.DeviceVendorType
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceModelType() string {
	if x != nil {
		return x.DeviceModelType
	}
	return ""
}

func (x *DeviceDetailed) GetCloudExportId() string {
	if x != nil {
		return x.CloudExportId
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceKproxy() string {
	if x != nil {
		return x.DeviceKproxy
	}
	return ""
}

func (x *DeviceDetailed) GetSnmpEnabled() string {
	if x != nil {
		return x.SnmpEnabled
	}
	return ""
}

func (x *DeviceDetailed) GetSnmpDisabledReason() string {
	if x != nil {
		return x.SnmpDisabledReason
	}
	return ""
}

func (x *DeviceDetailed) GetSnmpDisabledReasonOther() string {
	if x != nil {
		return x.SnmpDisabledReasonOther
	}
	return ""
}

func (x *DeviceDetailed) GetBgpDisabledReason() string {
	if x != nil {
		return x.BgpDisabledReason
	}
	return ""
}

func (x *DeviceDetailed) GetBgpDisabledReasonOther() string {
	if x != nil {
		return x.BgpDisabledReasonOther
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceAlert() string {
	if x != nil {
		return x.DeviceAlert
	}
	return ""
}

func (x *DeviceDetailed) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *DeviceDetailed) GetDeviceGnmiV1Conf() *GnmiV1Conf {
	if x != nil {
		return x.DeviceGnmiV1Conf
	}
	return nil
}

func (x *DeviceDetailed) GetUseAsnFromFlow() bool {
	if x != nil {
		return x.UseAsnFromFlow
	}
	return false
}

func (x *DeviceDetailed) GetMaxInterface() uint32 {
	if x != nil {
		return x.MaxInterface
	}
	return 0
}

func (x *DeviceDetailed) GetMaxInterfaceCheck() uint32 {
	if x != nil {
		return x.MaxInterfaceCheck
	}
	return 0
}

func (x *DeviceDetailed) GetNms() *DeviceNmsConfig {
	if x != nil {
		return x.Nms
	}
	return nil
}

func (x *DeviceDetailed) GetDeviceBgpCredentialName() string {
	if x != nil {
		return x.DeviceBgpCredentialName
	}
	return ""
}

func (x *DeviceDetailed) GetFlowSnmpCredentialName() string {
	if x != nil {
		return x.FlowSnmpCredentialName
	}
	return ""
}

func (x *DeviceDetailed) GetMonitoringTemplateId() uint32 {
	if x != nil {
		return x.MonitoringTemplateId
	}
	return 0
}

type DeviceQuery struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NoCustomColumns bool                   `protobuf:"varint,1,opt,name=no_custom_columns,json=noCustomColumns,proto3" json:"no_custom_columns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeviceQuery) Reset() {
	*x = DeviceQuery{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceQuery) ProtoMessage() {}

func (x *DeviceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceQuery.ProtoReflect.Descriptor instead.
func (*DeviceQuery) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceQuery) GetNoCustomColumns() bool {
	if x != nil {
		return x.NoCustomColumns
	}
	return false
}

// {{.Name}}
type LabelConcise struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelConcise) Reset() {
	*x = LabelConcise{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelConcise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelConcise) ProtoMessage() {}

func (x *LabelConcise) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelConcise.ProtoReflect.Descriptor instead.
func (*LabelConcise) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{13}
}

func (x *LabelConcise) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// {{.Name}}
type ListDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *DeviceQuery           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDevicesRequest) Reset() {
	*x = ListDevicesRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesRequest) ProtoMessage() {}

func (x *ListDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{14}
}

func (x *ListDevicesRequest) GetQuery() *DeviceQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// {{.Name}}
type ListDevicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*DeviceDetailed      `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	InvalidCount  uint32                 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDevicesResponse) Reset() {
	*x = ListDevicesResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResponse) ProtoMessage() {}

func (x *ListDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{15}
}

func (x *ListDevicesResponse) GetDevices() []*DeviceDetailed {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ListDevicesResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Query         *DeviceQuery           `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{16}
}

func (x *GetDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDeviceRequest) GetQuery() *DeviceQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// {{.Name}}
type GetDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceDetailed        `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceResponse) Reset() {
	*x = GetDeviceResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResponse) ProtoMessage() {}

func (x *GetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{17}
}

func (x *GetDeviceResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type CreateDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceConcise         `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{18}
}

func (x *CreateDeviceRequest) GetDevice() *DeviceConcise {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type CreateDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceDetailed        `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{19}
}

func (x *CreateDeviceResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type CreateDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*DeviceConcise       `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDevicesRequest) Reset() {
	*x = CreateDevicesRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevicesRequest) ProtoMessage() {}

func (x *CreateDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevicesRequest.ProtoReflect.Descriptor instead.
func (*CreateDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{20}
}

func (x *CreateDevicesRequest) GetDevices() []*DeviceConcise {
	if x != nil {
		return x.Devices
	}
	return nil
}

// {{.Name}}
type CreateDevicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*DeviceDetailed      `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	FailedDevices []string               `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDevicesResponse) Reset() {
	*x = CreateDevicesResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDevicesResponse) ProtoMessage() {}

func (x *CreateDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDevicesResponse.ProtoReflect.Descriptor instead.
func (*CreateDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{21}
}

func (x *CreateDevicesResponse) GetDevices() []*DeviceDetailed {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CreateDevicesResponse) GetFailedDevices() []string {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

// {{.Name}}
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceConcise         `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateDeviceRequest) GetDevice() *DeviceConcise {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type UpdateDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceDetailed        `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeviceResponse) Reset() {
	*x = UpdateDeviceResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResponse) ProtoMessage() {}

func (x *UpdateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateDeviceResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type UpdateDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*DeviceConcise       `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDevicesRequest) Reset() {
	*x = UpdateDevicesRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevicesRequest) ProtoMessage() {}

func (x *UpdateDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevicesRequest.ProtoReflect.Descriptor instead.
func (*UpdateDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateDevicesRequest) GetDevices() []*DeviceConcise {
	if x != nil {
		return x.Devices
	}
	return nil
}

// {{.Name}}
type UpdateDevicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*DeviceDetailed      `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	FailedDevices []string               `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDevicesResponse) Reset() {
	*x = UpdateDevicesResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevicesResponse) ProtoMessage() {}

func (x *UpdateDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevicesResponse.ProtoReflect.Descriptor instead.
func (*UpdateDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateDevicesResponse) GetDevices() []*DeviceDetailed {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *UpdateDevicesResponse) GetFailedDevices() []string {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

// {{.Name}}
type UpdateDeviceLabelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels        []*LabelConcise        `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeviceLabelsRequest) Reset() {
	*x = UpdateDeviceLabelsRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceLabelsRequest) ProtoMessage() {}

func (x *UpdateDeviceLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceLabelsRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceLabelsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateDeviceLabelsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeviceLabelsRequest) GetLabels() []*LabelConcise {
	if x != nil {
		return x.Labels
	}
	return nil
}

// {{.Name}}
type UpdateDeviceLabelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *DeviceDetailed        `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeviceLabelsResponse) Reset() {
	*x = UpdateDeviceLabelsResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceLabelsResponse) ProtoMessage() {}

func (x *UpdateDeviceLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceLabelsResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceLabelsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateDeviceLabelsResponse) GetDevice() *DeviceDetailed {
	if x != nil {
		return x.Device
	}
	return nil
}

// {{.Name}}
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteDeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{29}
}

// {{.Name}}
type DeleteDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDevicesRequest) Reset() {
	*x = DeleteDevicesRequest{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicesRequest) ProtoMessage() {}

func (x *DeleteDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicesRequest.ProtoReflect.Descriptor instead.
func (*DeleteDevicesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteDevicesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// {{.Name}}
type DeleteDevicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FailedDevices []string               `protobuf:"bytes,1,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDevicesResponse) Reset() {
	*x = DeleteDevicesResponse{}
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevicesResponse) ProtoMessage() {}

func (x *DeleteDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_device_v202308beta1_device_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevicesResponse.ProtoReflect.Descriptor instead.
func (*DeleteDevicesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_device_v202308beta1_device_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteDevicesResponse) GetFailedDevices() []string {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

var File_kentik_device_v202308beta1_device_proto protoreflect.FileDescriptor

const file_kentik_device_v202308beta1_device_proto_rawDesc = "" +
	"\n" +
	"'kentik/device/v202308beta1/device.proto\x12\x1akentik.device.v202308beta1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a%kentik/core/v202303/annotations.proto\"\x92\a\n" +
	"\x10DeviceSnmpV3Conf\x12\xa8\x01\n" +
	"\busername\x18\x01 \x01(\tB\x8b\x01\x92A\x87\x012\x84\x01UserName (username) - the user name to use to authenticate via SNMP v3. ** UserName is required when device_snmp_v3_conf is not nullR\busername\x12\x96\x01\n" +
	"\x17authentication_protocol\x18\x02 \x01(\tB]\x92AZ2XAuthentication Protocol (authentication_protocol) - the auth protocol to use via SNMP v3R\x16authenticationProtocol\x12\xe8\x01\n" +
	"\x19authentication_passphrase\x18\x03 \x01(\tB\xaa\x01\x92A\xa6\x012\xa3\x01Authentication Passphrase (authentication_passphrase) - the passphrase to use for SNMP v3 authentication protocol (required when AuthenticationProtocol not NoAuth)R\x18authenticationPassphrase\x12\x8d\x01\n" +
	"\x10privacy_protocol\x18\x04 \x01(\tBb\x92A_2]Privacy Protocol (privacy_protocol) - the privacy protocol to use to authenticate via SNMP v3R\x0fprivacyProtocol\x12\xbe\x01\n" +
	"\x12privacy_passphrase\x18\x05 \x01(\tB\x8e\x01\x92A\x8a\x012\x87\x01Privacy Passphrase (privacy_passphrase) - the passphrase to use for SNMP v3 privacy protocol (required when PrivacyProtocol not NoPriv)R\x11privacyPassphrase\"\xf9\x03\n" +
	"\x0fDeviceNmsConfig\x12O\n" +
	"\bagent_id\x18\x02 \x01(\tB4\x92A12/ID of the agent that is monitoring this device.R\aagentId\x12D\n" +
	"\n" +
	"ip_address\x18\x03 \x01(\tB%\x92A\"2 Local IP address of this device.R\tipAddress\x12\xc3\x01\n" +
	"\x04snmp\x18\x04 \x01(\v2/.kentik.device.v202308beta1.DeviceNmsSnmpConfigB~\x92A{2yConfiguration if metrics will be collected over SNMP. Not including this configuration will make this a ping-only device.R\x04snmp\x12\x88\x01\n" +
	"\x02st\x18\x05 \x01(\v2-.kentik.device.v202308beta1.DeviceNmsStConfigBI\x92AF2DConfiguration if metrics will be collected over Streaming Telemetry.R\x02st\"\x9c\x02\n" +
	"\x13DeviceNmsSnmpConfig\x12e\n" +
	"\x0fcredential_name\x18\x01 \x01(\tB<\x92A927Name of the SNMP credentials from the credential vault.R\x0ecredentialName\x12?\n" +
	"\x04port\x18\x02 \x01(\rB+\x92A(2&SNMP port, to override default of 161.R\x04port\x12]\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationB(\x92A%2#Timeout, to override default of 2s.R\atimeout\"\xd8\x02\n" +
	"\x11DeviceNmsStConfig\x12c\n" +
	"\x0fcredential_name\x18\x01 \x01(\tB:\x92A725Name of the ST credentials from the credential vault.R\x0ecredentialName\x12>\n" +
	"\x04port\x18\x02 \x01(\rB*\x92A'2%ST port, to override default of 6030.R\x04port\x12]\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationB(\x92A%2#Timeout, to override default of 2s.R\atimeout\x12?\n" +
	"\x06secure\x18\x04 \x01(\bB'\x92A$2\"Use SSL to connect to this device.R\x06secure\"\xf7)\n" +
	"\rDeviceConcise\x127\n" +
	"\x02id\x18\x01 \x01(\tB'\x92A$2\"System generated unique identifierR\x02id\x12\xa0\x01\n" +
	"\vdevice_name\x18\x02 \x01(\tB\x7f\x92A|2zDevice name (device_name) - The name of the device. Valid characters: alphanumeric and underscores. Length: min=4, max=60.R\n" +
	"deviceName\x12a\n" +
	"\x0edevice_subtype\x18\x03 \x01(\tB:\x92A725Device subtype (device_subtype) - The device subtype.R\rdeviceSubtype\x12\x8d\x02\n" +
	"\bcdn_attr\x18\x04 \x01(\tB\xf1\x01\x92A\xed\x012\xea\x01CDN attributes (cdn_attr) - If this is a DNS server, you can contribute its queries to Kentik's CDN attribution database. Valid values: \"Y\" or \"N\". ** cdn_attr is required when the device subtype's parent type is \"host-nprobe-dns-www\"R\acdnAttr\x12\x96\x01\n" +
	"\x12device_description\x18\x05 \x01(\tBg\x92Ad2bDescription (device_description) - The device description. Valid characters: any. Length: max=128.R\x11deviceDescription\x12\xe3\x01\n" +
	"\vsending_ips\x18\x06 \x03(\tB\xc1\x01\x92A\xbd\x012\xba\x01Device ip (sending_ips) - Array containing one or more IP address(es), from which the device is sending flow. ** sending_ips is required when the device subtype's parent type is \"router\"R\n" +
	"sendingIps\x12\xea\x02\n" +
	"\x12device_sample_rate\x18\a \x01(\x01B\xbb\x02\x92A\xb7\x022\xb4\x02Sample rate (device_sample_rate) - The rate at which the device is sampling flows. Valid values: integer bigger than 1. Recommended rate varies depending on flow volume; see https://kb.kentik.com/Ab02.htm#Ab02-Flow_Sampling. ** device_sample_rate is required when the device subtype's parent type is \"router\"R\x10deviceSampleRate\x12\xae\x01\n" +
	"\aplan_id\x18\b \x01(\rB\x94\x01\x92A\x90\x012\x8d\x01Plan (plan_id) - The ID of the plan to which this device is assigned. Available plan(s) can be found via the Plans API. Valid value: integer.R\x06planId\x12\xbb\x01\n" +
	"\asite_id\x18\t \x01(\rB\xa1\x01\x92A\x9d\x012\x9a\x01Site (site_id) - The ID of the site (if any) to which this device is assigned. Site IDs are system generated when a site is created. Valid value: integer.R\x06siteId\x12\xb8\x03\n" +
	"\rminimize_snmp\x18\n" +
	" \x01(\bB\x8d\x03\x92A\x89\x032\x86\x03SNMP polling (minimize_snmp) - The interval at which SNMP will be polled. If \"false\" (Standard), interface counter will be polled every 10 minutes and interface description every 30 minutes. If \"true\" (Minimum) (Minimum), interface counter won't be polled and interface description will be polled every 6 hours. ** minimize_snmp is required when the device subtype's parent type is \"router\"H\x00R\fminimizeSnmp\x88\x01\x01\x12\xc9\x01\n" +
	"\x0edevice_snmp_ip\x18\v \x01(\tB\xa2\x01\x92A\x9e\x012\x9b\x01Device SNMP IP (device_snmp_ip) - The SNMP IP to use when polling the device. device_snmp_ip is ignored unless the device subtype's parent type is \"router\"R\fdeviceSnmpIp\x12\xec\x01\n" +
	"\x15device_snmp_community\x18\f \x01(\tB\xb7\x01\x92A\xb3\x012\xb0\x01SNMP community (device_snmp_community) - The SNMP community to use when polling the device. device_snmp_community is ignored unless the device subtype's parent type is \"router\"R\x13deviceSnmpCommunity\x12\xfc\x01\n" +
	"\x13device_snmp_v3_conf\x18\r \x01(\v2,.kentik.device.v202308beta1.DeviceSnmpV3ConfB\x9e\x01\x92A\x9a\x012\x97\x01SNMP v3 configuration (device_snmp_v3_conf) - SNMP v3 configuration. device_snmp_v3_conf is ignored unless the device subtype's parent type is \"router\"R\x10deviceSnmpV3Conf\x12\xf2\x01\n" +
	"\x0fdevice_bgp_type\x18\x0e \x01(\tB\xc9\x01\x92A\xc5\x012\xc2\x01BGP (device_bgp_type) - Device bgp type. Valid values: \"none\" (use generic IP/ASN mapping), \"device\" (peer with the device itself), \"other_device\" (share routing table of existing peered device)R\rdeviceBgpType\x12\x85\x02\n" +
	"\x16device_bgp_neighbor_ip\x18\x0f \x01(\tB\xcf\x01\x92A\xcb\x012\xc8\x01Your IPv4 peering address (device_bgp_neighbor_ip) - A valid IPv4 address to use for peering with the device. ** An IPv4 and/or IPv6 peering address is required when device_bgp_type is set to \"device\"R\x13deviceBgpNeighborIp\x12\x88\x02\n" +
	"\x17device_bgp_neighbor_ip6\x18\x10 \x01(\tB\xd0\x01\x92A\xcc\x012\xc9\x01Your IPv6 peering address (device_bgp_neighbor_ip6) - A valid IPv6 address to use for peering with the device. ** An IPv4 and/or IPv6 peering address is required when device_bgp_type is set to \"device\"R\x14deviceBgpNeighborIp6\x12\x82\x02\n" +
	"\x17device_bgp_neighbor_asn\x18\x11 \x01(\tB\xca\x01\x92A\xc6\x012\xc3\x01Your ASN (device_bgp_neighbor_asn) - The valid AS number (ASN) of the autonomous system that this device belongs to. ** device_bgp_neighbor_asn is required when device_bgp_type is set to \"device\"R\x14deviceBgpNeighborAsn\x12\xa0\x02\n" +
	"\x13device_bgp_password\x18\x12 \x01(\tB\xef\x01\x92A\xeb\x012\xe8\x01BGP md5 password (device_bgp_password) - Optional BGP MD5 password (shared authentication password for BGP peering). Valid characters: alphanumeric. Length: 32. device_bgp_password is optional when device_bgp_type is set to \"device\"R\x11deviceBgpPassword\x12\xa4\x02\n" +
	"\x11use_bgp_device_id\x18\x13 \x01(\rB\xf8\x01\x92A\xf4\x012\xf1\x01Select master BGP device (use_bgp_device_id) - The ID of the device whose BGP table should be shared with this device. ** use_bgp_device_id is required when device_bgp_type is set to \"other_device\"). Valid value: a system-generated device_idR\x0euseBgpDeviceId\x12\x95\x01\n" +
	"\x13device_bgp_flowspec\x18\x14 \x01(\bBe\x92Ab2`BGP Flowspec Compatibility (device_bgp_flowspec) - Toggle BGP Flowspec Compatibility for device.R\x11deviceBgpFlowspec\x12z\n" +
	"\x03nms\x18\x15 \x01(\v2+.kentik.device.v202308beta1.DeviceNmsConfigB;\x92A826Configuration if this device will be monitored by NMS.R\x03nms\x12\xda\x01\n" +
	"\x1adevice_bgp_credential_name\x18\x16 \x01(\tB\x9c\x01\x92A\x98\x012\x95\x01BGP Credential Name (device_bgp_credential_name) - Optional Credential Name (Credential for BGP peering). Valid characters: alphanumeric. Length: 32.R\x17deviceBgpCredentialName\x12\xde\x01\n" +
	"\x19flow_snmp_credential_name\x18\x17 \x01(\tB\xa2\x01\x92A\x9e\x012\x9b\x01Snmp Credential Name (flow_snmp_credential_name) - Optional Credential Name (Credential for Flow Snmp peering). Valid characters: alphanumeric. Length: 32.R\x16flowSnmpCredentialName\x12\x8b\x01\n" +
	"\x16monitoring_template_id\x18\x18 \x01(\rBU\x92AR2PMonitoring template - The ID of the monitoring template assigned to this device.R\x14monitoringTemplateIdB\x10\n" +
	"\x0e_minimize_snmp\"\xce\x01\n" +
	"\x04Site\x12\x1c\n" +
	"\x02id\x18\x01 \x01(\tB\f\x92A\t2\aSite IDR\x02id\x12+\n" +
	"\tsite_name\x18\x02 \x01(\tB\x0e\x92A\v2\tSite nameR\bsiteName\x12$\n" +
	"\x03lat\x18\x03 \x01(\x01B\x12\x92A\x0f2\rSite latitudeR\x03lat\x12%\n" +
	"\x03lon\x18\x04 \x01(\x01B\x13\x92A\x102\x0eSite longitudeR\x03lon\x12.\n" +
	"\n" +
	"company_id\x18\x05 \x01(\tB\x0f\x92A\f2\n" +
	"Company IDR\tcompanyId\"\x9e\a\n" +
	"\x04Plan\x12\x1c\n" +
	"\x02id\x18\x01 \x01(\tB\f\x92A\t2\aPlan IDR\x02id\x12\"\n" +
	"\x04name\x18\x02 \x01(\tB\x0e\x92A\v2\tPlan nameR\x04name\x12(\n" +
	"\x06active\x18\x03 \x01(\bB\x10\x92A\r2\vPlan StatusR\x06active\x12\"\n" +
	"\x03bgp\x18\x04 \x01(\bB\x10\x92A\r2\vBGP enabledR\x03bgp\x12.\n" +
	"\n" +
	"company_id\x18\x05 \x01(\tB\x0f\x92A\f2\n" +
	"Company IDR\tcompanyId\x127\n" +
	"\vdescription\x18\x06 \x01(\tB\x15\x92A\x122\x10Plan DescriptionR\vdescription\x124\n" +
	"\fdevice_types\x18\a \x03(\tB\x11\x92A\x0e2\fDevice TypesR\vdeviceTypes\x12&\n" +
	"\adevices\x18\b \x03(\tB\f\x92A\t2\aDevicesR\adevices\x12@\n" +
	"\x0efast_retention\x18\t \x01(\rB\x19\x92A\x162\x14Fast Rention in daysR\rfastRetention\x12B\n" +
	"\x0efull_retention\x18\n" +
	" \x01(\rB\x1b\x92A\x182\x16Full Retention in daysR\rfullRetention\x129\n" +
	"\x0fmax_bigdata_fps\x18\v \x01(\rB\x11\x92A\x0e2\fMax data FPSR\rmaxBigdataFps\x120\n" +
	"\vmax_devices\x18\f \x01(\rB\x0f\x92A\f2\n" +
	"Max DeviceR\n" +
	"maxDevices\x12%\n" +
	"\amax_fps\x18\r \x01(\rB\f\x92A\t2\aMax FPSR\x06maxFps\x12C\n" +
	"\x05cdate\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampB\x11\x92A\x0e2\fCreated DateR\x05cdate\x12C\n" +
	"\x05edate\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampB\x11\x92A\x0e2\fUpdated DataR\x05edate\x12^\n" +
	"\bmetadata\x18\x10 \x03(\v2..kentik.device.v202308beta1.Plan.MetadataEntryB\x12\x92A\x0f2\rPlan MetadataR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc4\x04\n" +
	"\x05Label\x12\x1d\n" +
	"\x02id\x18\x01 \x01(\tB\r\x92A\n" +
	"2\bLabel IDR\x02id\x12#\n" +
	"\x04name\x18\x02 \x01(\tB\x0f\x92A\f2\n" +
	"Label nameR\x04name\x128\n" +
	"\vdescription\x18\x03 \x01(\tB\x16\x92A\x132\x11Label descriptionR\vdescription\x12K\n" +
	"\x05edate\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x19\x92A\x162\x14Label end date (UTC)R\x05edate\x12P\n" +
	"\x05cdate\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x1e\x92A\x1b2\x19Label creation date (UTC)R\x05cdate\x12%\n" +
	"\auser_id\x18\x06 \x01(\tB\f\x92A\t2\aUser IDR\x06userId\x12.\n" +
	"\n" +
	"company_id\x18\a \x01(\tB\x0f\x92A\f2\n" +
	"Company IDR\tcompanyId\x12&\n" +
	"\x05color\x18\b \x01(\tB\x10\x92A\r2\vLabel colorR\x05color\x12&\n" +
	"\x05order\x18\t \x01(\tB\x10\x92A\r2\vLabel orderR\x05order\x12<\n" +
	"\x0fpivot_device_id\x18\n" +
	" \x01(\tB\x14\x92A\x112\x0fPivot device IDR\rpivotDeviceId\x129\n" +
	"\x0epivot_label_id\x18\v \x01(\tB\x13\x92A\x102\x0ePivot label IDR\fpivotLabelId\"\x89\x04\n" +
	"\tInterface\x12O\n" +
	"\x15interface_description\x18\x01 \x01(\tB\x1a\x92A\x172\x15Interface descriptionR\x14interfaceDescription\x12E\n" +
	"\x12initial_snmp_speed\x18\x02 \x01(\tB\x17\x92A\x142\x12Initial SNMP speedR\x10initialSnmpSpeed\x12+\n" +
	"\tdevice_id\x18\x03 \x01(\tB\x0e\x92A\v2\tDevice IDR\bdeviceId\x12.\n" +
	"\n" +
	"snmp_speed\x18\x04 \x01(\tB\x0f\x92A\f2\n" +
	"SNMP speedR\tsnmpSpeed\x12.\n" +
	"\n" +
	"snmp_alias\x18\x05 \x01(\tB\x0f\x92A\f2\n" +
	"SNMP aliasR\tsnmpAlias\x12%\n" +
	"\asnmp_id\x18\x06 \x01(\tB\f\x92A\t2\aSNMP IDR\x06snmpId\x12C\n" +
	"\x11connectivity_type\x18\a \x01(\tB\x16\x92A\x132\x11Connectivity typeR\x10connectivityType\x12@\n" +
	"\x10network_boundary\x18\b \x01(\tB\x15\x92A\x122\x10Network boundaryR\x0fnetworkBoundary\x12)\n" +
	"\bprovider\x18\t \x01(\tB\r\x92A\n" +
	"2\bProviderR\bprovider\"\xaa\x02\n" +
	"\x10CustomColumnData\x12+\n" +
	"\tdevice_id\x18\x01 \x01(\tB\x0e\x92A\v2\tDevice IDR\bdeviceId\x12(\n" +
	"\bfield_id\x18\x02 \x01(\tB\r\x92A\n" +
	"2\bField IDR\afieldId\x12+\n" +
	"\bcol_name\x18\x03 \x01(\tB\x10\x92A\r2\vColumn nameR\acolName\x122\n" +
	"\vdescription\x18\x04 \x01(\tB\x10\x92A\r2\vDescriptionR\vdescription\x12+\n" +
	"\bcol_type\x18\x05 \x01(\tB\x10\x92A\r2\vColumn typeR\acolType\x121\n" +
	"\vdevice_type\x18\x06 \x01(\tB\x10\x92A\r2\vDevice typeR\n" +
	"deviceType\"H\n" +
	"\n" +
	"GnmiV1Conf\x12:\n" +
	"\x0edialout_server\x18\x01 \x01(\tB\x13\x92A\x102\x0eDialout serverR\rdialoutServer\"\xc4'\n" +
	"\x0eDeviceDetailed\x12:\n" +
	"\x02id\x18\x01 \x01(\tB*\x92A$2\"System generated unique identifier\xe0A\x03R\x02id\x12.\n" +
	"\n" +
	"company_id\x18\x02 \x01(\tB\x0f\x92A\f2\n" +
	"Company IDR\tcompanyId\x121\n" +
	"\vdevice_name\x18\x03 \x01(\tB\x10\x92A\r2\vDevice nameR\n" +
	"deviceName\x124\n" +
	"\fdevice_alias\x18\x04 \x01(\tB\x11\x92A\x0e2\fDevice aliasR\vdeviceAlias\x121\n" +
	"\vdevice_type\x18\x05 \x01(\tB\x10\x92A\r2\vDevice typeR\n" +
	"deviceType\x12F\n" +
	"\x12device_description\x18\x06 \x01(\tB\x17\x92A\x142\x12Device descriptionR\x11deviceDescription\x12?\n" +
	"\x04site\x18\a \x01(\v2 .kentik.device.v202308beta1.SiteB\t\x92A\x062\x04SiteR\x04site\x12?\n" +
	"\x04plan\x18\b \x01(\v2 .kentik.device.v202308beta1.PlanB\t\x92A\x062\x04PlanR\x04plan\x12N\n" +
	"\x06labels\x18\t \x03(\v2!.kentik.device.v202308beta1.LabelB\x13\x92A\x102\x0eList of labelsR\x06labels\x12e\n" +
	"\x0eall_interfaces\x18\n" +
	" \x03(\v2%.kentik.device.v202308beta1.InterfaceB\x17\x92A\x142\x12List of interfacesR\rallInterfaces\x12?\n" +
	"\x10device_flow_type\x18\v \x01(\tB\x15\x92A\x122\x10Device flow typeR\x0edeviceFlowType\x12E\n" +
	"\x12device_sample_rate\x18\f \x01(\tB\x17\x92A\x142\x12Device sample rateR\x10deviceSampleRate\x129\n" +
	"\vsending_ips\x18\r \x03(\tB\x18\x92A\x152\x13List of sending IPsR\n" +
	"sendingIps\x129\n" +
	"\x0edevice_snmp_ip\x18\x0e \x01(\tB\x13\x92A\x102\x0eDevice SNMP IPR\fdeviceSnmpIp\x12N\n" +
	"\x15device_snmp_community\x18\x0f \x01(\tB\x1a\x92A\x172\x15Device SNMP communityR\x13deviceSnmpCommunity\x12<\n" +
	"\rminimize_snmp\x18\x10 \x01(\bB\x12\x92A\x0f2\rMinimize SNMPH\x00R\fminimizeSnmp\x88\x01\x01\x12<\n" +
	"\x0fdevice_bgp_type\x18\x11 \x01(\tB\x14\x92A\x112\x0fDevice BGP typeR\rdeviceBgpType\x12P\n" +
	"\x16device_bgp_neighbor_ip\x18\x12 \x01(\tB\x1b\x92A\x182\x16Device BGP neighbor IPR\x13deviceBgpNeighborIp\x12S\n" +
	"\x17device_bgp_neighbor_ip6\x18\x13 \x01(\tB\x1c\x92A\x192\x17Device BGP neighbor IP6R\x14deviceBgpNeighborIp6\x12S\n" +
	"\x17device_bgp_neighbor_asn\x18\x14 \x01(\tB\x1c\x92A\x192\x17Device BGP neighbor ASNR\x14deviceBgpNeighborAsn\x12H\n" +
	"\x13device_bgp_flowspec\x18\x15 \x01(\bB\x18\x92A\x152\x13Device BGP flowspecR\x11deviceBgpFlowspec\x12H\n" +
	"\x13device_bgp_password\x18\x16 \x01(\tB\x18\x92A\x152\x13Device BGP passwordR\x11deviceBgpPassword\x12V\n" +
	"\x18device_bgp_label_unicast\x18\x17 \x01(\bB\x1d\x92A\x1a2\x18Device BGP label unicastR\x15deviceBgpLabelUnicast\x12H\n" +
	"\x13bgp_lookup_strategy\x18\x18 \x01(\tB\x18\x92A\x152\x13BGP lookup strategyR\x11bgpLookupStrategy\x127\n" +
	"\rdevice_status\x18\x19 \x01(\tB\x12\x92A\x0f2\rDevice statusR\fdeviceStatus\x12A\n" +
	"\x11use_bgp_device_id\x18\x1a \x01(\tB\x16\x92A\x132\x11Use BGP device IDR\x0euseBgpDeviceId\x12:\n" +
	"\x0ecustom_columns\x18\x1b \x01(\tB\x13\x92A\x102\x0eCustom columnsR\rcustomColumns\x12s\n" +
	"\x12custom_column_data\x18\x1c \x03(\v2,.kentik.device.v202308beta1.CustomColumnDataB\x17\x92A\x142\x12Custom column dataR\x10customColumnData\x12P\n" +
	"\x16device_chf_client_port\x18\x1d \x01(\tB\x1b\x92A\x182\x16Device CHF client portR\x13deviceChfClientPort\x12\\\n" +
	"\x1adevice_chf_client_protocol\x18\x1e \x01(\tB\x1f\x92A\x1c2\x1aDevice CHF client protocolR\x17deviceChfClientProtocol\x12K\n" +
	"\x14device_chf_interface\x18\x1f \x01(\tB\x19\x92A\x162\x14Device CHF interfaceR\x12deviceChfInterface\x12B\n" +
	"\x11device_agent_type\x18  \x01(\tB\x16\x92A\x132\x11Device agent typeR\x0fdeviceAgentType\x126\n" +
	"\rmax_flow_rate\x18! \x01(\rB\x12\x92A\x0f2\rMax flow rateR\vmaxFlowRate\x12A\n" +
	"\x11max_big_flow_rate\x18\" \x01(\rB\x16\x92A\x132\x11Max big flow rateR\x0emaxBigFlowRate\x12?\n" +
	"\x10device_proxy_bgp\x18# \x01(\tB\x15\x92A\x122\x10Device proxy BGPR\x0edeviceProxyBgp\x12B\n" +
	"\x11device_proxy_bgp6\x18$ \x01(\tB\x16\x92A\x132\x11Device proxy BGP6R\x0fdeviceProxyBgp6\x12\\\n" +
	"\fcreated_date\x18% \x01(\v2\x1a.google.protobuf.TimestampB\x1d\x92A\x1a2\x18Creation timestamp (UTC)R\vcreatedDate\x12e\n" +
	"\fupdated_date\x18& \x01(\v2\x1a.google.protobuf.TimestampB&\x92A#2!Last modification timestamp (UTC)R\vupdatedDate\x12g\n" +
	"\x1bdevice_snmp_v3_conf_enabled\x18' \x01(\bB)\x92A&2$Device SNMP v3 configuration enabledR\x17deviceSnmpV3ConfEnabled\x12~\n" +
	"\x13device_snmp_v3_conf\x18( \x01(\v2,.kentik.device.v202308beta1.DeviceSnmpV3ConfB!\x92A\x1e2\x1cDevice SNMP v3 configurationR\x10deviceSnmpV3Conf\x12.\n" +
	"\bcdn_attr\x18) \x01(\tB\x13\x92A\x102\x0eCDN attributesR\acdnAttr\x123\n" +
	"\fbgp_peer_ip4\x18* \x01(\tB\x11\x92A\x0e2\fBGP peer IP4R\n" +
	"bgpPeerIp4\x123\n" +
	"\fbgp_peer_ip6\x18+ \x01(\tB\x11\x92A\x0e2\fBGP peer IP6R\n" +
	"bgpPeerIp6\x12:\n" +
	"\x0edevice_subtype\x18, \x01(\tB\x13\x92A\x102\x0eDevice subtypeR\rdeviceSubtype\x12E\n" +
	"\x12device_vendor_type\x18- \x01(\tB\x17\x92A\x142\x12Device vendor typeR\x10deviceVendorType\x12B\n" +
	"\x11device_model_type\x18. \x01(\tB\x16\x92A\x132\x11Device model typeR\x0fdeviceModelType\x12<\n" +
	"\x0fcloud_export_id\x18/ \x01(\tB\x14\x92A\x112\x0fCloud export IDR\rcloudExportId\x127\n" +
	"\rdevice_kproxy\x180 \x01(\tB\x12\x92A\x0f2\rDevice KProxyR\fdeviceKproxy\x124\n" +
	"\fsnmp_enabled\x181 \x01(\tB\x11\x92A\x0e2\fSNMP enabledR\vsnmpEnabled\x12K\n" +
	"\x14snmp_disabled_reason\x182 \x01(\tB\x19\x92A\x162\x14SNMP disabled reasonR\x12snmpDisabledReason\x12\\\n" +
	"\x1asnmp_disabled_reason_other\x183 \x01(\tB\x1f\x92A\x1c2\x1aSNMP disabled reason otherR\x17snmpDisabledReasonOther\x12H\n" +
	"\x13bgp_disabled_reason\x184 \x01(\tB\x18\x92A\x152\x13BGP disabled reasonR\x11bgpDisabledReason\x12Y\n" +
	"\x19bgp_disabled_reason_other\x185 \x01(\tB\x1e\x92A\x1b2\x19BGP disabled reason otherR\x16bgpDisabledReasonOther\x12I\n" +
	"\x13device_manufacturer\x186 \x01(\tB\x18\x92A\x152\x13Device manufacturerR\x12deviceManufacturer\x124\n" +
	"\fdevice_alert\x187 \x01(\tB\x11\x92A\x0e2\fDevice alertR\vdeviceAlert\x12\x1d\n" +
	"\x04role\x188 \x01(\tB\t\x92A\x062\x04RoleR\x04role\x12x\n" +
	"\x13device_gnmi_v1_conf\x189 \x01(\v2&.kentik.device.v202308beta1.GnmiV1ConfB!\x92A\x1e2\x1cDevice GNMI v1 configurationR\x10deviceGnmiV1Conf\x12A\n" +
	"\x11use_asn_from_flow\x18: \x01(\bB\x16\x92A\x132\x11Use ASN from flowR\x0euseAsnFromFlow\x127\n" +
	"\rmax_interface\x18; \x01(\rB\x12\x92A\x0f2\rMax interfaceR\fmaxInterface\x12H\n" +
	"\x13max_interface_check\x18< \x01(\rB\x18\x92A\x152\x13Max interface checkR\x11maxInterfaceCheck\x12u\n" +
	"\x03nms\x18= \x01(\v2+.kentik.device.v202308beta1.DeviceNmsConfigB6\x92A321Configuration if this device is monitored by NMS.R\x03nms\x12\xda\x01\n" +
	"\x1adevice_bgp_credential_name\x18> \x01(\tB\x9c\x01\x92A\x98\x012\x95\x01BGP Credential Name (device_bgp_credential_name) - Optional Credential Name (Credential for BGP peering). Valid characters: alphanumeric. Length: 32.R\x17deviceBgpCredentialName\x12\xde\x01\n" +
	"\x19flow_snmp_credential_name\x18? \x01(\tB\xa2\x01\x92A\x9e\x012\x9b\x01Snmp Credential Name (flow_snmp_credential_name) - Optional Credential Name (Credential for Flow Snmp peering). Valid characters: alphanumeric. Length: 32.R\x16flowSnmpCredentialName\x12\x8b\x01\n" +
	"\x16monitoring_template_id\x18@ \x01(\rBU\x92AR2PMonitoring template - The ID of the monitoring template assigned to this device.R\x14monitoringTemplateIdB\x10\n" +
	"\x0e_minimize_snmp\"9\n" +
	"\vDeviceQuery\x12*\n" +
	"\x11no_custom_columns\x18\x01 \x01(\bR\x0fnoCustomColumns\"-\n" +
	"\fLabelConcise\x12\x1d\n" +
	"\x02id\x18\x01 \x01(\rB\r\x92A\n" +
	"2\bLabel IDR\x02id\"S\n" +
	"\x12ListDevicesRequest\x12=\n" +
	"\x05query\x18\x01 \x01(\v2'.kentik.device.v202308beta1.DeviceQueryR\x05query\"\xea\x01\n" +
	"\x13ListDevicesResponse\x12l\n" +
	"\adevices\x18\x01 \x03(\v2*.kentik.device.v202308beta1.DeviceDetailedB&\x92A#2!List of configurations of devicesR\adevices\x12e\n" +
	"\rinvalid_count\x18\x02 \x01(\rB@\x92A=2;Number of invalid entries encountered while collecting dataR\finvalidCount\"\x85\x01\n" +
	"\x10GetDeviceRequest\x122\n" +
	"\x02id\x18\x01 \x01(\tB\"\x92A\x1c2\x1aID of the requested device\xe0A\x02R\x02id\x12=\n" +
	"\x05query\x18\x02 \x01(\v2'.kentik.device.v202308beta1.DeviceQueryR\x05query\"\x83\x01\n" +
	"\x11GetDeviceResponse\x12n\n" +
	"\x06device\x18\x01 \x01(\v2*.kentik.device.v202308beta1.DeviceDetailedB*\x92A'2%Configuration of the requested deviceR\x06device\"\x81\x01\n" +
	"\x13CreateDeviceRequest\x12j\n" +
	"\x06device\x18\x01 \x01(\v2).kentik.device.v202308beta1.DeviceConciseB'\x92A!2\x1fConfiguration of the new device\xe0A\x02R\x06device\"\x8a\x01\n" +
	"\x14CreateDeviceResponse\x12r\n" +
	"\x06device\x18\x01 \x01(\v2*.kentik.device.v202308beta1.DeviceDetailedB.\x92A+2)Configuration of the newly created deviceR\x06device\"\x94\x01\n" +
	"\x14CreateDevicesRequest\x12|\n" +
	"\adevices\x18\x01 \x03(\v2).kentik.device.v202308beta1.DeviceConciseB7\x92A12/List of configurations of devices to be created\xe0A\x02R\adevices\"\xf3\x01\n" +
	"\x15CreateDevicesResponse\x12z\n" +
	"\adevices\x18\x01 \x03(\v2*.kentik.device.v202308beta1.DeviceDetailedB4\x92A12/List of configurations of newly created devicesR\adevices\x12^\n" +
	"\x0efailed_devices\x18\x02 \x03(\tB7\x92A422List of names of devices that failed to be createdR\rfailedDevices\"\x9c\x01\n" +
	"\x13UpdateDeviceRequest\x12\x84\x01\n" +
	"\x06device\x18\x01 \x01(\v2).kentik.device.v202308beta1.DeviceConciseBA\x92A;29New configuration attributes for the device to be updated\xe0A\x02R\x06device\"\x84\x01\n" +
	"\x14UpdateDeviceResponse\x12l\n" +
	"\x06device\x18\x01 \x01(\v2*.kentik.device.v202308beta1.DeviceDetailedB(\x92A%2#Updated configuration of the deviceR\x06device\"\x94\x01\n" +
	"\x14UpdateDevicesRequest\x12|\n" +
	"\adevices\x18\x01 \x03(\v2).kentik.device.v202308beta1.DeviceConciseB7\x92A12/List of configurations of devices to be updated\xe0A\x02R\adevices\"\xeb\x01\n" +
	"\x15UpdateDevicesResponse\x12t\n" +
	"\adevices\x18\x01 \x03(\v2*.kentik.device.v202308beta1.DeviceDetailedB.\x92A+2)List of configurations of updated devicesR\adevices\x12\\\n" +
	"\x0efailed_devices\x18\x02 \x03(\tB5\x92A220List of IDs of devices that failed to be updatedR\rfailedDevices\"\xc7\x01\n" +
	"\x19UpdateDeviceLabelsRequest\x126\n" +
	"\x02id\x18\x01 \x01(\tB&\x92A 2\x1eID of the device to be updated\xe0A\x02R\x02id\x12r\n" +
	"\x06labels\x18\x02 \x03(\v2(.kentik.device.v202308beta1.LabelConciseB0\x92A*2(List of labels to be added to the device\xe0A\x02R\x06labels\"\x8a\x01\n" +
	"\x1aUpdateDeviceLabelsResponse\x12l\n" +
	"\x06device\x18\x01 \x01(\v2*.kentik.device.v202308beta1.DeviceDetailedB(\x92A%2#Updated configuration of the deviceR\x06device\"M\n" +
	"\x13DeleteDeviceRequest\x126\n" +
	"\x02id\x18\x01 \x01(\tB&\x92A 2\x1eID of the device to be deleted\xe0A\x02R\x02id\"\x16\n" +
	"\x14DeleteDeviceResponse\"V\n" +
	"\x14DeleteDevicesRequest\x12>\n" +
	"\x03ids\x18\x01 \x03(\tB,\x92A&2$List of IDs of devices to be deleted\xe0A\x02R\x03ids\"u\n" +
	"\x15DeleteDevicesResponse\x12\\\n" +
	"\x0efailed_devices\x18\x01 \x03(\tB5\x92A220List of IDs of devices that failed to be deletedR\rfailedDevices2\x8b\x1b\n" +
	"\rDeviceService\x12\xaa\x02\n" +
	"\vListDevices\x12..kentik.device.v202308beta1.ListDevicesRequest\x1a/.kentik.device.v202308beta1.ListDevicesResponse\"\xb9\x01\x92A~\x12\x11List all devices.\x1a\\Returns list of configured devices (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\vListDevices\xf2\xd7\x02\x11admin.device:read\x82\xd3\xe4\x93\x02\x1d\x12\x1b/device/v202308beta1/device\x12\xc9\x02\n" +
	"\tGetDevice\x12,.kentik.device.v202308beta1.GetDeviceRequest\x1a-.kentik.device.v202308beta1.GetDeviceResponse\"\xde\x01\x92A\x9d\x01\x12#Retrieve configuration of a device.\x1akReturns configuration of a device specified by ID (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\tGetDevice\xf2\xd7\x02\x11admin.device:read\x82\xd3\xe4\x93\x02\"\x12 /device/v202308beta1/device/{id}\x12\xe6\x02\n" +
	"\fCreateDevice\x12/.kentik.device.v202308beta1.CreateDeviceRequest\x1a0.kentik.device.v202308beta1.CreateDeviceResponse\"\xf2\x01\x92A\xb2\x01\x12\x17Configure a new device.\x1a\x88\x01Create configuration for a new device. Returns the newly created configuration (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\fCreateDevice\xf2\xd7\x02\x12admin.device:write\x82\xd3\xe4\x93\x02 :\x01*\"\x1b/device/v202308beta1/device\x12\x8a\x03\n" +
	"\rCreateDevices\x120.kentik.device.v202308beta1.CreateDevicesRequest\x1a1.kentik.device.v202308beta1.CreateDevicesResponse\"\x93\x02\x92A\xc6\x01\x12%Configure multiple devices (max 100).\x1a\x8d\x01Create configuration for multiple devices. Returns the newly created configurations (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\rCreateDevices\xf2\xd7\x02\x12admin.device:write\x82\xd3\xe4\x93\x02-:\x01*\"(/device/v202308beta1/device/batch_create\x12\x93\x03\n" +
	"\fUpdateDevice\x12/.kentik.device.v202308beta1.UpdateDeviceRequest\x1a0.kentik.device.v202308beta1.UpdateDeviceResponse\"\x9f\x02\x92A\xd3\x01\x12\"Updates configuration of a device.\x1a\x9e\x01Replaces configuration of a device with attributes in the request. Returns the updated configuration (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\fUpdateDevice\xf2\xd7\x02\x12admin.device:write\x82\xd3\xe4\x93\x02,:\x01*\x1a'/device/v202308beta1/device/{device.id}\x12\xb3\x03\n" +
	"\rUpdateDevices\x120.kentik.device.v202308beta1.UpdateDevicesRequest\x1a1.kentik.device.v202308beta1.UpdateDevicesResponse\"\xbc\x02\x92A\xef\x01\x124Updates configuration of multiple devices (max 100).\x1a\xa7\x01Replaces configuration of multiple devices with attributes in the request. Returns the updated configurations (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\rUpdateDevices\xf2\xd7\x02\x12admin.device:write\x82\xd3\xe4\x93\x02-:\x01*\x1a(/device/v202308beta1/device/batch_update\x12\xc2\x03\n" +
	"\x12UpdateDeviceLabels\x125.kentik.device.v202308beta1.UpdateDeviceLabelsRequest\x1a6.kentik.device.v202308beta1.UpdateDeviceLabelsResponse\"\xbc\x02\x92A\xf0\x01\x12\x1bUpdates labels of a device.\x1a\xbc\x01Removes all existing labels from the device and applies the device labels (see [About Device Labels](https://kb.kentik.com/v4/Cb16.htm)) specified by id. Returns the updated configuration.*\x12UpdateDeviceLabels\xf2\xd7\x02\x12admin.device:write\x82\xd3\xe4\x93\x02,:\x01*\x1a'/device/v202308beta1/device/{id}/labels\x12\xd5\x02\n" +
	"\fDeleteDevice\x12/.kentik.device.v202308beta1.DeleteDeviceRequest\x1a0.kentik.device.v202308beta1.DeleteDeviceResponse\"\xe1\x01\x92A\x9f\x01\x12!Delete configuration of a device.\x1alDeletes configuration of a device with specific ID (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\fDeleteDevice\xf2\xd7\x02\x12admin.device:write\x82\xd3\xe4\x93\x02\"* /device/v202308beta1/device/{id}\x12\xf5\x02\n" +
	"\rDeleteDevices\x120.kentik.device.v202308beta1.DeleteDevicesRequest\x1a1.kentik.device.v202308beta1.DeleteDevicesResponse\"\xfe\x01\x92A\xb1\x01\x12)Delete configuration of multiple devices.\x1auDeletes configuration of multiple devices with specific IDs (see [About Devices](https://kb.kentik.com/v4/Cb01.htm)).*\rDeleteDevices\xf2\xd7\x02\x12admin.device:write\x82\xd3\xe4\x93\x02-:\x01*\"(/device/v202308beta1/device/batch_delete\x1a*\xcaA\x13grpc.api.kentik.com\xea\xd7\x02\fadmin.device\x90\xd8\x02\x03B\xee\x03\x92A\x9c\x03\x12\xb5\x01\n" +
	"\n" +
	"Device API\x12R# Overview\n" +
	"The Device API provides programmatic access to configuration of devices\"E\n" +
	"\x16Kentik API Engineering\x12+https://github.com/kentik/api-schema-public2\fv202308beta1*\x01\x022\x10application/json:\x10application/jsonZD\n" +
	"\x1e\n" +
	"\x05email\x12\x15\b\x02\x1a\x0fX-CH-Auth-Email \x02\n" +
	"\"\n" +
	"\x05token\x12\x19\b\x02\x1a\x13X-CH-Auth-API-Token \x02b\x16\n" +
	"\t\n" +
	"\x05email\x12\x00\n" +
	"\t\n" +
	"\x05token\x12\x00r]\n" +
	"%General information about Kentik APIs\x124https://kb.kentik.com/v0/Ab09.htm#Ab09-APIs_OverviewZLgithub.com/kentik/api-schema-public/gen/go/kentik/device/v202308beta1;deviceb\x06proto3"

var (
	file_kentik_device_v202308beta1_device_proto_rawDescOnce sync.Once
	file_kentik_device_v202308beta1_device_proto_rawDescData []byte
)

func file_kentik_device_v202308beta1_device_proto_rawDescGZIP() []byte {
	file_kentik_device_v202308beta1_device_proto_rawDescOnce.Do(func() {
		file_kentik_device_v202308beta1_device_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kentik_device_v202308beta1_device_proto_rawDesc), len(file_kentik_device_v202308beta1_device_proto_rawDesc)))
	})
	return file_kentik_device_v202308beta1_device_proto_rawDescData
}

var file_kentik_device_v202308beta1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_kentik_device_v202308beta1_device_proto_goTypes = []any{
	(*DeviceSnmpV3Conf)(nil),           // 0: kentik.device.v202308beta1.DeviceSnmpV3Conf
	(*DeviceNmsConfig)(nil),            // 1: kentik.device.v202308beta1.DeviceNmsConfig
	(*DeviceNmsSnmpConfig)(nil),        // 2: kentik.device.v202308beta1.DeviceNmsSnmpConfig
	(*DeviceNmsStConfig)(nil),          // 3: kentik.device.v202308beta1.DeviceNmsStConfig
	(*DeviceConcise)(nil),              // 4: kentik.device.v202308beta1.DeviceConcise
	(*Site)(nil),                       // 5: kentik.device.v202308beta1.Site
	(*Plan)(nil),                       // 6: kentik.device.v202308beta1.Plan
	(*Label)(nil),                      // 7: kentik.device.v202308beta1.Label
	(*Interface)(nil),                  // 8: kentik.device.v202308beta1.Interface
	(*CustomColumnData)(nil),           // 9: kentik.device.v202308beta1.CustomColumnData
	(*GnmiV1Conf)(nil),                 // 10: kentik.device.v202308beta1.GnmiV1Conf
	(*DeviceDetailed)(nil),             // 11: kentik.device.v202308beta1.DeviceDetailed
	(*DeviceQuery)(nil),                // 12: kentik.device.v202308beta1.DeviceQuery
	(*LabelConcise)(nil),               // 13: kentik.device.v202308beta1.LabelConcise
	(*ListDevicesRequest)(nil),         // 14: kentik.device.v202308beta1.ListDevicesRequest
	(*ListDevicesResponse)(nil),        // 15: kentik.device.v202308beta1.ListDevicesResponse
	(*GetDeviceRequest)(nil),           // 16: kentik.device.v202308beta1.GetDeviceRequest
	(*GetDeviceResponse)(nil),          // 17: kentik.device.v202308beta1.GetDeviceResponse
	(*CreateDeviceRequest)(nil),        // 18: kentik.device.v202308beta1.CreateDeviceRequest
	(*CreateDeviceResponse)(nil),       // 19: kentik.device.v202308beta1.CreateDeviceResponse
	(*CreateDevicesRequest)(nil),       // 20: kentik.device.v202308beta1.CreateDevicesRequest
	(*CreateDevicesResponse)(nil),      // 21: kentik.device.v202308beta1.CreateDevicesResponse
	(*UpdateDeviceRequest)(nil),        // 22: kentik.device.v202308beta1.UpdateDeviceRequest
	(*UpdateDeviceResponse)(nil),       // 23: kentik.device.v202308beta1.UpdateDeviceResponse
	(*UpdateDevicesRequest)(nil),       // 24: kentik.device.v202308beta1.UpdateDevicesRequest
	(*UpdateDevicesResponse)(nil),      // 25: kentik.device.v202308beta1.UpdateDevicesResponse
	(*UpdateDeviceLabelsRequest)(nil),  // 26: kentik.device.v202308beta1.UpdateDeviceLabelsRequest
	(*UpdateDeviceLabelsResponse)(nil), // 27: kentik.device.v202308beta1.UpdateDeviceLabelsResponse
	(*DeleteDeviceRequest)(nil),        // 28: kentik.device.v202308beta1.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),       // 29: kentik.device.v202308beta1.DeleteDeviceResponse
	(*DeleteDevicesRequest)(nil),       // 30: kentik.device.v202308beta1.DeleteDevicesRequest
	(*DeleteDevicesResponse)(nil),      // 31: kentik.device.v202308beta1.DeleteDevicesResponse
	nil,                                // 32: kentik.device.v202308beta1.Plan.MetadataEntry
	(*durationpb.Duration)(nil),        // 33: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),      // 34: google.protobuf.Timestamp
}
var file_kentik_device_v202308beta1_device_proto_depIdxs = []int32{
	2,  // 0: kentik.device.v202308beta1.DeviceNmsConfig.snmp:type_name -> kentik.device.v202308beta1.DeviceNmsSnmpConfig
	3,  // 1: kentik.device.v202308beta1.DeviceNmsConfig.st:type_name -> kentik.device.v202308beta1.DeviceNmsStConfig
	33, // 2: kentik.device.v202308beta1.DeviceNmsSnmpConfig.timeout:type_name -> google.protobuf.Duration
	33, // 3: kentik.device.v202308beta1.DeviceNmsStConfig.timeout:type_name -> google.protobuf.Duration
	0,  // 4: kentik.device.v202308beta1.DeviceConcise.device_snmp_v3_conf:type_name -> kentik.device.v202308beta1.DeviceSnmpV3Conf
	1,  // 5: kentik.device.v202308beta1.DeviceConcise.nms:type_name -> kentik.device.v202308beta1.DeviceNmsConfig
	34, // 6: kentik.device.v202308beta1.Plan.cdate:type_name -> google.protobuf.Timestamp
	34, // 7: kentik.device.v202308beta1.Plan.edate:type_name -> google.protobuf.Timestamp
	32, // 8: kentik.device.v202308beta1.Plan.metadata:type_name -> kentik.device.v202308beta1.Plan.MetadataEntry
	34, // 9: kentik.device.v202308beta1.Label.edate:type_name -> google.protobuf.Timestamp
	34, // 10: kentik.device.v202308beta1.Label.cdate:type_name -> google.protobuf.Timestamp
	5,  // 11: kentik.device.v202308beta1.DeviceDetailed.site:type_name -> kentik.device.v202308beta1.Site
	6,  // 12: kentik.device.v202308beta1.DeviceDetailed.plan:type_name -> kentik.device.v202308beta1.Plan
	7,  // 13: kentik.device.v202308beta1.DeviceDetailed.labels:type_name -> kentik.device.v202308beta1.Label
	8,  // 14: kentik.device.v202308beta1.DeviceDetailed.all_interfaces:type_name -> kentik.device.v202308beta1.Interface
	9,  // 15: kentik.device.v202308beta1.DeviceDetailed.custom_column_data:type_name -> kentik.device.v202308beta1.CustomColumnData
	34, // 16: kentik.device.v202308beta1.DeviceDetailed.created_date:type_name -> google.protobuf.Timestamp
	34, // 17: kentik.device.v202308beta1.DeviceDetailed.updated_date:type_name -> google.protobuf.Timestamp
	0,  // 18: kentik.device.v202308beta1.DeviceDetailed.device_snmp_v3_conf:type_name -> kentik.device.v202308beta1.DeviceSnmpV3Conf
	10, // 19: kentik.device.v202308beta1.DeviceDetailed.device_gnmi_v1_conf:type_name -> kentik.device.v202308beta1.GnmiV1Conf
	1,  // 20: kentik.device.v202308beta1.DeviceDetailed.nms:type_name -> kentik.device.v202308beta1.DeviceNmsConfig
	12, // 21: kentik.device.v202308beta1.ListDevicesRequest.query:type_name -> kentik.device.v202308beta1.DeviceQuery
	11, // 22: kentik.device.v202308beta1.ListDevicesResponse.devices:type_name -> kentik.device.v202308beta1.DeviceDetailed
	12, // 23: kentik.device.v202308beta1.GetDeviceRequest.query:type_name -> kentik.device.v202308beta1.DeviceQuery
	11, // 24: kentik.device.v202308beta1.GetDeviceResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 25: kentik.device.v202308beta1.CreateDeviceRequest.device:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 26: kentik.device.v202308beta1.CreateDeviceResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 27: kentik.device.v202308beta1.CreateDevicesRequest.devices:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 28: kentik.device.v202308beta1.CreateDevicesResponse.devices:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 29: kentik.device.v202308beta1.UpdateDeviceRequest.device:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 30: kentik.device.v202308beta1.UpdateDeviceResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	4,  // 31: kentik.device.v202308beta1.UpdateDevicesRequest.devices:type_name -> kentik.device.v202308beta1.DeviceConcise
	11, // 32: kentik.device.v202308beta1.UpdateDevicesResponse.devices:type_name -> kentik.device.v202308beta1.DeviceDetailed
	13, // 33: kentik.device.v202308beta1.UpdateDeviceLabelsRequest.labels:type_name -> kentik.device.v202308beta1.LabelConcise
	11, // 34: kentik.device.v202308beta1.UpdateDeviceLabelsResponse.device:type_name -> kentik.device.v202308beta1.DeviceDetailed
	14, // 35: kentik.device.v202308beta1.DeviceService.ListDevices:input_type -> kentik.device.v202308beta1.ListDevicesRequest
	16, // 36: kentik.device.v202308beta1.DeviceService.GetDevice:input_type -> kentik.device.v202308beta1.GetDeviceRequest
	18, // 37: kentik.device.v202308beta1.DeviceService.CreateDevice:input_type -> kentik.device.v202308beta1.CreateDeviceRequest
	20, // 38: kentik.device.v202308beta1.DeviceService.CreateDevices:input_type -> kentik.device.v202308beta1.CreateDevicesRequest
	22, // 39: kentik.device.v202308beta1.DeviceService.UpdateDevice:input_type -> kentik.device.v202308beta1.UpdateDeviceRequest
	24, // 40: kentik.device.v202308beta1.DeviceService.UpdateDevices:input_type -> kentik.device.v202308beta1.UpdateDevicesRequest
	26, // 41: kentik.device.v202308beta1.DeviceService.UpdateDeviceLabels:input_type -> kentik.device.v202308beta1.UpdateDeviceLabelsRequest
	28, // 42: kentik.device.v202308beta1.DeviceService.DeleteDevice:input_type -> kentik.device.v202308beta1.DeleteDeviceRequest
	30, // 43: kentik.device.v202308beta1.DeviceService.DeleteDevices:input_type -> kentik.device.v202308beta1.DeleteDevicesRequest
	15, // 44: kentik.device.v202308beta1.DeviceService.ListDevices:output_type -> kentik.device.v202308beta1.ListDevicesResponse
	17, // 45: kentik.device.v202308beta1.DeviceService.GetDevice:output_type -> kentik.device.v202308beta1.GetDeviceResponse
	19, // 46: kentik.device.v202308beta1.DeviceService.CreateDevice:output_type -> kentik.device.v202308beta1.CreateDeviceResponse
	21, // 47: kentik.device.v202308beta1.DeviceService.CreateDevices:output_type -> kentik.device.v202308beta1.CreateDevicesResponse
	23, // 48: kentik.device.v202308beta1.DeviceService.UpdateDevice:output_type -> kentik.device.v202308beta1.UpdateDeviceResponse
	25, // 49: kentik.device.v202308beta1.DeviceService.UpdateDevices:output_type -> kentik.device.v202308beta1.UpdateDevicesResponse
	27, // 50: kentik.device.v202308beta1.DeviceService.UpdateDeviceLabels:output_type -> kentik.device.v202308beta1.UpdateDeviceLabelsResponse
	29, // 51: kentik.device.v202308beta1.DeviceService.DeleteDevice:output_type -> kentik.device.v202308beta1.DeleteDeviceResponse
	31, // 52: kentik.device.v202308beta1.DeviceService.DeleteDevices:output_type -> kentik.device.v202308beta1.DeleteDevicesResponse
	44, // [44:53] is the sub-list for method output_type
	35, // [35:44] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_kentik_device_v202308beta1_device_proto_init() }
func file_kentik_device_v202308beta1_device_proto_init() {
	if File_kentik_device_v202308beta1_device_proto != nil {
		return
	}
	file_kentik_device_v202308beta1_device_proto_msgTypes[4].OneofWrappers = []any{}
	file_kentik_device_v202308beta1_device_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kentik_device_v202308beta1_device_proto_rawDesc), len(file_kentik_device_v202308beta1_device_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_device_v202308beta1_device_proto_goTypes,
		DependencyIndexes: file_kentik_device_v202308beta1_device_proto_depIdxs,
		MessageInfos:      file_kentik_device_v202308beta1_device_proto_msgTypes,
	}.Build()
	File_kentik_device_v202308beta1_device_proto = out.File
	file_kentik_device_v202308beta1_device_proto_goTypes = nil
	file_kentik_device_v202308beta1_device_proto_depIdxs = nil
}
