// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: kentik/network_class/v202109alpha1/network_class.proto

package network_class

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/type/latlng"
	_ "google.golang.org/genproto/googleapis/type/postaladdress"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CloudType int32

const (
	CloudType_CLOUD_TYPE_UNSPECIFIED CloudType = 0
	CloudType_CLOUD_TYPE_AWS         CloudType = 1
	CloudType_CLOUD_TYPE_AZURE       CloudType = 2
	CloudType_CLOUD_TYPE_GCE         CloudType = 3
	CloudType_CLOUD_TYPE_IBM         CloudType = 4
)

// Enum value maps for CloudType.
var (
	CloudType_name = map[int32]string{
		0: "CLOUD_TYPE_UNSPECIFIED",
		1: "CLOUD_TYPE_AWS",
		2: "CLOUD_TYPE_AZURE",
		3: "CLOUD_TYPE_GCE",
		4: "CLOUD_TYPE_IBM",
	}
	CloudType_value = map[string]int32{
		"CLOUD_TYPE_UNSPECIFIED": 0,
		"CLOUD_TYPE_AWS":         1,
		"CLOUD_TYPE_AZURE":       2,
		"CLOUD_TYPE_GCE":         3,
		"CLOUD_TYPE_IBM":         4,
	}
)

func (x CloudType) Enum() *CloudType {
	p := new(CloudType)
	*p = x
	return p
}

func (x CloudType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_network_class_v202109alpha1_network_class_proto_enumTypes[0].Descriptor()
}

func (CloudType) Type() protoreflect.EnumType {
	return &file_kentik_network_class_v202109alpha1_network_class_proto_enumTypes[0]
}

func (x CloudType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudType.Descriptor instead.
func (CloudType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP(), []int{0}
}

type CloudSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud provider
	Type CloudType `protobuf:"varint,1,opt,name=type,proto3,enum=kentik.network_class.v202109alpha1.CloudType" json:"type,omitempty"`
	// Subnet masks
	Subnets []string `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *CloudSubnet) Reset() {
	*x = CloudSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSubnet) ProtoMessage() {}

func (x *CloudSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSubnet.ProtoReflect.Descriptor instead.
func (*CloudSubnet) Descriptor() ([]byte, []int) {
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP(), []int{0}
}

func (x *CloudSubnet) GetType() CloudType {
	if x != nil {
		return x.Type
	}
	return CloudType_CLOUD_TYPE_UNSPECIFIED
}

func (x *CloudSubnet) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type NetworkClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal ASNs
	InternalAsns []string `protobuf:"bytes,1,rep,name=internal_asns,json=internalAsns,proto3" json:"internal_asns,omitempty"`
	// Internal IPs
	InternalIps []string `protobuf:"bytes,2,rep,name=internal_ips,json=internalIps,proto3" json:"internal_ips,omitempty"`
	// Specify to use internal ASNs
	UsePrivateAsns bool `protobuf:"varint,3,opt,name=use_private_asns,json=usePrivateAsns,proto3" json:"use_private_asns,omitempty"`
	// Specify to use internal IPs
	UsePrivateSubnets bool `protobuf:"varint,4,opt,name=use_private_subnets,json=usePrivateSubnets,proto3" json:"use_private_subnets,omitempty"`
	// Cloud provider and subnet info.
	CloudSubnets []*CloudSubnet `protobuf:"bytes,5,rep,name=cloud_subnets,json=cloudSubnets,proto3" json:"cloud_subnets,omitempty"`
}

func (x *NetworkClass) Reset() {
	*x = NetworkClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkClass) ProtoMessage() {}

func (x *NetworkClass) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkClass.ProtoReflect.Descriptor instead.
func (*NetworkClass) Descriptor() ([]byte, []int) {
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkClass) GetInternalAsns() []string {
	if x != nil {
		return x.InternalAsns
	}
	return nil
}

func (x *NetworkClass) GetInternalIps() []string {
	if x != nil {
		return x.InternalIps
	}
	return nil
}

func (x *NetworkClass) GetUsePrivateAsns() bool {
	if x != nil {
		return x.UsePrivateAsns
	}
	return false
}

func (x *NetworkClass) GetUsePrivateSubnets() bool {
	if x != nil {
		return x.UsePrivateSubnets
	}
	return false
}

func (x *NetworkClass) GetCloudSubnets() []*CloudSubnet {
	if x != nil {
		return x.CloudSubnets
	}
	return nil
}

type GetNetworkClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkClassRequest) Reset() {
	*x = GetNetworkClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkClassRequest) ProtoMessage() {}

func (x *GetNetworkClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkClassRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkClassRequest) Descriptor() ([]byte, []int) {
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP(), []int{2}
}

type GetNetworkClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkClass *NetworkClass `protobuf:"bytes,1,opt,name=network_class,json=networkClass,proto3" json:"network_class,omitempty"`
}

func (x *GetNetworkClassResponse) Reset() {
	*x = GetNetworkClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkClassResponse) ProtoMessage() {}

func (x *GetNetworkClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkClassResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkClassResponse) Descriptor() ([]byte, []int) {
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP(), []int{3}
}

func (x *GetNetworkClassResponse) GetNetworkClass() *NetworkClass {
	if x != nil {
		return x.NetworkClass
	}
	return nil
}

type UpdateNetworkClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkClass *NetworkClass `protobuf:"bytes,1,opt,name=network_class,json=networkClass,proto3" json:"network_class,omitempty"`
}

func (x *UpdateNetworkClassRequest) Reset() {
	*x = UpdateNetworkClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkClassRequest) ProtoMessage() {}

func (x *UpdateNetworkClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkClassRequest.ProtoReflect.Descriptor instead.
func (*UpdateNetworkClassRequest) Descriptor() ([]byte, []int) {
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNetworkClassRequest) GetNetworkClass() *NetworkClass {
	if x != nil {
		return x.NetworkClass
	}
	return nil
}

type UpdateNetworkClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkClass *NetworkClass `protobuf:"bytes,1,opt,name=network_class,json=networkClass,proto3" json:"network_class,omitempty"`
}

func (x *UpdateNetworkClassResponse) Reset() {
	*x = UpdateNetworkClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkClassResponse) ProtoMessage() {}

func (x *UpdateNetworkClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkClassResponse.ProtoReflect.Descriptor instead.
func (*UpdateNetworkClassResponse) Descriptor() ([]byte, []int) {
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNetworkClassResponse) GetNetworkClass() *NetworkClass {
	if x != nil {
		return x.NetworkClass
	}
	return nil
}

var File_kentik_network_class_v202109alpha1_network_class_proto protoreflect.FileDescriptor

var file_kentik_network_class_v202109alpha1_network_class_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x0b,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x73, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x73, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x72, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x22, 0x73, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2a, 0x79, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x57,
	0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x43, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x42, 0x4d, 0x10,
	0x04, 0x32, 0x86, 0x06, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd3, 0x02, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3a, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x92, 0x41, 0x75, 0x12, 0x1d, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x43, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x2a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65,
	0x74, 0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0xe9, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x92, 0x41, 0x7e, 0x12, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x46, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69,
	0x72, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x2a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x19, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x2d, 0xca, 0x41, 0x13,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0xdc, 0x02, 0x5a, 0x54, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x92, 0x41, 0x82, 0x02, 0x12, 0x44, 0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x41, 0x50, 0x49, 0x22, 0x18, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x0c, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2a, 0x01, 0x02,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41,
	0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x00, 0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x1b, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kentik_network_class_v202109alpha1_network_class_proto_rawDescOnce sync.Once
	file_kentik_network_class_v202109alpha1_network_class_proto_rawDescData = file_kentik_network_class_v202109alpha1_network_class_proto_rawDesc
)

func file_kentik_network_class_v202109alpha1_network_class_proto_rawDescGZIP() []byte {
	file_kentik_network_class_v202109alpha1_network_class_proto_rawDescOnce.Do(func() {
		file_kentik_network_class_v202109alpha1_network_class_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_network_class_v202109alpha1_network_class_proto_rawDescData)
	})
	return file_kentik_network_class_v202109alpha1_network_class_proto_rawDescData
}

var file_kentik_network_class_v202109alpha1_network_class_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kentik_network_class_v202109alpha1_network_class_proto_goTypes = []interface{}{
	(CloudType)(0),                     // 0: kentik.network_class.v202109alpha1.CloudType
	(*CloudSubnet)(nil),                // 1: kentik.network_class.v202109alpha1.CloudSubnet
	(*NetworkClass)(nil),               // 2: kentik.network_class.v202109alpha1.NetworkClass
	(*GetNetworkClassRequest)(nil),     // 3: kentik.network_class.v202109alpha1.GetNetworkClassRequest
	(*GetNetworkClassResponse)(nil),    // 4: kentik.network_class.v202109alpha1.GetNetworkClassResponse
	(*UpdateNetworkClassRequest)(nil),  // 5: kentik.network_class.v202109alpha1.UpdateNetworkClassRequest
	(*UpdateNetworkClassResponse)(nil), // 6: kentik.network_class.v202109alpha1.UpdateNetworkClassResponse
}
var file_kentik_network_class_v202109alpha1_network_class_proto_depIdxs = []int32{
	0, // 0: kentik.network_class.v202109alpha1.CloudSubnet.type:type_name -> kentik.network_class.v202109alpha1.CloudType
	1, // 1: kentik.network_class.v202109alpha1.NetworkClass.cloud_subnets:type_name -> kentik.network_class.v202109alpha1.CloudSubnet
	2, // 2: kentik.network_class.v202109alpha1.GetNetworkClassResponse.network_class:type_name -> kentik.network_class.v202109alpha1.NetworkClass
	2, // 3: kentik.network_class.v202109alpha1.UpdateNetworkClassRequest.network_class:type_name -> kentik.network_class.v202109alpha1.NetworkClass
	2, // 4: kentik.network_class.v202109alpha1.UpdateNetworkClassResponse.network_class:type_name -> kentik.network_class.v202109alpha1.NetworkClass
	3, // 5: kentik.network_class.v202109alpha1.NetworkClassService.GetNetworkClass:input_type -> kentik.network_class.v202109alpha1.GetNetworkClassRequest
	5, // 6: kentik.network_class.v202109alpha1.NetworkClassService.UpdateNetworkClass:input_type -> kentik.network_class.v202109alpha1.UpdateNetworkClassRequest
	4, // 7: kentik.network_class.v202109alpha1.NetworkClassService.GetNetworkClass:output_type -> kentik.network_class.v202109alpha1.GetNetworkClassResponse
	6, // 8: kentik.network_class.v202109alpha1.NetworkClassService.UpdateNetworkClass:output_type -> kentik.network_class.v202109alpha1.UpdateNetworkClassResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kentik_network_class_v202109alpha1_network_class_proto_init() }
func file_kentik_network_class_v202109alpha1_network_class_proto_init() {
	if File_kentik_network_class_v202109alpha1_network_class_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_network_class_v202109alpha1_network_class_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_network_class_v202109alpha1_network_class_proto_goTypes,
		DependencyIndexes: file_kentik_network_class_v202109alpha1_network_class_proto_depIdxs,
		EnumInfos:         file_kentik_network_class_v202109alpha1_network_class_proto_enumTypes,
		MessageInfos:      file_kentik_network_class_v202109alpha1_network_class_proto_msgTypes,
	}.Build()
	File_kentik_network_class_v202109alpha1_network_class_proto = out.File
	file_kentik_network_class_v202109alpha1_network_class_proto_rawDesc = nil
	file_kentik_network_class_v202109alpha1_network_class_proto_goTypes = nil
	file_kentik_network_class_v202109alpha1_network_class_proto_depIdxs = nil
}
