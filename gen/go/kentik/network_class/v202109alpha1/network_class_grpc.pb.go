// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/network_class/v202109alpha1/network_class.proto

package network_class

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkClassService_GetNetworkClass_FullMethodName    = "/kentik.network_class.v202109alpha1.NetworkClassService/GetNetworkClass"
	NetworkClassService_UpdateNetworkClass_FullMethodName = "/kentik.network_class.v202109alpha1.NetworkClassService/UpdateNetworkClass"
)

// NetworkClassServiceClient is the client API for NetworkClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkClassServiceClient interface {
	GetNetworkClass(ctx context.Context, in *GetNetworkClassRequest, opts ...grpc.CallOption) (*GetNetworkClassResponse, error)
	UpdateNetworkClass(ctx context.Context, in *UpdateNetworkClassRequest, opts ...grpc.CallOption) (*UpdateNetworkClassResponse, error)
}

type networkClassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClassServiceClient(cc grpc.ClientConnInterface) NetworkClassServiceClient {
	return &networkClassServiceClient{cc}
}

func (c *networkClassServiceClient) GetNetworkClass(ctx context.Context, in *GetNetworkClassRequest, opts ...grpc.CallOption) (*GetNetworkClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkClassResponse)
	err := c.cc.Invoke(ctx, NetworkClassService_GetNetworkClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClassServiceClient) UpdateNetworkClass(ctx context.Context, in *UpdateNetworkClassRequest, opts ...grpc.CallOption) (*UpdateNetworkClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNetworkClassResponse)
	err := c.cc.Invoke(ctx, NetworkClassService_UpdateNetworkClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkClassServiceServer is the server API for NetworkClassService service.
// All implementations should embed UnimplementedNetworkClassServiceServer
// for forward compatibility.
type NetworkClassServiceServer interface {
	GetNetworkClass(context.Context, *GetNetworkClassRequest) (*GetNetworkClassResponse, error)
	UpdateNetworkClass(context.Context, *UpdateNetworkClassRequest) (*UpdateNetworkClassResponse, error)
}

// UnimplementedNetworkClassServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkClassServiceServer struct{}

func (UnimplementedNetworkClassServiceServer) GetNetworkClass(context.Context, *GetNetworkClassRequest) (*GetNetworkClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkClass not implemented")
}
func (UnimplementedNetworkClassServiceServer) UpdateNetworkClass(context.Context, *UpdateNetworkClassRequest) (*UpdateNetworkClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkClass not implemented")
}
func (UnimplementedNetworkClassServiceServer) testEmbeddedByValue() {}

// UnsafeNetworkClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkClassServiceServer will
// result in compilation errors.
type UnsafeNetworkClassServiceServer interface {
	mustEmbedUnimplementedNetworkClassServiceServer()
}

func RegisterNetworkClassServiceServer(s grpc.ServiceRegistrar, srv NetworkClassServiceServer) {
	// If the following call pancis, it indicates UnimplementedNetworkClassServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkClassService_ServiceDesc, srv)
}

func _NetworkClassService_GetNetworkClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkClassServiceServer).GetNetworkClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkClassService_GetNetworkClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkClassServiceServer).GetNetworkClass(ctx, req.(*GetNetworkClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkClassService_UpdateNetworkClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkClassServiceServer).UpdateNetworkClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkClassService_UpdateNetworkClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkClassServiceServer).UpdateNetworkClass(ctx, req.(*UpdateNetworkClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkClassService_ServiceDesc is the grpc.ServiceDesc for NetworkClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.network_class.v202109alpha1.NetworkClassService",
	HandlerType: (*NetworkClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkClass",
			Handler:    _NetworkClassService_GetNetworkClass_Handler,
		},
		{
			MethodName: "UpdateNetworkClass",
			Handler:    _NetworkClassService_UpdateNetworkClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/network_class/v202109alpha1/network_class.proto",
}
