// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/network_class/v202109alpha1/network_class.proto

package network_class

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CloudSubnet) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CloudSubnet:
		x.Type = v.GetType()
		x.Subnets = v.GetSubnets()
	default:
		if v, ok := v.(interface{ GetType() CloudType }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetSubnets() []string }); ok {
			x.Subnets = v.GetSubnets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CloudSubnet) Proto_ShallowClone() (c *CloudSubnet) {
	if x != nil {
		c = new(CloudSubnet)
		c.Type = x.Type
		c.Subnets = x.Subnets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *NetworkClass) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *NetworkClass:
		x.InternalAsns = v.GetInternalAsns()
		x.InternalIps = v.GetInternalIps()
		x.UsePrivateAsns = v.GetUsePrivateAsns()
		x.UsePrivateSubnets = v.GetUsePrivateSubnets()
		x.CloudSubnets = v.GetCloudSubnets()
	default:
		if v, ok := v.(interface{ GetInternalAsns() []string }); ok {
			x.InternalAsns = v.GetInternalAsns()
		}
		if v, ok := v.(interface{ GetInternalIps() []string }); ok {
			x.InternalIps = v.GetInternalIps()
		}
		if v, ok := v.(interface{ GetUsePrivateAsns() bool }); ok {
			x.UsePrivateAsns = v.GetUsePrivateAsns()
		}
		if v, ok := v.(interface{ GetUsePrivateSubnets() bool }); ok {
			x.UsePrivateSubnets = v.GetUsePrivateSubnets()
		}
		if v, ok := v.(interface{ GetCloudSubnets() []*CloudSubnet }); ok {
			x.CloudSubnets = v.GetCloudSubnets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *NetworkClass) Proto_ShallowClone() (c *NetworkClass) {
	if x != nil {
		c = new(NetworkClass)
		c.InternalAsns = x.InternalAsns
		c.InternalIps = x.InternalIps
		c.UsePrivateAsns = x.UsePrivateAsns
		c.UsePrivateSubnets = x.UsePrivateSubnets
		c.CloudSubnets = x.CloudSubnets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetNetworkClassRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetNetworkClassRequest) Proto_ShallowClone() (c *GetNetworkClassRequest) {
	if x != nil {
		c = new(GetNetworkClassRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetNetworkClassResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetNetworkClassResponse:
		x.NetworkClass = v.GetNetworkClass()
	default:
		if v, ok := v.(interface{ GetNetworkClass() *NetworkClass }); ok {
			x.NetworkClass = v.GetNetworkClass()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetNetworkClassResponse) Proto_ShallowClone() (c *GetNetworkClassResponse) {
	if x != nil {
		c = new(GetNetworkClassResponse)
		c.NetworkClass = x.NetworkClass
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateNetworkClassRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateNetworkClassRequest:
		x.NetworkClass = v.GetNetworkClass()
	default:
		if v, ok := v.(interface{ GetNetworkClass() *NetworkClass }); ok {
			x.NetworkClass = v.GetNetworkClass()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateNetworkClassRequest) Proto_ShallowClone() (c *UpdateNetworkClassRequest) {
	if x != nil {
		c = new(UpdateNetworkClassRequest)
		c.NetworkClass = x.NetworkClass
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateNetworkClassResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateNetworkClassResponse:
		x.NetworkClass = v.GetNetworkClass()
	default:
		if v, ok := v.(interface{ GetNetworkClass() *NetworkClass }); ok {
			x.NetworkClass = v.GetNetworkClass()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateNetworkClassResponse) Proto_ShallowClone() (c *UpdateNetworkClassResponse) {
	if x != nil {
		c = new(UpdateNetworkClassResponse)
		c.NetworkClass = x.NetworkClass
	}
	return
}
