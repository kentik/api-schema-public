// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/deviceconf/v202511/device_configuration_service.proto

package deviceconf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceConfigurationService_GetDeviceAssignments_FullMethodName             = "/kentik.deviceconf.v202511.DeviceConfigurationService/GetDeviceAssignments"
	DeviceConfigurationService_UpdateDeviceConfiguration_FullMethodName        = "/kentik.deviceconf.v202511.DeviceConfigurationService/UpdateDeviceConfiguration"
	DeviceConfigurationService_GetDeviceConfiguration_FullMethodName           = "/kentik.deviceconf.v202511.DeviceConfigurationService/GetDeviceConfiguration"
	DeviceConfigurationService_ListDeviceConfigurationRevisions_FullMethodName = "/kentik.deviceconf.v202511.DeviceConfigurationService/ListDeviceConfigurationRevisions"
)

// DeviceConfigurationServiceClient is the client API for DeviceConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceConfigurationServiceClient interface {
	// Get devices assigned to this agent.
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-agentid
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-agentid
	GetDeviceAssignments(ctx context.Context, in *GetDeviceAssignmentsRequest, opts ...grpc.CallOption) (*GetDeviceAssignmentsResponse, error)
	// Update device configuration.
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-agentid
	// - x-kt-did
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-agentid
	// - x-kt-did
	UpdateDeviceConfiguration(ctx context.Context, in *UpdateDeviceConfigurationRequest, opts ...grpc.CallOption) (*UpdateDeviceConfigurationResponse, error)
	// Get device configuration.
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-did
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-did
	GetDeviceConfiguration(ctx context.Context, in *GetDeviceConfigurationRequest, opts ...grpc.CallOption) (*GetDeviceConfigurationResponse, error)
	// List device configuration revisions
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-did
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-did
	ListDeviceConfigurationRevisions(ctx context.Context, in *ListDeviceConfigurationRevisionsRequest, opts ...grpc.CallOption) (*ListDeviceConfigurationRevisionsResponse, error)
}

type deviceConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceConfigurationServiceClient(cc grpc.ClientConnInterface) DeviceConfigurationServiceClient {
	return &deviceConfigurationServiceClient{cc}
}

func (c *deviceConfigurationServiceClient) GetDeviceAssignments(ctx context.Context, in *GetDeviceAssignmentsRequest, opts ...grpc.CallOption) (*GetDeviceAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceAssignmentsResponse)
	err := c.cc.Invoke(ctx, DeviceConfigurationService_GetDeviceAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigurationServiceClient) UpdateDeviceConfiguration(ctx context.Context, in *UpdateDeviceConfigurationRequest, opts ...grpc.CallOption) (*UpdateDeviceConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeviceConfigurationResponse)
	err := c.cc.Invoke(ctx, DeviceConfigurationService_UpdateDeviceConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigurationServiceClient) GetDeviceConfiguration(ctx context.Context, in *GetDeviceConfigurationRequest, opts ...grpc.CallOption) (*GetDeviceConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceConfigurationResponse)
	err := c.cc.Invoke(ctx, DeviceConfigurationService_GetDeviceConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigurationServiceClient) ListDeviceConfigurationRevisions(ctx context.Context, in *ListDeviceConfigurationRevisionsRequest, opts ...grpc.CallOption) (*ListDeviceConfigurationRevisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeviceConfigurationRevisionsResponse)
	err := c.cc.Invoke(ctx, DeviceConfigurationService_ListDeviceConfigurationRevisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceConfigurationServiceServer is the server API for DeviceConfigurationService service.
// All implementations should embed UnimplementedDeviceConfigurationServiceServer
// for forward compatibility.
type DeviceConfigurationServiceServer interface {
	// Get devices assigned to this agent.
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-agentid
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-agentid
	GetDeviceAssignments(context.Context, *GetDeviceAssignmentsRequest) (*GetDeviceAssignmentsResponse, error)
	// Update device configuration.
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-agentid
	// - x-kt-did
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-agentid
	// - x-kt-did
	UpdateDeviceConfiguration(context.Context, *UpdateDeviceConfigurationRequest) (*UpdateDeviceConfigurationResponse, error)
	// Get device configuration.
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-did
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-did
	GetDeviceConfiguration(context.Context, *GetDeviceConfigurationRequest) (*GetDeviceConfigurationResponse, error)
	// List device configuration revisions
	//
	// External clients MUST set the following gRPC metadata:
	// - x-ch-auth-email
	// - x-ch-auth-api-token
	// - x-kt-did
	//
	// Internal clients MUST set the following gRPC metadata:
	// - x-kt-cid (Company ID)
	// - x-kt-did
	ListDeviceConfigurationRevisions(context.Context, *ListDeviceConfigurationRevisionsRequest) (*ListDeviceConfigurationRevisionsResponse, error)
}

// UnimplementedDeviceConfigurationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceConfigurationServiceServer struct{}

func (UnimplementedDeviceConfigurationServiceServer) GetDeviceAssignments(context.Context, *GetDeviceAssignmentsRequest) (*GetDeviceAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAssignments not implemented")
}
func (UnimplementedDeviceConfigurationServiceServer) UpdateDeviceConfiguration(context.Context, *UpdateDeviceConfigurationRequest) (*UpdateDeviceConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfiguration not implemented")
}
func (UnimplementedDeviceConfigurationServiceServer) GetDeviceConfiguration(context.Context, *GetDeviceConfigurationRequest) (*GetDeviceConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfiguration not implemented")
}
func (UnimplementedDeviceConfigurationServiceServer) ListDeviceConfigurationRevisions(context.Context, *ListDeviceConfigurationRevisionsRequest) (*ListDeviceConfigurationRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceConfigurationRevisions not implemented")
}
func (UnimplementedDeviceConfigurationServiceServer) testEmbeddedByValue() {}

// UnsafeDeviceConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceConfigurationServiceServer will
// result in compilation errors.
type UnsafeDeviceConfigurationServiceServer interface {
	mustEmbedUnimplementedDeviceConfigurationServiceServer()
}

func RegisterDeviceConfigurationServiceServer(s grpc.ServiceRegistrar, srv DeviceConfigurationServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceConfigurationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceConfigurationService_ServiceDesc, srv)
}

func _DeviceConfigurationService_GetDeviceAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigurationServiceServer).GetDeviceAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigurationService_GetDeviceAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigurationServiceServer).GetDeviceAssignments(ctx, req.(*GetDeviceAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigurationService_UpdateDeviceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigurationServiceServer).UpdateDeviceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigurationService_UpdateDeviceConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigurationServiceServer).UpdateDeviceConfiguration(ctx, req.(*UpdateDeviceConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigurationService_GetDeviceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigurationServiceServer).GetDeviceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigurationService_GetDeviceConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigurationServiceServer).GetDeviceConfiguration(ctx, req.(*GetDeviceConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigurationService_ListDeviceConfigurationRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceConfigurationRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigurationServiceServer).ListDeviceConfigurationRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigurationService_ListDeviceConfigurationRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigurationServiceServer).ListDeviceConfigurationRevisions(ctx, req.(*ListDeviceConfigurationRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceConfigurationService_ServiceDesc is the grpc.ServiceDesc for DeviceConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.deviceconf.v202511.DeviceConfigurationService",
	HandlerType: (*DeviceConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceAssignments",
			Handler:    _DeviceConfigurationService_GetDeviceAssignments_Handler,
		},
		{
			MethodName: "UpdateDeviceConfiguration",
			Handler:    _DeviceConfigurationService_UpdateDeviceConfiguration_Handler,
		},
		{
			MethodName: "GetDeviceConfiguration",
			Handler:    _DeviceConfigurationService_GetDeviceConfiguration_Handler,
		},
		{
			MethodName: "ListDeviceConfigurationRevisions",
			Handler:    _DeviceConfigurationService_ListDeviceConfigurationRevisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/deviceconf/v202511/device_configuration_service.proto",
}
