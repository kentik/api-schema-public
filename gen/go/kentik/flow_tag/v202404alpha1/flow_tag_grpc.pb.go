// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/flow_tag/v202404alpha1/flow_tag.proto

package flow_tag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlowTagService_GetFlowTag_FullMethodName    = "/kentik.flow_tag.v202404alpha1.FlowTagService/GetFlowTag"
	FlowTagService_SearchFlowTag_FullMethodName = "/kentik.flow_tag.v202404alpha1.FlowTagService/SearchFlowTag"
	FlowTagService_CreateFlowTag_FullMethodName = "/kentik.flow_tag.v202404alpha1.FlowTagService/CreateFlowTag"
	FlowTagService_UpdateFlowTag_FullMethodName = "/kentik.flow_tag.v202404alpha1.FlowTagService/UpdateFlowTag"
	FlowTagService_DeleteFlowTag_FullMethodName = "/kentik.flow_tag.v202404alpha1.FlowTagService/DeleteFlowTag"
)

// FlowTagServiceClient is the client API for FlowTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowTagServiceClient interface {
	GetFlowTag(ctx context.Context, in *GetFlowTagRequest, opts ...grpc.CallOption) (*GetFlowTagResponse, error)
	SearchFlowTag(ctx context.Context, in *SearchFlowTagRequest, opts ...grpc.CallOption) (*SearchFlowTagResponse, error)
	CreateFlowTag(ctx context.Context, in *CreateFlowTagRequest, opts ...grpc.CallOption) (*CreateFlowTagResponse, error)
	UpdateFlowTag(ctx context.Context, in *UpdateFlowTagRequest, opts ...grpc.CallOption) (*UpdateFlowTagResponse, error)
	DeleteFlowTag(ctx context.Context, in *DeleteFlowTagRequest, opts ...grpc.CallOption) (*DeleteFlowTagResponse, error)
}

type flowTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowTagServiceClient(cc grpc.ClientConnInterface) FlowTagServiceClient {
	return &flowTagServiceClient{cc}
}

func (c *flowTagServiceClient) GetFlowTag(ctx context.Context, in *GetFlowTagRequest, opts ...grpc.CallOption) (*GetFlowTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlowTagResponse)
	err := c.cc.Invoke(ctx, FlowTagService_GetFlowTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowTagServiceClient) SearchFlowTag(ctx context.Context, in *SearchFlowTagRequest, opts ...grpc.CallOption) (*SearchFlowTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFlowTagResponse)
	err := c.cc.Invoke(ctx, FlowTagService_SearchFlowTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowTagServiceClient) CreateFlowTag(ctx context.Context, in *CreateFlowTagRequest, opts ...grpc.CallOption) (*CreateFlowTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlowTagResponse)
	err := c.cc.Invoke(ctx, FlowTagService_CreateFlowTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowTagServiceClient) UpdateFlowTag(ctx context.Context, in *UpdateFlowTagRequest, opts ...grpc.CallOption) (*UpdateFlowTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFlowTagResponse)
	err := c.cc.Invoke(ctx, FlowTagService_UpdateFlowTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowTagServiceClient) DeleteFlowTag(ctx context.Context, in *DeleteFlowTagRequest, opts ...grpc.CallOption) (*DeleteFlowTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFlowTagResponse)
	err := c.cc.Invoke(ctx, FlowTagService_DeleteFlowTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowTagServiceServer is the server API for FlowTagService service.
// All implementations should embed UnimplementedFlowTagServiceServer
// for forward compatibility.
type FlowTagServiceServer interface {
	GetFlowTag(context.Context, *GetFlowTagRequest) (*GetFlowTagResponse, error)
	SearchFlowTag(context.Context, *SearchFlowTagRequest) (*SearchFlowTagResponse, error)
	CreateFlowTag(context.Context, *CreateFlowTagRequest) (*CreateFlowTagResponse, error)
	UpdateFlowTag(context.Context, *UpdateFlowTagRequest) (*UpdateFlowTagResponse, error)
	DeleteFlowTag(context.Context, *DeleteFlowTagRequest) (*DeleteFlowTagResponse, error)
}

// UnimplementedFlowTagServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlowTagServiceServer struct{}

func (UnimplementedFlowTagServiceServer) GetFlowTag(context.Context, *GetFlowTagRequest) (*GetFlowTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowTag not implemented")
}
func (UnimplementedFlowTagServiceServer) SearchFlowTag(context.Context, *SearchFlowTagRequest) (*SearchFlowTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlowTag not implemented")
}
func (UnimplementedFlowTagServiceServer) CreateFlowTag(context.Context, *CreateFlowTagRequest) (*CreateFlowTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlowTag not implemented")
}
func (UnimplementedFlowTagServiceServer) UpdateFlowTag(context.Context, *UpdateFlowTagRequest) (*UpdateFlowTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowTag not implemented")
}
func (UnimplementedFlowTagServiceServer) DeleteFlowTag(context.Context, *DeleteFlowTagRequest) (*DeleteFlowTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlowTag not implemented")
}
func (UnimplementedFlowTagServiceServer) testEmbeddedByValue() {}

// UnsafeFlowTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowTagServiceServer will
// result in compilation errors.
type UnsafeFlowTagServiceServer interface {
	mustEmbedUnimplementedFlowTagServiceServer()
}

func RegisterFlowTagServiceServer(s grpc.ServiceRegistrar, srv FlowTagServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlowTagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlowTagService_ServiceDesc, srv)
}

func _FlowTagService_GetFlowTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowTagServiceServer).GetFlowTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowTagService_GetFlowTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowTagServiceServer).GetFlowTag(ctx, req.(*GetFlowTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowTagService_SearchFlowTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFlowTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowTagServiceServer).SearchFlowTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowTagService_SearchFlowTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowTagServiceServer).SearchFlowTag(ctx, req.(*SearchFlowTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowTagService_CreateFlowTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlowTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowTagServiceServer).CreateFlowTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowTagService_CreateFlowTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowTagServiceServer).CreateFlowTag(ctx, req.(*CreateFlowTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowTagService_UpdateFlowTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlowTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowTagServiceServer).UpdateFlowTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowTagService_UpdateFlowTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowTagServiceServer).UpdateFlowTag(ctx, req.(*UpdateFlowTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowTagService_DeleteFlowTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlowTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowTagServiceServer).DeleteFlowTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowTagService_DeleteFlowTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowTagServiceServer).DeleteFlowTag(ctx, req.(*DeleteFlowTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowTagService_ServiceDesc is the grpc.ServiceDesc for FlowTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.flow_tag.v202404alpha1.FlowTagService",
	HandlerType: (*FlowTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlowTag",
			Handler:    _FlowTagService_GetFlowTag_Handler,
		},
		{
			MethodName: "SearchFlowTag",
			Handler:    _FlowTagService_SearchFlowTag_Handler,
		},
		{
			MethodName: "CreateFlowTag",
			Handler:    _FlowTagService_CreateFlowTag_Handler,
		},
		{
			MethodName: "UpdateFlowTag",
			Handler:    _FlowTagService_UpdateFlowTag_Handler,
		},
		{
			MethodName: "DeleteFlowTag",
			Handler:    _FlowTagService_DeleteFlowTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/flow_tag/v202404alpha1/flow_tag.proto",
}
