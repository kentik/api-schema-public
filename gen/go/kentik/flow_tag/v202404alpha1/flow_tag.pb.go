// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/flow_tag/v202404alpha1/flow_tag.proto

package flow_tag

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type ModelType int32

const (
	// Invalid value
	ModelType_MODEL_TYPE_UNSPECIFIED ModelType = 0
	// Not used
	ModelType_MODEL_TYPE_POPULATORS ModelType = 1
	// Default flow tag type
	ModelType_MODEL_TYPE_TAGS ModelType = 2
	// Not used
	ModelType_MODEL_TYPE_IP_ADDRESSES ModelType = 3
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "MODEL_TYPE_UNSPECIFIED",
		1: "MODEL_TYPE_POPULATORS",
		2: "MODEL_TYPE_TAGS",
		3: "MODEL_TYPE_IP_ADDRESSES",
	}
	ModelType_value = map[string]int32{
		"MODEL_TYPE_UNSPECIFIED":  0,
		"MODEL_TYPE_POPULATORS":   1,
		"MODEL_TYPE_TAGS":         2,
		"MODEL_TYPE_IP_ADDRESSES": 3,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes[0].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes[0]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{0}
}

// {{.Name}}
type LookupField int32

const (
	// Invalid value
	LookupField_LOOKUP_FIELD_UNSPECIFIED LookupField = 0
	// Lookup by name of tag
	LookupField_LOOKUP_FIELD_VALUE LookupField = 1
)

// Enum value maps for LookupField.
var (
	LookupField_name = map[int32]string{
		0: "LOOKUP_FIELD_UNSPECIFIED",
		1: "LOOKUP_FIELD_VALUE",
	}
	LookupField_value = map[string]int32{
		"LOOKUP_FIELD_UNSPECIFIED": 0,
		"LOOKUP_FIELD_VALUE":       1,
	}
)

func (x LookupField) Enum() *LookupField {
	p := new(LookupField)
	*p = x
	return p
}

func (x LookupField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookupField) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes[1].Descriptor()
}

func (LookupField) Type() protoreflect.EnumType {
	return &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes[1]
}

func (x LookupField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookupField.Descriptor instead.
func (LookupField) EnumDescriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{1}
}

// {{.Name}}
type OrderDirection int32

const (
	// Invalid value
	OrderDirection_ORDER_DIRECTION_UNSPECIFIED OrderDirection = 0
	// Ascending sort order
	OrderDirection_ORDER_DIRECTION_ASC OrderDirection = 1
	// Descending sort order
	OrderDirection_ORDER_DIRECTION_DESC OrderDirection = 2
)

// Enum value maps for OrderDirection.
var (
	OrderDirection_name = map[int32]string{
		0: "ORDER_DIRECTION_UNSPECIFIED",
		1: "ORDER_DIRECTION_ASC",
		2: "ORDER_DIRECTION_DESC",
	}
	OrderDirection_value = map[string]int32{
		"ORDER_DIRECTION_UNSPECIFIED": 0,
		"ORDER_DIRECTION_ASC":         1,
		"ORDER_DIRECTION_DESC":        2,
	}
)

func (x OrderDirection) Enum() *OrderDirection {
	p := new(OrderDirection)
	*p = x
	return p
}

func (x OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes[2].Descriptor()
}

func (OrderDirection) Type() protoreflect.EnumType {
	return &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes[2]
}

func (x OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDirection.Descriptor instead.
func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{2}
}

// {{.Name}}
type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of model (default Tags)
	Type ModelType `protobuf:"varint,1,opt,name=type,proto3,enum=kentik.flow_tag.v202404alpha1.ModelType" json:"type,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{0}
}

func (x *Model) GetType() ModelType {
	if x != nil {
		return x.Type
	}
	return ModelType_MODEL_TYPE_UNSPECIFIED
}

// {{.Name}}
type OrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sort by field
	Field LookupField `protobuf:"varint,1,opt,name=field,proto3,enum=kentik.flow_tag.v202404alpha1.LookupField" json:"field,omitempty"`
	// Sort by direction
	Direction OrderDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=kentik.flow_tag.v202404alpha1.OrderDirection" json:"direction,omitempty"`
}

func (x *OrderField) Reset() {
	*x = OrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderField) ProtoMessage() {}

func (x *OrderField) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderField.ProtoReflect.Descriptor instead.
func (*OrderField) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{1}
}

func (x *OrderField) GetField() LookupField {
	if x != nil {
		return x.Field
	}
	return LookupField_LOOKUP_FIELD_UNSPECIFIED
}

func (x *OrderField) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

// {{.Name}}
type FlowTagSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit the number of rows to fetch
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// The number rows to skip before returning
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// List of lookup fields
	LookupFields []LookupField `protobuf:"varint,3,rep,packed,name=lookup_fields,json=lookupFields,proto3,enum=kentik.flow_tag.v202404alpha1.LookupField" json:"lookup_fields,omitempty"`
	// List of lookup values
	LookupValues []string `protobuf:"bytes,4,rep,name=lookup_values,json=lookupValues,proto3" json:"lookup_values,omitempty"`
	// Sort order
	OrderBy []*OrderField `protobuf:"bytes,5,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Limit the number of record to return for nested fields
	FieldLimit int32 `protobuf:"varint,6,opt,name=field_limit,json=fieldLimit,proto3" json:"field_limit,omitempty"`
}

func (x *FlowTagSearch) Reset() {
	*x = FlowTagSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTagSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTagSearch) ProtoMessage() {}

func (x *FlowTagSearch) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTagSearch.ProtoReflect.Descriptor instead.
func (*FlowTagSearch) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{2}
}

func (x *FlowTagSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FlowTagSearch) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FlowTagSearch) GetLookupFields() []LookupField {
	if x != nil {
		return x.LookupFields
	}
	return nil
}

func (x *FlowTagSearch) GetLookupValues() []string {
	if x != nil {
		return x.LookupValues
	}
	return nil
}

func (x *FlowTagSearch) GetOrderBy() []*OrderField {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *FlowTagSearch) GetFieldLimit() int32 {
	if x != nil {
		return x.FieldLimit
	}
	return 0
}

// {{.Name}}
type AddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of returning mac or ip address
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Total number of addresses available
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *AddressInfo) Reset() {
	*x = AddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressInfo) ProtoMessage() {}

func (x *AddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressInfo.ProtoReflect.Descriptor instead.
func (*AddressInfo) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{3}
}

func (x *AddressInfo) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AddressInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// {{.Name}}
type FlowTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	EditedBy      string                 `protobuf:"bytes,4,opt,name=edited_by,json=editedBy,proto3" json:"edited_by,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,25,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=edate,proto3" json:"edate,omitempty"`
	Ip            *AddressInfo           `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          []string               `protobuf:"bytes,8,rep,name=port,proto3" json:"port,omitempty"`
	TcpFlags      uint32                 `protobuf:"varint,9,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
	Protocol      []uint32               `protobuf:"varint,10,rep,packed,name=protocol,proto3" json:"protocol,omitempty"`
	DeviceName    []string               `protobuf:"bytes,11,rep,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceType    []string               `protobuf:"bytes,12,rep,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Site          []string               `protobuf:"bytes,13,rep,name=site,proto3" json:"site,omitempty"`
	InterfaceName []string               `protobuf:"bytes,14,rep,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Asn           []string               `protobuf:"bytes,15,rep,name=asn,proto3" json:"asn,omitempty"`
	LasthopAsName []string               `protobuf:"bytes,16,rep,name=lasthop_as_name,json=lasthopAsName,proto3" json:"lasthop_as_name,omitempty"`
	NexthopAsn    []string               `protobuf:"bytes,17,rep,name=nexthop_asn,json=nexthopAsn,proto3" json:"nexthop_asn,omitempty"`
	NexthopAsName []string               `protobuf:"bytes,18,rep,name=nexthop_as_name,json=nexthopAsName,proto3" json:"nexthop_as_name,omitempty"`
	Nexthop       []string               `protobuf:"bytes,19,rep,name=nexthop,proto3" json:"nexthop,omitempty"`
	BgpAspath     []string               `protobuf:"bytes,20,rep,name=bgp_aspath,json=bgpAspath,proto3" json:"bgp_aspath,omitempty"`
	BgpCommunity  []string               `protobuf:"bytes,21,rep,name=bgp_community,json=bgpCommunity,proto3" json:"bgp_community,omitempty"`
	Mac           *AddressInfo           `protobuf:"bytes,22,opt,name=mac,proto3" json:"mac,omitempty"`
	Country       []string               `protobuf:"bytes,23,rep,name=country,proto3" json:"country,omitempty"`
	Vlans         []string               `protobuf:"bytes,24,rep,name=vlans,proto3" json:"vlans,omitempty"`
}

func (x *FlowTag) Reset() {
	*x = FlowTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTag) ProtoMessage() {}

func (x *FlowTag) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTag.ProtoReflect.Descriptor instead.
func (*FlowTag) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{4}
}

func (x *FlowTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowTag) GetEditedBy() string {
	if x != nil {
		return x.EditedBy
	}
	return ""
}

func (x *FlowTag) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *FlowTag) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *FlowTag) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *FlowTag) GetIp() *AddressInfo {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *FlowTag) GetPort() []string {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *FlowTag) GetTcpFlags() uint32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (x *FlowTag) GetProtocol() []uint32 {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *FlowTag) GetDeviceName() []string {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *FlowTag) GetDeviceType() []string {
	if x != nil {
		return x.DeviceType
	}
	return nil
}

func (x *FlowTag) GetSite() []string {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *FlowTag) GetInterfaceName() []string {
	if x != nil {
		return x.InterfaceName
	}
	return nil
}

func (x *FlowTag) GetAsn() []string {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *FlowTag) GetLasthopAsName() []string {
	if x != nil {
		return x.LasthopAsName
	}
	return nil
}

func (x *FlowTag) GetNexthopAsn() []string {
	if x != nil {
		return x.NexthopAsn
	}
	return nil
}

func (x *FlowTag) GetNexthopAsName() []string {
	if x != nil {
		return x.NexthopAsName
	}
	return nil
}

func (x *FlowTag) GetNexthop() []string {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *FlowTag) GetBgpAspath() []string {
	if x != nil {
		return x.BgpAspath
	}
	return nil
}

func (x *FlowTag) GetBgpCommunity() []string {
	if x != nil {
		return x.BgpCommunity
	}
	return nil
}

func (x *FlowTag) GetMac() *AddressInfo {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *FlowTag) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *FlowTag) GetVlans() []string {
	if x != nil {
		return x.Vlans
	}
	return nil
}

// {{.Name}}
type GetFlowTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFlowTagRequest) Reset() {
	*x = GetFlowTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowTagRequest) ProtoMessage() {}

func (x *GetFlowTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowTagRequest.ProtoReflect.Descriptor instead.
func (*GetFlowTagRequest) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{5}
}

func (x *GetFlowTagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetFlowTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowTag *FlowTag `protobuf:"bytes,1,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
}

func (x *GetFlowTagResponse) Reset() {
	*x = GetFlowTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlowTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlowTagResponse) ProtoMessage() {}

func (x *GetFlowTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlowTagResponse.ProtoReflect.Descriptor instead.
func (*GetFlowTagResponse) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{6}
}

func (x *GetFlowTagResponse) GetFlowTag() *FlowTag {
	if x != nil {
		return x.FlowTag
	}
	return nil
}

// {{.Name}}
type SearchFlowTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search *FlowTagSearch `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *SearchFlowTagRequest) Reset() {
	*x = SearchFlowTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFlowTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFlowTagRequest) ProtoMessage() {}

func (x *SearchFlowTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFlowTagRequest.ProtoReflect.Descriptor instead.
func (*SearchFlowTagRequest) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{7}
}

func (x *SearchFlowTagRequest) GetSearch() *FlowTagSearch {
	if x != nil {
		return x.Search
	}
	return nil
}

// {{.Name}}
type SearchFlowTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowTags     []*FlowTag `protobuf:"bytes,1,rep,name=flow_tags,json=flowTags,proto3" json:"flow_tags,omitempty"`
	TotalCount   uint32     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	InvalidCount uint32     `protobuf:"varint,3,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *SearchFlowTagResponse) Reset() {
	*x = SearchFlowTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFlowTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFlowTagResponse) ProtoMessage() {}

func (x *SearchFlowTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFlowTagResponse.ProtoReflect.Descriptor instead.
func (*SearchFlowTagResponse) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{8}
}

func (x *SearchFlowTagResponse) GetFlowTags() []*FlowTag {
	if x != nil {
		return x.FlowTags
	}
	return nil
}

func (x *SearchFlowTagResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *SearchFlowTagResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type CreateFlowTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowTag *FlowTag `protobuf:"bytes,1,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
}

func (x *CreateFlowTagRequest) Reset() {
	*x = CreateFlowTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowTagRequest) ProtoMessage() {}

func (x *CreateFlowTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowTagRequest.ProtoReflect.Descriptor instead.
func (*CreateFlowTagRequest) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{9}
}

func (x *CreateFlowTagRequest) GetFlowTag() *FlowTag {
	if x != nil {
		return x.FlowTag
	}
	return nil
}

// {{.Name}}
type CreateFlowTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowTag *FlowTag `protobuf:"bytes,1,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
}

func (x *CreateFlowTagResponse) Reset() {
	*x = CreateFlowTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlowTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlowTagResponse) ProtoMessage() {}

func (x *CreateFlowTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlowTagResponse.ProtoReflect.Descriptor instead.
func (*CreateFlowTagResponse) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{10}
}

func (x *CreateFlowTagResponse) GetFlowTag() *FlowTag {
	if x != nil {
		return x.FlowTag
	}
	return nil
}

// {{.Name}}
type UpdateFlowTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowTag *FlowTag `protobuf:"bytes,1,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
}

func (x *UpdateFlowTagRequest) Reset() {
	*x = UpdateFlowTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowTagRequest) ProtoMessage() {}

func (x *UpdateFlowTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowTagRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlowTagRequest) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateFlowTagRequest) GetFlowTag() *FlowTag {
	if x != nil {
		return x.FlowTag
	}
	return nil
}

// {{.Name}}
type UpdateFlowTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowTag *FlowTag `protobuf:"bytes,1,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
}

func (x *UpdateFlowTagResponse) Reset() {
	*x = UpdateFlowTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowTagResponse) ProtoMessage() {}

func (x *UpdateFlowTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowTagResponse.ProtoReflect.Descriptor instead.
func (*UpdateFlowTagResponse) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateFlowTagResponse) GetFlowTag() *FlowTag {
	if x != nil {
		return x.FlowTag
	}
	return nil
}

// {{.Name}}
type DeleteFlowTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFlowTagRequest) Reset() {
	*x = DeleteFlowTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowTagRequest) ProtoMessage() {}

func (x *DeleteFlowTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteFlowTagRequest) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteFlowTagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteFlowTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFlowTagResponse) Reset() {
	*x = DeleteFlowTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFlowTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFlowTagResponse) ProtoMessage() {}

func (x *DeleteFlowTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFlowTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteFlowTagResponse) Descriptor() ([]byte, []int) {
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP(), []int{14}
}

var File_kentik_flow_tag_v202404alpha1_flow_tag_proto protoreflect.FileDescriptor

var file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61,
	0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34,
	0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x4c, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc7, 0x10,
	0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x4a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x33, 0x32, 0x31, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x3f, 0x32, 0x3d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x74, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x20,
	0x77, 0x68, 0x6f, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x61, 0x67, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0x55, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x61, 0x67, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x62, 0x0a, 0x05, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x30, 0x92, 0x41, 0x29, 0x32, 0x27, 0x44, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x74, 0x61, 0x67, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a,
	0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x35, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x44,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x61, 0x67, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c,
	0x61, 0x73, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2c,
	0x92, 0x41, 0x29, 0x32, 0x27, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x41, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d,
	0x92, 0x41, 0x2a, 0x32, 0x28, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x54, 0x43, 0x50,
	0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20,
	0x74, 0x61, 0x67, 0x52, 0x08, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4e, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20,
	0x74, 0x61, 0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x55, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f,
	0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x3d,
	0x53, 0x69, 0x74, 0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74,
	0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34,
	0x32, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77,
	0x20, 0x74, 0x61, 0x67, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75,
	0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x28, 0x41, 0x53, 0x4e, 0x29, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74,
	0x61, 0x67, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x77, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x68,
	0x6f, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x4f, 0x92, 0x41, 0x4c, 0x32, 0x4a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x68, 0x6f, 0x70, 0x27, 0x73, 0x20, 0x41, 0x75,
	0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
	0x28, 0x41, 0x53, 0x29, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61,
	0x67, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x71, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0x41, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x28, 0x41, 0x53, 0x4e, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x68, 0x6f, 0x70, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x41, 0x73, 0x6e, 0x12, 0x77, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x61,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41,
	0x4c, 0x32, 0x4a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x65, 0x78, 0x74, 0x20, 0x68, 0x6f, 0x70, 0x27, 0x73, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f,
	0x6d, 0x6f, 0x75, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x28, 0x41, 0x53, 0x29,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x32, 0x25, 0x4e, 0x65, 0x78, 0x74, 0x20, 0x68, 0x6f, 0x70, 0x20, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x12, 0x4c, 0x0a, 0x0a, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x73, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x42, 0x47, 0x50,
	0x20, 0x41, 0x53, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f,
	0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x09, 0x62, 0x67, 0x70, 0x41, 0x73, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x54, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x42, 0x47,
	0x50, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x0c, 0x62, 0x67, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x56, 0x4c,
	0x41, 0x4e, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67,
	0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x22, 0x5c, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x67, 0x22, 0x5a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x22,
	0x59, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x67, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x22, 0x5a, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x07, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x74, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0x03, 0x2a, 0x43, 0x0a,
	0x0b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x18,
	0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f,
	0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x01, 0x2a, 0x64, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x32, 0xcb, 0x0b, 0x0a, 0x0e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x95, 0x02, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x30, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa1, 0x01, 0x92, 0x41, 0x5f, 0x12, 0x1b, 0x47, 0x65, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20,
	0x74, 0x61, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x1a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x6c, 0x6f,
	0x77, 0x20, 0x74, 0x61, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x49, 0x44, 0x2e, 0x2a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x67, 0xf2, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xa4, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa7, 0x01, 0x92, 0x41, 0x6a, 0x12, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66,
	0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x39, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x2a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67,
	0xf2, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x61, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x12, 0x8f, 0x02, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x33, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x92, 0x41, 0x51, 0x12, 0x1e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0xf2, 0xd7,
	0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x02, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x33,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x92, 0x41, 0x51, 0x12,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74,
	0x61, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x2a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67,
	0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x61, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x1a, 0x29,
	0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30,
	0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x02, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x33,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x92, 0x41, 0x59, 0x12,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a,
	0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74,
	0x61, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x69, 0x64, 0x2e, 0x2a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61,
	0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x74, 0x61, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x2c, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0xea, 0xd7, 0x02, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x61, 0x67, 0x90, 0xd8, 0x02, 0x03, 0x42, 0xc9, 0x0c, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x61, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x92, 0x41, 0xf2, 0x0b,
	0x12, 0x8b, 0x0a, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x20, 0x54, 0x61, 0x67, 0x20, 0x41, 0x50,
	0x49, 0x12, 0xa4, 0x09, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54,
	0x68, 0x65, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x20, 0x54, 0x61, 0x67, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x20, 0x2a, 0x20, 0x49, 0x6e, 0x20,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x67, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f,
	0x6e, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x74, 0x61, 0x67,
	0x2e, 0x0a, 0x20, 0x2a, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x74, 0x61, 0x67, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x41, 0x4e, 0x44, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x20, 0x2a, 0x20, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x54, 0x61, 0x67, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20,
	0x61, 0x6e, 0x79, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x2d, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x62, 0x65, 0x20, 0x4f, 0x52, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x20, 0x2a, 0x20, 0x41, 0x20, 0x74,
	0x61, 0x67, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x61, 0x67, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x20, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x61,
	0x63, 0x68, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x2a, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x61, 0x63, 0x68,
	0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x2a, 0x20, 0x41, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x61, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x61, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x72, 0x63, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72,
	0x20, 0x64, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x20, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x4b, 0x44, 0x45, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x0a,
	0x20, 0x2a, 0x20, 0x54, 0x61, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x4b, 0x44, 0x45,
	0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x20, 0x54, 0x61, 0x67, 0x20, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x2e, 0x20, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x76, 0x61, 0x72, 0x79, 0x20,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x68, 0x6f, 0x77,
	0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x3b,
	0x20, 0x5b, 0x73, 0x65, 0x65, 0x20, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x54, 0x61, 0x67, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x30, 0x2f, 0x45, 0x62, 0x30, 0x32, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x45, 0x62, 0x30, 0x32,
	0x2d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x54,
	0x61, 0x67, 0x73, 0x29, 0x2e, 0x0a, 0x20, 0x2a, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x5b, 0x54, 0x61, 0x67, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x34, 0x2f, 0x43, 0x62, 0x30, 0x34, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x43, 0x62, 0x30,
	0x34, 0x2d, 0x54, 0x61, 0x67, 0x5f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x20, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32,
	0x0d, 0x76, 0x32, 0x30, 0x32, 0x34, 0x30, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2a, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a, 0x25, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x41, 0x62, 0x30, 0x39, 0x2e, 0x68, 0x74, 0x6d, 0x23,
	0x41, 0x62, 0x30, 0x39, 0x2d, 0x41, 0x50, 0x49, 0x73, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescOnce sync.Once
	file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescData = file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDesc
)

func file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescGZIP() []byte {
	file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescOnce.Do(func() {
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescData)
	})
	return file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDescData
}

var file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_kentik_flow_tag_v202404alpha1_flow_tag_proto_goTypes = []interface{}{
	(ModelType)(0),                // 0: kentik.flow_tag.v202404alpha1.ModelType
	(LookupField)(0),              // 1: kentik.flow_tag.v202404alpha1.LookupField
	(OrderDirection)(0),           // 2: kentik.flow_tag.v202404alpha1.OrderDirection
	(*Model)(nil),                 // 3: kentik.flow_tag.v202404alpha1.Model
	(*OrderField)(nil),            // 4: kentik.flow_tag.v202404alpha1.OrderField
	(*FlowTagSearch)(nil),         // 5: kentik.flow_tag.v202404alpha1.FlowTagSearch
	(*AddressInfo)(nil),           // 6: kentik.flow_tag.v202404alpha1.AddressInfo
	(*FlowTag)(nil),               // 7: kentik.flow_tag.v202404alpha1.FlowTag
	(*GetFlowTagRequest)(nil),     // 8: kentik.flow_tag.v202404alpha1.GetFlowTagRequest
	(*GetFlowTagResponse)(nil),    // 9: kentik.flow_tag.v202404alpha1.GetFlowTagResponse
	(*SearchFlowTagRequest)(nil),  // 10: kentik.flow_tag.v202404alpha1.SearchFlowTagRequest
	(*SearchFlowTagResponse)(nil), // 11: kentik.flow_tag.v202404alpha1.SearchFlowTagResponse
	(*CreateFlowTagRequest)(nil),  // 12: kentik.flow_tag.v202404alpha1.CreateFlowTagRequest
	(*CreateFlowTagResponse)(nil), // 13: kentik.flow_tag.v202404alpha1.CreateFlowTagResponse
	(*UpdateFlowTagRequest)(nil),  // 14: kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest
	(*UpdateFlowTagResponse)(nil), // 15: kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse
	(*DeleteFlowTagRequest)(nil),  // 16: kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest
	(*DeleteFlowTagResponse)(nil), // 17: kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_kentik_flow_tag_v202404alpha1_flow_tag_proto_depIdxs = []int32{
	0,  // 0: kentik.flow_tag.v202404alpha1.Model.type:type_name -> kentik.flow_tag.v202404alpha1.ModelType
	1,  // 1: kentik.flow_tag.v202404alpha1.OrderField.field:type_name -> kentik.flow_tag.v202404alpha1.LookupField
	2,  // 2: kentik.flow_tag.v202404alpha1.OrderField.direction:type_name -> kentik.flow_tag.v202404alpha1.OrderDirection
	1,  // 3: kentik.flow_tag.v202404alpha1.FlowTagSearch.lookup_fields:type_name -> kentik.flow_tag.v202404alpha1.LookupField
	4,  // 4: kentik.flow_tag.v202404alpha1.FlowTagSearch.order_by:type_name -> kentik.flow_tag.v202404alpha1.OrderField
	18, // 5: kentik.flow_tag.v202404alpha1.FlowTag.cdate:type_name -> google.protobuf.Timestamp
	18, // 6: kentik.flow_tag.v202404alpha1.FlowTag.edate:type_name -> google.protobuf.Timestamp
	6,  // 7: kentik.flow_tag.v202404alpha1.FlowTag.ip:type_name -> kentik.flow_tag.v202404alpha1.AddressInfo
	6,  // 8: kentik.flow_tag.v202404alpha1.FlowTag.mac:type_name -> kentik.flow_tag.v202404alpha1.AddressInfo
	7,  // 9: kentik.flow_tag.v202404alpha1.GetFlowTagResponse.flow_tag:type_name -> kentik.flow_tag.v202404alpha1.FlowTag
	5,  // 10: kentik.flow_tag.v202404alpha1.SearchFlowTagRequest.search:type_name -> kentik.flow_tag.v202404alpha1.FlowTagSearch
	7,  // 11: kentik.flow_tag.v202404alpha1.SearchFlowTagResponse.flow_tags:type_name -> kentik.flow_tag.v202404alpha1.FlowTag
	7,  // 12: kentik.flow_tag.v202404alpha1.CreateFlowTagRequest.flow_tag:type_name -> kentik.flow_tag.v202404alpha1.FlowTag
	7,  // 13: kentik.flow_tag.v202404alpha1.CreateFlowTagResponse.flow_tag:type_name -> kentik.flow_tag.v202404alpha1.FlowTag
	7,  // 14: kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest.flow_tag:type_name -> kentik.flow_tag.v202404alpha1.FlowTag
	7,  // 15: kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse.flow_tag:type_name -> kentik.flow_tag.v202404alpha1.FlowTag
	8,  // 16: kentik.flow_tag.v202404alpha1.FlowTagService.GetFlowTag:input_type -> kentik.flow_tag.v202404alpha1.GetFlowTagRequest
	10, // 17: kentik.flow_tag.v202404alpha1.FlowTagService.SearchFlowTag:input_type -> kentik.flow_tag.v202404alpha1.SearchFlowTagRequest
	12, // 18: kentik.flow_tag.v202404alpha1.FlowTagService.CreateFlowTag:input_type -> kentik.flow_tag.v202404alpha1.CreateFlowTagRequest
	14, // 19: kentik.flow_tag.v202404alpha1.FlowTagService.UpdateFlowTag:input_type -> kentik.flow_tag.v202404alpha1.UpdateFlowTagRequest
	16, // 20: kentik.flow_tag.v202404alpha1.FlowTagService.DeleteFlowTag:input_type -> kentik.flow_tag.v202404alpha1.DeleteFlowTagRequest
	9,  // 21: kentik.flow_tag.v202404alpha1.FlowTagService.GetFlowTag:output_type -> kentik.flow_tag.v202404alpha1.GetFlowTagResponse
	11, // 22: kentik.flow_tag.v202404alpha1.FlowTagService.SearchFlowTag:output_type -> kentik.flow_tag.v202404alpha1.SearchFlowTagResponse
	13, // 23: kentik.flow_tag.v202404alpha1.FlowTagService.CreateFlowTag:output_type -> kentik.flow_tag.v202404alpha1.CreateFlowTagResponse
	15, // 24: kentik.flow_tag.v202404alpha1.FlowTagService.UpdateFlowTag:output_type -> kentik.flow_tag.v202404alpha1.UpdateFlowTagResponse
	17, // 25: kentik.flow_tag.v202404alpha1.FlowTagService.DeleteFlowTag:output_type -> kentik.flow_tag.v202404alpha1.DeleteFlowTagResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_kentik_flow_tag_v202404alpha1_flow_tag_proto_init() }
func file_kentik_flow_tag_v202404alpha1_flow_tag_proto_init() {
	if File_kentik_flow_tag_v202404alpha1_flow_tag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTagSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlowTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFlowTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFlowTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlowTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFlowTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_flow_tag_v202404alpha1_flow_tag_proto_goTypes,
		DependencyIndexes: file_kentik_flow_tag_v202404alpha1_flow_tag_proto_depIdxs,
		EnumInfos:         file_kentik_flow_tag_v202404alpha1_flow_tag_proto_enumTypes,
		MessageInfos:      file_kentik_flow_tag_v202404alpha1_flow_tag_proto_msgTypes,
	}.Build()
	File_kentik_flow_tag_v202404alpha1_flow_tag_proto = out.File
	file_kentik_flow_tag_v202404alpha1_flow_tag_proto_rawDesc = nil
	file_kentik_flow_tag_v202404alpha1_flow_tag_proto_goTypes = nil
	file_kentik_flow_tag_v202404alpha1_flow_tag_proto_depIdxs = nil
}
