// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/bgp_monitoring/v202205beta1/bgp_monitoring.proto

package bgp_monitoring

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	v202202 "github.com/kentik/api-schema-public/gen/go/kentik/synthetics/v202202"
	pb "github.com/kentik/ktrac/pkg/route/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// models
// -------------------------------------------------------
type BgpMonitorStatus int32

const (
	BgpMonitorStatus_BGP_MONITOR_STATUS_UNSPECIFIED BgpMonitorStatus = 0 // Invalid value.
	BgpMonitorStatus_BGP_MONITOR_STATUS_ACTIVE      BgpMonitorStatus = 1 // Monitor is active.
	BgpMonitorStatus_BGP_MONITOR_STATUS_PAUSED      BgpMonitorStatus = 2 // Monitor is paused.
	BgpMonitorStatus_BGP_MONITOR_STATUS_DELETED     BgpMonitorStatus = 3 // Monitor is deleted. Not settable via SetMonitorStatus.
)

// Enum value maps for BgpMonitorStatus.
var (
	BgpMonitorStatus_name = map[int32]string{
		0: "BGP_MONITOR_STATUS_UNSPECIFIED",
		1: "BGP_MONITOR_STATUS_ACTIVE",
		2: "BGP_MONITOR_STATUS_PAUSED",
		3: "BGP_MONITOR_STATUS_DELETED",
	}
	BgpMonitorStatus_value = map[string]int32{
		"BGP_MONITOR_STATUS_UNSPECIFIED": 0,
		"BGP_MONITOR_STATUS_ACTIVE":      1,
		"BGP_MONITOR_STATUS_PAUSED":      2,
		"BGP_MONITOR_STATUS_DELETED":     3,
	}
)

func (x BgpMonitorStatus) Enum() *BgpMonitorStatus {
	p := new(BgpMonitorStatus)
	*p = x
	return p
}

func (x BgpMonitorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpMonitorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_enumTypes[0].Descriptor()
}

func (BgpMonitorStatus) Type() protoreflect.EnumType {
	return &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_enumTypes[0]
}

func (x BgpMonitorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpMonitorStatus.Descriptor instead.
func (BgpMonitorStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{0}
}

// === BGP monitor results ===
type BgpMetricType int32

const (
	BgpMetricType_BGP_METRIC_TYPE_UNSPECIFIED  BgpMetricType = 0 // Invalid value.
	BgpMetricType_BGP_METRIC_TYPE_REACHABILITY BgpMetricType = 1
	BgpMetricType_BGP_METRIC_TYPE_PATH_CHANGES BgpMetricType = 2
)

// Enum value maps for BgpMetricType.
var (
	BgpMetricType_name = map[int32]string{
		0: "BGP_METRIC_TYPE_UNSPECIFIED",
		1: "BGP_METRIC_TYPE_REACHABILITY",
		2: "BGP_METRIC_TYPE_PATH_CHANGES",
	}
	BgpMetricType_value = map[string]int32{
		"BGP_METRIC_TYPE_UNSPECIFIED":  0,
		"BGP_METRIC_TYPE_REACHABILITY": 1,
		"BGP_METRIC_TYPE_PATH_CHANGES": 2,
	}
)

func (x BgpMetricType) Enum() *BgpMetricType {
	p := new(BgpMetricType)
	*p = x
	return p
}

func (x BgpMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_enumTypes[1].Descriptor()
}

func (BgpMetricType) Type() protoreflect.EnumType {
	return &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_enumTypes[1]
}

func (x BgpMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpMetricType.Descriptor instead.
func (BgpMetricType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{1}
}

// === BGP monitor config and status ===
type Nlri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Afi  pb.Afi  `protobuf:"varint,1,opt,name=afi,proto3,enum=kentik.ktrac.route.v202104.Afi" json:"afi,omitempty"`
	Safi pb.Safi `protobuf:"varint,2,opt,name=safi,proto3,enum=kentik.ktrac.route.v202104.Safi" json:"safi,omitempty"`
	// Types that are assignable to Type:
	//	*Nlri_Prefix
	Type isNlri_Type `protobuf_oneof:"type"`
}

func (x *Nlri) Reset() {
	*x = Nlri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nlri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nlri) ProtoMessage() {}

func (x *Nlri) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nlri.ProtoReflect.Descriptor instead.
func (*Nlri) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{0}
}

func (x *Nlri) GetAfi() pb.Afi {
	if x != nil {
		return x.Afi
	}
	return pb.Afi_AFI_UNSPECIFIED
}

func (x *Nlri) GetSafi() pb.Safi {
	if x != nil {
		return x.Safi
	}
	return pb.Safi_SAFI_UNSPECIFIED
}

func (m *Nlri) GetType() isNlri_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Nlri) GetPrefix() string {
	if x, ok := x.GetType().(*Nlri_Prefix); ok {
		return x.Prefix
	}
	return ""
}

type isNlri_Type interface {
	isNlri_Type()
}

type Nlri_Prefix struct {
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof"`
}

func (*Nlri_Prefix) isNlri_Type() {}

type BgpHealthSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReachabilityWarning  float32                     `protobuf:"fixed32,1,opt,name=reachability_warning,json=reachabilityWarning,proto3" json:"reachability_warning,omitempty"`
	ReachabilityCritical float32                     `protobuf:"fixed32,2,opt,name=reachability_critical,json=reachabilityCritical,proto3" json:"reachability_critical,omitempty"`
	Activation           *v202202.ActivationSettings `protobuf:"bytes,8,opt,name=activation,proto3" json:"activation,omitempty"`
}

func (x *BgpHealthSettings) Reset() {
	*x = BgpHealthSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpHealthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpHealthSettings) ProtoMessage() {}

func (x *BgpHealthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpHealthSettings.ProtoReflect.Descriptor instead.
func (*BgpHealthSettings) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{1}
}

func (x *BgpHealthSettings) GetReachabilityWarning() float32 {
	if x != nil {
		return x.ReachabilityWarning
	}
	return 0
}

func (x *BgpHealthSettings) GetReachabilityCritical() float32 {
	if x != nil {
		return x.ReachabilityCritical
	}
	return 0
}

func (x *BgpHealthSettings) GetActivation() *v202202.ActivationSettings {
	if x != nil {
		return x.Activation
	}
	return nil
}

type BgpMonitorSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedAsns            []uint32           `protobuf:"varint,1,rep,packed,name=allowed_asns,json=allowedAsns,proto3" json:"allowed_asns,omitempty"`
	Targets                []*Nlri            `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	CheckRpki              bool               `protobuf:"varint,3,opt,name=check_rpki,json=checkRpki,proto3" json:"check_rpki,omitempty"`
	IncludeCoveredPrefixes bool               `protobuf:"varint,4,opt,name=include_covered_prefixes,json=includeCoveredPrefixes,proto3" json:"include_covered_prefixes,omitempty"`
	HealthSettings         *BgpHealthSettings `protobuf:"bytes,5,opt,name=health_settings,json=healthSettings,proto3" json:"health_settings,omitempty"`
	NotificationChannels   []string           `protobuf:"bytes,6,rep,name=notification_channels,json=notificationChannels,proto3" json:"notification_channels,omitempty"`
}

func (x *BgpMonitorSettings) Reset() {
	*x = BgpMonitorSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpMonitorSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMonitorSettings) ProtoMessage() {}

func (x *BgpMonitorSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMonitorSettings.ProtoReflect.Descriptor instead.
func (*BgpMonitorSettings) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{2}
}

func (x *BgpMonitorSettings) GetAllowedAsns() []uint32 {
	if x != nil {
		return x.AllowedAsns
	}
	return nil
}

func (x *BgpMonitorSettings) GetTargets() []*Nlri {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *BgpMonitorSettings) GetCheckRpki() bool {
	if x != nil {
		return x.CheckRpki
	}
	return false
}

func (x *BgpMonitorSettings) GetIncludeCoveredPrefixes() bool {
	if x != nil {
		return x.IncludeCoveredPrefixes
	}
	return false
}

func (x *BgpMonitorSettings) GetHealthSettings() *BgpHealthSettings {
	if x != nil {
		return x.HealthSettings
	}
	return nil
}

func (x *BgpMonitorSettings) GetNotificationChannels() []string {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

type BgpMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status        BgpMonitorStatus       `protobuf:"varint,3,opt,name=status,proto3,enum=kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus" json:"status,omitempty"`
	Settings      *BgpMonitorSettings    `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=edate,proto3" json:"edate,omitempty"`
	CreatedBy     *v202202.UserInfo      `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastUpdatedBy *v202202.UserInfo      `protobuf:"bytes,8,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	Labels        []string               `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *BgpMonitor) Reset() {
	*x = BgpMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMonitor) ProtoMessage() {}

func (x *BgpMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMonitor.ProtoReflect.Descriptor instead.
func (*BgpMonitor) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{3}
}

func (x *BgpMonitor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BgpMonitor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpMonitor) GetStatus() BgpMonitorStatus {
	if x != nil {
		return x.Status
	}
	return BgpMonitorStatus_BGP_MONITOR_STATUS_UNSPECIFIED
}

func (x *BgpMonitor) GetSettings() *BgpMonitorSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *BgpMonitor) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *BgpMonitor) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *BgpMonitor) GetCreatedBy() *v202202.UserInfo {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *BgpMonitor) GetLastUpdatedBy() *v202202.UserInfo {
	if x != nil {
		return x.LastUpdatedBy
	}
	return nil
}

func (x *BgpMonitor) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nlri         *Nlri            `protobuf:"bytes,1,opt,name=nlri,proto3" json:"nlri,omitempty"`
	OriginAsn    uint32           `protobuf:"varint,2,opt,name=origin_asn,json=originAsn,proto3" json:"origin_asn,omitempty"`
	AsPath       []string         `protobuf:"bytes,3,rep,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	VantagePoint *pb.VantagePoint `protobuf:"bytes,4,opt,name=vantage_point,json=vantagePoint,proto3" json:"vantage_point,omitempty"`
	RpkiStatus   pb.RpkiStatus    `protobuf:"varint,5,opt,name=rpki_status,json=rpkiStatus,proto3,enum=kentik.ktrac.route.v202104.RpkiStatus" json:"rpki_status,omitempty"`
	Nexthop      string           `protobuf:"bytes,6,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
}

func (x *RouteInfo) Reset() {
	*x = RouteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInfo) ProtoMessage() {}

func (x *RouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInfo.ProtoReflect.Descriptor instead.
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{4}
}

func (x *RouteInfo) GetNlri() *Nlri {
	if x != nil {
		return x.Nlri
	}
	return nil
}

func (x *RouteInfo) GetOriginAsn() uint32 {
	if x != nil {
		return x.OriginAsn
	}
	return 0
}

func (x *RouteInfo) GetAsPath() []string {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *RouteInfo) GetVantagePoint() *pb.VantagePoint {
	if x != nil {
		return x.VantagePoint
	}
	return nil
}

func (x *RouteInfo) GetRpkiStatus() pb.RpkiStatus {
	if x != nil {
		return x.RpkiStatus
	}
	return pb.RpkiStatus_RPKI_STATUS_UNSPECIFIED
}

func (x *RouteInfo) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

type BgpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nlri      *Nlri                  `protobuf:"bytes,2,opt,name=nlri,proto3" json:"nlri,omitempty"`
	// Types that are assignable to Type:
	//	*BgpMetric_Reachability
	//	*BgpMetric_PathChanges
	Type isBgpMetric_Type `protobuf_oneof:"type"`
}

func (x *BgpMetric) Reset() {
	*x = BgpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMetric) ProtoMessage() {}

func (x *BgpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMetric.ProtoReflect.Descriptor instead.
func (*BgpMetric) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{5}
}

func (x *BgpMetric) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BgpMetric) GetNlri() *Nlri {
	if x != nil {
		return x.Nlri
	}
	return nil
}

func (m *BgpMetric) GetType() isBgpMetric_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *BgpMetric) GetReachability() float32 {
	if x, ok := x.GetType().(*BgpMetric_Reachability); ok {
		return x.Reachability
	}
	return 0
}

func (x *BgpMetric) GetPathChanges() uint32 {
	if x, ok := x.GetType().(*BgpMetric_PathChanges); ok {
		return x.PathChanges
	}
	return 0
}

type isBgpMetric_Type interface {
	isBgpMetric_Type()
}

type BgpMetric_Reachability struct {
	Reachability float32 `protobuf:"fixed32,3,opt,name=reachability,proto3,oneof"` // percentage of vantage points reporting the prefix reachable
}

type BgpMetric_PathChanges struct {
	PathChanges uint32 `protobuf:"varint,5,opt,name=path_changes,json=pathChanges,proto3,oneof"` // number of AS path changes for the prefix across all vantage points in the querried time period
}

func (*BgpMetric_Reachability) isBgpMetric_Type() {}

func (*BgpMetric_PathChanges) isBgpMetric_Type() {}

// Admin Service
type ListMonitorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMonitorsRequest) Reset() {
	*x = ListMonitorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMonitorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMonitorsRequest) ProtoMessage() {}

func (x *ListMonitorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMonitorsRequest.ProtoReflect.Descriptor instead.
func (*ListMonitorsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{6}
}

type ListMonitorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitors     []*BgpMonitor `protobuf:"bytes,1,rep,name=monitors,proto3" json:"monitors,omitempty"`
	InvalidCount uint32        `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListMonitorsResponse) Reset() {
	*x = ListMonitorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMonitorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMonitorsResponse) ProtoMessage() {}

func (x *ListMonitorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMonitorsResponse.ProtoReflect.Descriptor instead.
func (*ListMonitorsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{7}
}

func (x *ListMonitorsResponse) GetMonitors() []*BgpMonitor {
	if x != nil {
		return x.Monitors
	}
	return nil
}

func (x *ListMonitorsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

type CreateMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor *BgpMonitor `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
}

func (x *CreateMonitorRequest) Reset() {
	*x = CreateMonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorRequest) ProtoMessage() {}

func (x *CreateMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorRequest.ProtoReflect.Descriptor instead.
func (*CreateMonitorRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMonitorRequest) GetMonitor() *BgpMonitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type CreateMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor *BgpMonitor `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
}

func (x *CreateMonitorResponse) Reset() {
	*x = CreateMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorResponse) ProtoMessage() {}

func (x *CreateMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorResponse.ProtoReflect.Descriptor instead.
func (*CreateMonitorResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{9}
}

func (x *CreateMonitorResponse) GetMonitor() *BgpMonitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type GetMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMonitorRequest) Reset() {
	*x = GetMonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorRequest) ProtoMessage() {}

func (x *GetMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorRequest.ProtoReflect.Descriptor instead.
func (*GetMonitorRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{10}
}

func (x *GetMonitorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor *BgpMonitor `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
}

func (x *GetMonitorResponse) Reset() {
	*x = GetMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonitorResponse) ProtoMessage() {}

func (x *GetMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonitorResponse.ProtoReflect.Descriptor instead.
func (*GetMonitorResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{11}
}

func (x *GetMonitorResponse) GetMonitor() *BgpMonitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type UpdateMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor *BgpMonitor `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
}

func (x *UpdateMonitorRequest) Reset() {
	*x = UpdateMonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorRequest) ProtoMessage() {}

func (x *UpdateMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitorRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateMonitorRequest) GetMonitor() *BgpMonitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type UpdateMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monitor *BgpMonitor `protobuf:"bytes,1,opt,name=monitor,proto3" json:"monitor,omitempty"`
}

func (x *UpdateMonitorResponse) Reset() {
	*x = UpdateMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorResponse) ProtoMessage() {}

func (x *UpdateMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorResponse.ProtoReflect.Descriptor instead.
func (*UpdateMonitorResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateMonitorResponse) GetMonitor() *BgpMonitor {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type DeleteMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMonitorRequest) Reset() {
	*x = DeleteMonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorRequest) ProtoMessage() {}

func (x *DeleteMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorRequest.ProtoReflect.Descriptor instead.
func (*DeleteMonitorRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteMonitorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMonitorResponse) Reset() {
	*x = DeleteMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorResponse) ProtoMessage() {}

func (x *DeleteMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorResponse.ProtoReflect.Descriptor instead.
func (*DeleteMonitorResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{15}
}

type SetMonitorStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status BgpMonitorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus" json:"status,omitempty"`
}

func (x *SetMonitorStatusRequest) Reset() {
	*x = SetMonitorStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMonitorStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMonitorStatusRequest) ProtoMessage() {}

func (x *SetMonitorStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMonitorStatusRequest.ProtoReflect.Descriptor instead.
func (*SetMonitorStatusRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{16}
}

func (x *SetMonitorStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetMonitorStatusRequest) GetStatus() BgpMonitorStatus {
	if x != nil {
		return x.Status
	}
	return BgpMonitorStatus_BGP_MONITOR_STATUS_UNSPECIFIED
}

type SetMonitorStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMonitorStatusResponse) Reset() {
	*x = SetMonitorStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMonitorStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMonitorStatusResponse) ProtoMessage() {}

func (x *SetMonitorStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMonitorStatusResponse.ProtoReflect.Descriptor instead.
func (*SetMonitorStatusResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{17}
}

// Data service
type GetMetricsForTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start of the time interval for this query.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of the time interval for this query.
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Target         *Nlri                  `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	IncludeCovered bool                   `protobuf:"varint,4,opt,name=include_covered,json=includeCovered,proto3" json:"include_covered,omitempty"`
	Metrics        []BgpMetricType        `protobuf:"varint,5,rep,packed,name=metrics,proto3,enum=kentik.bgp_monitoring.v202205beta1.BgpMetricType" json:"metrics,omitempty"` // list of metric types to return
}

func (x *GetMetricsForTargetRequest) Reset() {
	*x = GetMetricsForTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsForTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsForTargetRequest) ProtoMessage() {}

func (x *GetMetricsForTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsForTargetRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsForTargetRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{18}
}

func (x *GetMetricsForTargetRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetMetricsForTargetRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetMetricsForTargetRequest) GetTarget() *Nlri {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GetMetricsForTargetRequest) GetIncludeCovered() bool {
	if x != nil {
		return x.IncludeCovered
	}
	return false
}

func (x *GetMetricsForTargetRequest) GetMetrics() []BgpMetricType {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type GetMetricsForTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*BgpMetric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *GetMetricsForTargetResponse) Reset() {
	*x = GetMetricsForTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsForTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsForTargetResponse) ProtoMessage() {}

func (x *GetMetricsForTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsForTargetResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsForTargetResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{19}
}

func (x *GetMetricsForTargetResponse) GetMetrics() []*BgpMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type GetRoutesForTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"` // reference time for route information snapshot
	Target         *Nlri                  `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	IncludeCovered bool                   `protobuf:"varint,4,opt,name=include_covered,json=includeCovered,proto3" json:"include_covered,omitempty"`
	CheckRpki      bool                   `protobuf:"varint,5,opt,name=check_rpki,json=checkRpki,proto3" json:"check_rpki,omitempty"`
}

func (x *GetRoutesForTargetRequest) Reset() {
	*x = GetRoutesForTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutesForTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutesForTargetRequest) ProtoMessage() {}

func (x *GetRoutesForTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutesForTargetRequest.ProtoReflect.Descriptor instead.
func (*GetRoutesForTargetRequest) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{20}
}

func (x *GetRoutesForTargetRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetRoutesForTargetRequest) GetTarget() *Nlri {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GetRoutesForTargetRequest) GetIncludeCovered() bool {
	if x != nil {
		return x.IncludeCovered
	}
	return false
}

func (x *GetRoutesForTargetRequest) GetCheckRpki() bool {
	if x != nil {
		return x.CheckRpki
	}
	return false
}

type GetRoutesForTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes  []*RouteInfo      `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	AsNames map[uint32]string `protobuf:"bytes,5,rep,name=as_names,json=asNames,proto3" json:"as_names,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // lookaside map of AS number -> AS name mappings
}

func (x *GetRoutesForTargetResponse) Reset() {
	*x = GetRoutesForTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutesForTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutesForTargetResponse) ProtoMessage() {}

func (x *GetRoutesForTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutesForTargetResponse.ProtoReflect.Descriptor instead.
func (*GetRoutesForTargetResponse) Descriptor() ([]byte, []int) {
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP(), []int{21}
}

func (x *GetRoutesForTargetResponse) GetRoutes() []*RouteInfo {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *GetRoutesForTargetResponse) GetAsNames() map[uint32]string {
	if x != nil {
		return x.AsNames
	}
	return nil
}

var File_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto protoreflect.FileDescriptor

var file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2f, 0x65,
	0x6c, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x34, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x4e, 0x6c, 0x72, 0x69, 0x12, 0x31, 0x0a, 0x03,
	0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x41, 0x66, 0x69, 0x52, 0x03, 0x61, 0x66, 0x69, 0x12,
	0x34, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x53, 0x61, 0x66, 0x69, 0x52,
	0x04, 0x73, 0x61, 0x66, 0x69, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x02, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x73, 0x12, 0x42,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6c, 0x72, 0x69, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x70, 0x6b, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x70, 0x6b,
	0x69, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x22, 0xdf, 0x03, 0x0a, 0x0a, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x4b, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x6c, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6c, 0x72, 0x69, 0x52, 0x04, 0x6e, 0x6c, 0x72, 0x69, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x73, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x0d, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x56, 0x61, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x72, 0x70, 0x6b, 0x69, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x34, 0x2e, 0x52, 0x70, 0x6b, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x72, 0x70, 0x6b, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x42, 0x67, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x6c, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6c, 0x72, 0x69, 0x52, 0x04, 0x6e, 0x6c, 0x72, 0x69, 0x12, 0x24,
	0x0a, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x07,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x61,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67,
	0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x77, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6c,
	0x72, 0x69, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x66, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x6c, 0x72, 0x69,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x70, 0x6b, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x70, 0x6b, 0x69,
	0x22, 0x87, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x08, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x41, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x94, 0x01, 0x0a, 0x10, 0x42,
	0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x1e, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x74, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x47, 0x50, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x02, 0x32, 0xac, 0x0f, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x92, 0x41, 0x43, 0x12,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x42, 0x47, 0x50, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x1a, 0x1f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x47, 0x50, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x2a, 0x0c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x12, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xb4, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xad, 0x01, 0x92, 0x41, 0x60, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x42, 0x47,
	0x50, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x1a, 0x3a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x20,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xaf, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x35,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01,
	0x92, 0x41, 0x63, 0x12, 0x1e, 0x47, 0x65, 0x74, 0x20, 0x42, 0x47, 0x50, 0x20, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x1a, 0x35, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x47, 0x50,
	0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49, 0x44, 0x2e, 0x2a, 0x0a, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x47, 0x65, 0x74, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xf2, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xeb, 0x01, 0x92, 0x41, 0x90, 0x01, 0x12,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x1a, 0x5c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x47, 0x50, 0x20,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x2a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0xf2,
	0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a,
	0x32, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa6, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01,
	0x92, 0x41, 0x50, 0x12, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x1a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x42, 0x47, 0x50, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x49, 0x44, 0x2e, 0x2a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xc8, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb8, 0x01, 0x92, 0x41, 0x5f, 0x12, 0x1a, 0x53, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x47, 0x50, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x1a, 0x2f, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x47, 0x50, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49,
	0x44, 0x2e, 0x2a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0xf2, 0xd7, 0x02, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x1a, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x2a, 0xca, 0x41, 0x13, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x32, 0x96, 0x06, 0x0a, 0x18, 0x42, 0x67, 0x70, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xeb, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3e, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x92,
	0x41, 0x8c, 0x01, 0x12, 0x2d, 0x47, 0x65, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x42, 0x47,
	0x50, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x28, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x29, 0x2e, 0x1a, 0x46, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x28,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xf2,
	0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30,
	0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xe5, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcf, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x12, 0x2a,
	0x47, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x20, 0x28, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x29, 0x2e, 0x1a, 0x48, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x6c,
	0x65, 0x20, 0x42, 0x47, 0x50, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x28, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xf2, 0xd7, 0x02, 0x0f, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x22, 0x23, 0x2f, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x24, 0xca, 0x41, 0x13, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0xea, 0xd7, 0x02, 0x0a, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x42,
	0xee, 0x02, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x62,
	0x67, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x30, 0x35, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x62, 0x67, 0x70, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x92, 0x41, 0x93, 0x02, 0x12, 0x55, 0x0a,
	0x12, 0x42, 0x47, 0x50, 0x20, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x41, 0x50, 0x49, 0x22, 0x37, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x32, 0x06, 0x32, 0x30,
	0x32, 0x32, 0x30, 0x35, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48,
	0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48,
	0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41,
	0x50, 0x49, 0x73, 0x12, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63,
	0x73, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescOnce sync.Once
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescData = file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDesc
)

func file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescGZIP() []byte {
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescOnce.Do(func() {
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescData)
	})
	return file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDescData
}

var file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_goTypes = []interface{}{
	(BgpMonitorStatus)(0),               // 0: kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus
	(BgpMetricType)(0),                  // 1: kentik.bgp_monitoring.v202205beta1.BgpMetricType
	(*Nlri)(nil),                        // 2: kentik.bgp_monitoring.v202205beta1.Nlri
	(*BgpHealthSettings)(nil),           // 3: kentik.bgp_monitoring.v202205beta1.BgpHealthSettings
	(*BgpMonitorSettings)(nil),          // 4: kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings
	(*BgpMonitor)(nil),                  // 5: kentik.bgp_monitoring.v202205beta1.BgpMonitor
	(*RouteInfo)(nil),                   // 6: kentik.bgp_monitoring.v202205beta1.RouteInfo
	(*BgpMetric)(nil),                   // 7: kentik.bgp_monitoring.v202205beta1.BgpMetric
	(*ListMonitorsRequest)(nil),         // 8: kentik.bgp_monitoring.v202205beta1.ListMonitorsRequest
	(*ListMonitorsResponse)(nil),        // 9: kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse
	(*CreateMonitorRequest)(nil),        // 10: kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest
	(*CreateMonitorResponse)(nil),       // 11: kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse
	(*GetMonitorRequest)(nil),           // 12: kentik.bgp_monitoring.v202205beta1.GetMonitorRequest
	(*GetMonitorResponse)(nil),          // 13: kentik.bgp_monitoring.v202205beta1.GetMonitorResponse
	(*UpdateMonitorRequest)(nil),        // 14: kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest
	(*UpdateMonitorResponse)(nil),       // 15: kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse
	(*DeleteMonitorRequest)(nil),        // 16: kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest
	(*DeleteMonitorResponse)(nil),       // 17: kentik.bgp_monitoring.v202205beta1.DeleteMonitorResponse
	(*SetMonitorStatusRequest)(nil),     // 18: kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest
	(*SetMonitorStatusResponse)(nil),    // 19: kentik.bgp_monitoring.v202205beta1.SetMonitorStatusResponse
	(*GetMetricsForTargetRequest)(nil),  // 20: kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest
	(*GetMetricsForTargetResponse)(nil), // 21: kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse
	(*GetRoutesForTargetRequest)(nil),   // 22: kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest
	(*GetRoutesForTargetResponse)(nil),  // 23: kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse
	nil,                                 // 24: kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.AsNamesEntry
	(pb.Afi)(0),                         // 25: kentik.ktrac.route.v202104.Afi
	(pb.Safi)(0),                        // 26: kentik.ktrac.route.v202104.Safi
	(*v202202.ActivationSettings)(nil),  // 27: kentik.synthetics.v202202.ActivationSettings
	(*timestamppb.Timestamp)(nil),       // 28: google.protobuf.Timestamp
	(*v202202.UserInfo)(nil),            // 29: kentik.synthetics.v202202.UserInfo
	(*pb.VantagePoint)(nil),             // 30: kentik.ktrac.route.v202104.VantagePoint
	(pb.RpkiStatus)(0),                  // 31: kentik.ktrac.route.v202104.RpkiStatus
}
var file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_depIdxs = []int32{
	25, // 0: kentik.bgp_monitoring.v202205beta1.Nlri.afi:type_name -> kentik.ktrac.route.v202104.Afi
	26, // 1: kentik.bgp_monitoring.v202205beta1.Nlri.safi:type_name -> kentik.ktrac.route.v202104.Safi
	27, // 2: kentik.bgp_monitoring.v202205beta1.BgpHealthSettings.activation:type_name -> kentik.synthetics.v202202.ActivationSettings
	2,  // 3: kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.targets:type_name -> kentik.bgp_monitoring.v202205beta1.Nlri
	3,  // 4: kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.health_settings:type_name -> kentik.bgp_monitoring.v202205beta1.BgpHealthSettings
	0,  // 5: kentik.bgp_monitoring.v202205beta1.BgpMonitor.status:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus
	4,  // 6: kentik.bgp_monitoring.v202205beta1.BgpMonitor.settings:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings
	28, // 7: kentik.bgp_monitoring.v202205beta1.BgpMonitor.cdate:type_name -> google.protobuf.Timestamp
	28, // 8: kentik.bgp_monitoring.v202205beta1.BgpMonitor.edate:type_name -> google.protobuf.Timestamp
	29, // 9: kentik.bgp_monitoring.v202205beta1.BgpMonitor.created_by:type_name -> kentik.synthetics.v202202.UserInfo
	29, // 10: kentik.bgp_monitoring.v202205beta1.BgpMonitor.last_updated_by:type_name -> kentik.synthetics.v202202.UserInfo
	2,  // 11: kentik.bgp_monitoring.v202205beta1.RouteInfo.nlri:type_name -> kentik.bgp_monitoring.v202205beta1.Nlri
	30, // 12: kentik.bgp_monitoring.v202205beta1.RouteInfo.vantage_point:type_name -> kentik.ktrac.route.v202104.VantagePoint
	31, // 13: kentik.bgp_monitoring.v202205beta1.RouteInfo.rpki_status:type_name -> kentik.ktrac.route.v202104.RpkiStatus
	28, // 14: kentik.bgp_monitoring.v202205beta1.BgpMetric.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 15: kentik.bgp_monitoring.v202205beta1.BgpMetric.nlri:type_name -> kentik.bgp_monitoring.v202205beta1.Nlri
	5,  // 16: kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.monitors:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitor
	5,  // 17: kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest.monitor:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitor
	5,  // 18: kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse.monitor:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitor
	5,  // 19: kentik.bgp_monitoring.v202205beta1.GetMonitorResponse.monitor:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitor
	5,  // 20: kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest.monitor:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitor
	5,  // 21: kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse.monitor:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitor
	0,  // 22: kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.status:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus
	28, // 23: kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.start_time:type_name -> google.protobuf.Timestamp
	28, // 24: kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.end_time:type_name -> google.protobuf.Timestamp
	2,  // 25: kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.target:type_name -> kentik.bgp_monitoring.v202205beta1.Nlri
	1,  // 26: kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.metrics:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMetricType
	7,  // 27: kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse.metrics:type_name -> kentik.bgp_monitoring.v202205beta1.BgpMetric
	28, // 28: kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.time:type_name -> google.protobuf.Timestamp
	2,  // 29: kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.target:type_name -> kentik.bgp_monitoring.v202205beta1.Nlri
	6,  // 30: kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.routes:type_name -> kentik.bgp_monitoring.v202205beta1.RouteInfo
	24, // 31: kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.as_names:type_name -> kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.AsNamesEntry
	8,  // 32: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.ListMonitors:input_type -> kentik.bgp_monitoring.v202205beta1.ListMonitorsRequest
	10, // 33: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.CreateMonitor:input_type -> kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest
	12, // 34: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.GetMonitor:input_type -> kentik.bgp_monitoring.v202205beta1.GetMonitorRequest
	14, // 35: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.UpdateMonitor:input_type -> kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest
	16, // 36: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.DeleteMonitor:input_type -> kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest
	18, // 37: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.SetMonitorStatus:input_type -> kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest
	20, // 38: kentik.bgp_monitoring.v202205beta1.BgpMonitoringDataService.GetMetricsForTarget:input_type -> kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest
	22, // 39: kentik.bgp_monitoring.v202205beta1.BgpMonitoringDataService.GetRoutesForTarget:input_type -> kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest
	9,  // 40: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.ListMonitors:output_type -> kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse
	11, // 41: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.CreateMonitor:output_type -> kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse
	13, // 42: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.GetMonitor:output_type -> kentik.bgp_monitoring.v202205beta1.GetMonitorResponse
	15, // 43: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.UpdateMonitor:output_type -> kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse
	17, // 44: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.DeleteMonitor:output_type -> kentik.bgp_monitoring.v202205beta1.DeleteMonitorResponse
	19, // 45: kentik.bgp_monitoring.v202205beta1.BgpMonitoringAdminService.SetMonitorStatus:output_type -> kentik.bgp_monitoring.v202205beta1.SetMonitorStatusResponse
	21, // 46: kentik.bgp_monitoring.v202205beta1.BgpMonitoringDataService.GetMetricsForTarget:output_type -> kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse
	23, // 47: kentik.bgp_monitoring.v202205beta1.BgpMonitoringDataService.GetRoutesForTarget:output_type -> kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse
	40, // [40:48] is the sub-list for method output_type
	32, // [32:40] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_init() }
func file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_init() {
	if File_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nlri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpHealthSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpMonitorSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMonitorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMonitorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMonitorStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMonitorStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsForTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsForTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoutesForTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoutesForTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Nlri_Prefix)(nil),
	}
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*BgpMetric_Reachability)(nil),
		(*BgpMetric_PathChanges)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_goTypes,
		DependencyIndexes: file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_depIdxs,
		EnumInfos:         file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_enumTypes,
		MessageInfos:      file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_msgTypes,
	}.Build()
	File_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto = out.File
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_rawDesc = nil
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_goTypes = nil
	file_kentik_bgp_monitoring_v202205beta1_bgp_monitoring_proto_depIdxs = nil
}
