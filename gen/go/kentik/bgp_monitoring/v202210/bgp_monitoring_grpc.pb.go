// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bgp_monitoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BgpMonitoringAdminServiceClient is the client API for BgpMonitoringAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BgpMonitoringAdminServiceClient interface {
	ListMonitors(ctx context.Context, in *ListMonitorsRequest, opts ...grpc.CallOption) (*ListMonitorsResponse, error)
	CreateMonitor(ctx context.Context, in *CreateMonitorRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error)
	GetMonitor(ctx context.Context, in *GetMonitorRequest, opts ...grpc.CallOption) (*GetMonitorResponse, error)
	UpdateMonitor(ctx context.Context, in *UpdateMonitorRequest, opts ...grpc.CallOption) (*UpdateMonitorResponse, error)
	DeleteMonitor(ctx context.Context, in *DeleteMonitorRequest, opts ...grpc.CallOption) (*DeleteMonitorResponse, error)
	SetMonitorStatus(ctx context.Context, in *SetMonitorStatusRequest, opts ...grpc.CallOption) (*SetMonitorStatusResponse, error)
}

type bgpMonitoringAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpMonitoringAdminServiceClient(cc grpc.ClientConnInterface) BgpMonitoringAdminServiceClient {
	return &bgpMonitoringAdminServiceClient{cc}
}

func (c *bgpMonitoringAdminServiceClient) ListMonitors(ctx context.Context, in *ListMonitorsRequest, opts ...grpc.CallOption) (*ListMonitorsResponse, error) {
	out := new(ListMonitorsResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/ListMonitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpMonitoringAdminServiceClient) CreateMonitor(ctx context.Context, in *CreateMonitorRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error) {
	out := new(CreateMonitorResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/CreateMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpMonitoringAdminServiceClient) GetMonitor(ctx context.Context, in *GetMonitorRequest, opts ...grpc.CallOption) (*GetMonitorResponse, error) {
	out := new(GetMonitorResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/GetMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpMonitoringAdminServiceClient) UpdateMonitor(ctx context.Context, in *UpdateMonitorRequest, opts ...grpc.CallOption) (*UpdateMonitorResponse, error) {
	out := new(UpdateMonitorResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/UpdateMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpMonitoringAdminServiceClient) DeleteMonitor(ctx context.Context, in *DeleteMonitorRequest, opts ...grpc.CallOption) (*DeleteMonitorResponse, error) {
	out := new(DeleteMonitorResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/DeleteMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpMonitoringAdminServiceClient) SetMonitorStatus(ctx context.Context, in *SetMonitorStatusRequest, opts ...grpc.CallOption) (*SetMonitorStatusResponse, error) {
	out := new(SetMonitorStatusResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/SetMonitorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpMonitoringAdminServiceServer is the server API for BgpMonitoringAdminService service.
// All implementations should embed UnimplementedBgpMonitoringAdminServiceServer
// for forward compatibility
type BgpMonitoringAdminServiceServer interface {
	ListMonitors(context.Context, *ListMonitorsRequest) (*ListMonitorsResponse, error)
	CreateMonitor(context.Context, *CreateMonitorRequest) (*CreateMonitorResponse, error)
	GetMonitor(context.Context, *GetMonitorRequest) (*GetMonitorResponse, error)
	UpdateMonitor(context.Context, *UpdateMonitorRequest) (*UpdateMonitorResponse, error)
	DeleteMonitor(context.Context, *DeleteMonitorRequest) (*DeleteMonitorResponse, error)
	SetMonitorStatus(context.Context, *SetMonitorStatusRequest) (*SetMonitorStatusResponse, error)
}

// UnimplementedBgpMonitoringAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBgpMonitoringAdminServiceServer struct {
}

func (UnimplementedBgpMonitoringAdminServiceServer) ListMonitors(context.Context, *ListMonitorsRequest) (*ListMonitorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonitors not implemented")
}
func (UnimplementedBgpMonitoringAdminServiceServer) CreateMonitor(context.Context, *CreateMonitorRequest) (*CreateMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitor not implemented")
}
func (UnimplementedBgpMonitoringAdminServiceServer) GetMonitor(context.Context, *GetMonitorRequest) (*GetMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitor not implemented")
}
func (UnimplementedBgpMonitoringAdminServiceServer) UpdateMonitor(context.Context, *UpdateMonitorRequest) (*UpdateMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitor not implemented")
}
func (UnimplementedBgpMonitoringAdminServiceServer) DeleteMonitor(context.Context, *DeleteMonitorRequest) (*DeleteMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitor not implemented")
}
func (UnimplementedBgpMonitoringAdminServiceServer) SetMonitorStatus(context.Context, *SetMonitorStatusRequest) (*SetMonitorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMonitorStatus not implemented")
}

// UnsafeBgpMonitoringAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BgpMonitoringAdminServiceServer will
// result in compilation errors.
type UnsafeBgpMonitoringAdminServiceServer interface {
	mustEmbedUnimplementedBgpMonitoringAdminServiceServer()
}

func RegisterBgpMonitoringAdminServiceServer(s grpc.ServiceRegistrar, srv BgpMonitoringAdminServiceServer) {
	s.RegisterService(&BgpMonitoringAdminService_ServiceDesc, srv)
}

func _BgpMonitoringAdminService_ListMonitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonitorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringAdminServiceServer).ListMonitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/ListMonitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringAdminServiceServer).ListMonitors(ctx, req.(*ListMonitorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpMonitoringAdminService_CreateMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringAdminServiceServer).CreateMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/CreateMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringAdminServiceServer).CreateMonitor(ctx, req.(*CreateMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpMonitoringAdminService_GetMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringAdminServiceServer).GetMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/GetMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringAdminServiceServer).GetMonitor(ctx, req.(*GetMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpMonitoringAdminService_UpdateMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringAdminServiceServer).UpdateMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/UpdateMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringAdminServiceServer).UpdateMonitor(ctx, req.(*UpdateMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpMonitoringAdminService_DeleteMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringAdminServiceServer).DeleteMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/DeleteMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringAdminServiceServer).DeleteMonitor(ctx, req.(*DeleteMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpMonitoringAdminService_SetMonitorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMonitorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringAdminServiceServer).SetMonitorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringAdminService/SetMonitorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringAdminServiceServer).SetMonitorStatus(ctx, req.(*SetMonitorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BgpMonitoringAdminService_ServiceDesc is the grpc.ServiceDesc for BgpMonitoringAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BgpMonitoringAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.bgp_monitoring.v202210.BgpMonitoringAdminService",
	HandlerType: (*BgpMonitoringAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMonitors",
			Handler:    _BgpMonitoringAdminService_ListMonitors_Handler,
		},
		{
			MethodName: "CreateMonitor",
			Handler:    _BgpMonitoringAdminService_CreateMonitor_Handler,
		},
		{
			MethodName: "GetMonitor",
			Handler:    _BgpMonitoringAdminService_GetMonitor_Handler,
		},
		{
			MethodName: "UpdateMonitor",
			Handler:    _BgpMonitoringAdminService_UpdateMonitor_Handler,
		},
		{
			MethodName: "DeleteMonitor",
			Handler:    _BgpMonitoringAdminService_DeleteMonitor_Handler,
		},
		{
			MethodName: "SetMonitorStatus",
			Handler:    _BgpMonitoringAdminService_SetMonitorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/bgp_monitoring/v202210/bgp_monitoring.proto",
}

// BgpMonitoringDataServiceClient is the client API for BgpMonitoringDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BgpMonitoringDataServiceClient interface {
	GetMetricsForTarget(ctx context.Context, in *GetMetricsForTargetRequest, opts ...grpc.CallOption) (*GetMetricsForTargetResponse, error)
	GetRoutesForTarget(ctx context.Context, in *GetRoutesForTargetRequest, opts ...grpc.CallOption) (*GetRoutesForTargetResponse, error)
}

type bgpMonitoringDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpMonitoringDataServiceClient(cc grpc.ClientConnInterface) BgpMonitoringDataServiceClient {
	return &bgpMonitoringDataServiceClient{cc}
}

func (c *bgpMonitoringDataServiceClient) GetMetricsForTarget(ctx context.Context, in *GetMetricsForTargetRequest, opts ...grpc.CallOption) (*GetMetricsForTargetResponse, error) {
	out := new(GetMetricsForTargetResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringDataService/GetMetricsForTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpMonitoringDataServiceClient) GetRoutesForTarget(ctx context.Context, in *GetRoutesForTargetRequest, opts ...grpc.CallOption) (*GetRoutesForTargetResponse, error) {
	out := new(GetRoutesForTargetResponse)
	err := c.cc.Invoke(ctx, "/kentik.bgp_monitoring.v202210.BgpMonitoringDataService/GetRoutesForTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpMonitoringDataServiceServer is the server API for BgpMonitoringDataService service.
// All implementations should embed UnimplementedBgpMonitoringDataServiceServer
// for forward compatibility
type BgpMonitoringDataServiceServer interface {
	GetMetricsForTarget(context.Context, *GetMetricsForTargetRequest) (*GetMetricsForTargetResponse, error)
	GetRoutesForTarget(context.Context, *GetRoutesForTargetRequest) (*GetRoutesForTargetResponse, error)
}

// UnimplementedBgpMonitoringDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBgpMonitoringDataServiceServer struct {
}

func (UnimplementedBgpMonitoringDataServiceServer) GetMetricsForTarget(context.Context, *GetMetricsForTargetRequest) (*GetMetricsForTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsForTarget not implemented")
}
func (UnimplementedBgpMonitoringDataServiceServer) GetRoutesForTarget(context.Context, *GetRoutesForTargetRequest) (*GetRoutesForTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutesForTarget not implemented")
}

// UnsafeBgpMonitoringDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BgpMonitoringDataServiceServer will
// result in compilation errors.
type UnsafeBgpMonitoringDataServiceServer interface {
	mustEmbedUnimplementedBgpMonitoringDataServiceServer()
}

func RegisterBgpMonitoringDataServiceServer(s grpc.ServiceRegistrar, srv BgpMonitoringDataServiceServer) {
	s.RegisterService(&BgpMonitoringDataService_ServiceDesc, srv)
}

func _BgpMonitoringDataService_GetMetricsForTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsForTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringDataServiceServer).GetMetricsForTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringDataService/GetMetricsForTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringDataServiceServer).GetMetricsForTarget(ctx, req.(*GetMetricsForTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpMonitoringDataService_GetRoutesForTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutesForTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMonitoringDataServiceServer).GetRoutesForTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.bgp_monitoring.v202210.BgpMonitoringDataService/GetRoutesForTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMonitoringDataServiceServer).GetRoutesForTarget(ctx, req.(*GetRoutesForTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BgpMonitoringDataService_ServiceDesc is the grpc.ServiceDesc for BgpMonitoringDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BgpMonitoringDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.bgp_monitoring.v202210.BgpMonitoringDataService",
	HandlerType: (*BgpMonitoringDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricsForTarget",
			Handler:    _BgpMonitoringDataService_GetMetricsForTarget_Handler,
		},
		{
			MethodName: "GetRoutesForTarget",
			Handler:    _BgpMonitoringDataService_GetRoutesForTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/bgp_monitoring/v202210/bgp_monitoring.proto",
}
