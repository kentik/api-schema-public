// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/plan/v202501alpha1/plan_message.proto

package plan

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Device Subtype Enum (see https://kb.kentik.com/v4/Cb01.htm#Cb01-Supported_Device_Types)
// note, this could be moved to a shared location if used by other services
type DeviceSubtype int32

const (
	DeviceSubtype_DEVICE_SUBTYPE_UNSPECIFIED               DeviceSubtype = 0  // Unspecified (default value)
	DeviceSubtype_DEVICE_SUBTYPE_A10_CGN                   DeviceSubtype = 1  // A10 CGN
	DeviceSubtype_DEVICE_SUBTYPE_ADVANCED_SFLOW            DeviceSubtype = 2  // Advanced sFlow
	DeviceSubtype_DEVICE_SUBTYPE_AWS_SUBNET                DeviceSubtype = 3  // Amazon Web Services
	DeviceSubtype_DEVICE_SUBTYPE_AZURE_SUBNET              DeviceSubtype = 4  // Microsoft Azure
	DeviceSubtype_DEVICE_SUBTYPE_CISCO_ASA                 DeviceSubtype = 5  // Cisco ASA
	DeviceSubtype_DEVICE_SUBTYPE_CISCO_ASA_SYSLOG          DeviceSubtype = 6  // Cisco ASA (Syslog)
	DeviceSubtype_DEVICE_SUBTYPE_CISCO_NBAR                DeviceSubtype = 7  // Cisco NBAR-Enabled Router
	DeviceSubtype_DEVICE_SUBTYPE_CISCO_NVZFLOW             DeviceSubtype = 8  // Cisco nvzFlow
	DeviceSubtype_DEVICE_SUBTYPE_CISCO_SDWAN_XE            DeviceSubtype = 9  // Cisco SD-WAN IOS XE
	DeviceSubtype_DEVICE_SUBTYPE_CISCO_ZONE_BASED_FIREWALL DeviceSubtype = 10 // Cisco Zone-Based Firewall
	DeviceSubtype_DEVICE_SUBTYPE_DARKNET                   DeviceSubtype = 11 // Kentik-internal value, darknet stream
	DeviceSubtype_DEVICE_SUBTYPE_FORTINET_FORTIGATE        DeviceSubtype = 12 // Fortinet FortiGate
	DeviceSubtype_DEVICE_SUBTYPE_GCP_CLOUD_RUN             DeviceSubtype = 13 // Google Cloud Run
	DeviceSubtype_DEVICE_SUBTYPE_GCP_SUBNET                DeviceSubtype = 14 // Google Cloud Platform
	DeviceSubtype_DEVICE_SUBTYPE_GIGAMON                   DeviceSubtype = 15 // Gigamon Network Tap
	DeviceSubtype_DEVICE_SUBTYPE_IBM_SUBNET                DeviceSubtype = 16 // IBM Cloud Platform
	DeviceSubtype_DEVICE_SUBTYPE_IOS_XR                    DeviceSubtype = 17 // Cisco IOS XR
	DeviceSubtype_DEVICE_SUBTYPE_ISTIO                     DeviceSubtype = 18 // Istio (Beta)
	DeviceSubtype_DEVICE_SUBTYPE_JUNIPER_DDOS              DeviceSubtype = 19 // Juniper DDoS Flow
	DeviceSubtype_DEVICE_SUBTYPE_KAGENT                    DeviceSubtype = 20 // kentik agent
	DeviceSubtype_DEVICE_SUBTYPE_KAPPA                     DeviceSubtype = 21 // Process-Aware Telemetry Agent
	DeviceSubtype_DEVICE_SUBTYPE_KMETRICS                  DeviceSubtype = 22 // Virtual device for storing kmetrics data
	DeviceSubtype_DEVICE_SUBTYPE_KPROBE                    DeviceSubtype = 23 // Kentik Host Agent (kprobe)
	DeviceSubtype_DEVICE_SUBTYPE_KROBE_TAP                 DeviceSubtype = 24 // kProbe True Origin Tap
	DeviceSubtype_DEVICE_SUBTYPE_KPROXY                    DeviceSubtype = 25 // kproxy agent
	DeviceSubtype_DEVICE_SUBTYPE_MERAKI                    DeviceSubtype = 26 // Cisco Meraki
	DeviceSubtype_DEVICE_SUBTYPE_MPLS                      DeviceSubtype = 27 // MPLS Router
	DeviceSubtype_DEVICE_SUBTYPE_NOKIALAYER2               DeviceSubtype = 28 // Nokia Layer 2
	DeviceSubtype_DEVICE_SUBTYPE_NPROBE                    DeviceSubtype = 29 // ntop Host Agent (nProbe)
	DeviceSubtype_DEVICE_SUBTYPE_OCI_FLOW_LOG              DeviceSubtype = 30 // OCI Flow Log
	DeviceSubtype_DEVICE_SUBTYPE_OCI_SUBNET                DeviceSubtype = 31 // Oracle Cloud Infrastructure
	DeviceSubtype_DEVICE_SUBTYPE_OPEN_NMS                  DeviceSubtype = 32 // OpenNMS SNMP Export Device
	DeviceSubtype_DEVICE_SUBTYPE_PALOALTO                  DeviceSubtype = 33 // Palo Alto Networks Firewall
	DeviceSubtype_DEVICE_SUBTYPE_PALOALTO_PRISMASDWAN      DeviceSubtype = 34 // Palo Alto Prisma SD-WAN
	DeviceSubtype_DEVICE_SUBTYPE_PFE_SYSLOG                DeviceSubtype = 35 // Juniper PFE (Syslog)
	DeviceSubtype_DEVICE_SUBTYPE_ROUTER                    DeviceSubtype = 36 // NetFlow-Enabled Router
	DeviceSubtype_DEVICE_SUBTYPE_SFLOW_TUNNEL              DeviceSubtype = 37 // sFlow Tunnel decode
	DeviceSubtype_DEVICE_SUBTYPE_SILVERPEAK                DeviceSubtype = 38 // Silver Peak EdgeConnect
	DeviceSubtype_DEVICE_SUBTYPE_SYSLOG                    DeviceSubtype = 39 // Generic Syslog
	DeviceSubtype_DEVICE_SUBTYPE_VERSA                     DeviceSubtype = 40 // Versa
	DeviceSubtype_DEVICE_SUBTYPE_VIPTELA                   DeviceSubtype = 41 // Cisco SDWAN vEdge
	DeviceSubtype_DEVICE_SUBTYPE_VMWARE_VELOCLOUD          DeviceSubtype = 42 // VMware SD-WAN
	DeviceSubtype_DEVICE_SUBTYPE_VMWARE_VSPHERE            DeviceSubtype = 43 // VMWare vSphere
	DeviceSubtype_DEVICE_SUBTYPE_VXLAN                     DeviceSubtype = 44 // VXLAN
	DeviceSubtype_DEVICE_SUBTYPE_KSYNTH                    DeviceSubtype = 45 // Kentik-internal value
	DeviceSubtype_DEVICE_SUBTYPE_SDM_LEADER                DeviceSubtype = 46 // Kentik-internal value
)

// Enum value maps for DeviceSubtype.
var (
	DeviceSubtype_name = map[int32]string{
		0:  "DEVICE_SUBTYPE_UNSPECIFIED",
		1:  "DEVICE_SUBTYPE_A10_CGN",
		2:  "DEVICE_SUBTYPE_ADVANCED_SFLOW",
		3:  "DEVICE_SUBTYPE_AWS_SUBNET",
		4:  "DEVICE_SUBTYPE_AZURE_SUBNET",
		5:  "DEVICE_SUBTYPE_CISCO_ASA",
		6:  "DEVICE_SUBTYPE_CISCO_ASA_SYSLOG",
		7:  "DEVICE_SUBTYPE_CISCO_NBAR",
		8:  "DEVICE_SUBTYPE_CISCO_NVZFLOW",
		9:  "DEVICE_SUBTYPE_CISCO_SDWAN_XE",
		10: "DEVICE_SUBTYPE_CISCO_ZONE_BASED_FIREWALL",
		11: "DEVICE_SUBTYPE_DARKNET",
		12: "DEVICE_SUBTYPE_FORTINET_FORTIGATE",
		13: "DEVICE_SUBTYPE_GCP_CLOUD_RUN",
		14: "DEVICE_SUBTYPE_GCP_SUBNET",
		15: "DEVICE_SUBTYPE_GIGAMON",
		16: "DEVICE_SUBTYPE_IBM_SUBNET",
		17: "DEVICE_SUBTYPE_IOS_XR",
		18: "DEVICE_SUBTYPE_ISTIO",
		19: "DEVICE_SUBTYPE_JUNIPER_DDOS",
		20: "DEVICE_SUBTYPE_KAGENT",
		21: "DEVICE_SUBTYPE_KAPPA",
		22: "DEVICE_SUBTYPE_KMETRICS",
		23: "DEVICE_SUBTYPE_KPROBE",
		24: "DEVICE_SUBTYPE_KROBE_TAP",
		25: "DEVICE_SUBTYPE_KPROXY",
		26: "DEVICE_SUBTYPE_MERAKI",
		27: "DEVICE_SUBTYPE_MPLS",
		28: "DEVICE_SUBTYPE_NOKIALAYER2",
		29: "DEVICE_SUBTYPE_NPROBE",
		30: "DEVICE_SUBTYPE_OCI_FLOW_LOG",
		31: "DEVICE_SUBTYPE_OCI_SUBNET",
		32: "DEVICE_SUBTYPE_OPEN_NMS",
		33: "DEVICE_SUBTYPE_PALOALTO",
		34: "DEVICE_SUBTYPE_PALOALTO_PRISMASDWAN",
		35: "DEVICE_SUBTYPE_PFE_SYSLOG",
		36: "DEVICE_SUBTYPE_ROUTER",
		37: "DEVICE_SUBTYPE_SFLOW_TUNNEL",
		38: "DEVICE_SUBTYPE_SILVERPEAK",
		39: "DEVICE_SUBTYPE_SYSLOG",
		40: "DEVICE_SUBTYPE_VERSA",
		41: "DEVICE_SUBTYPE_VIPTELA",
		42: "DEVICE_SUBTYPE_VMWARE_VELOCLOUD",
		43: "DEVICE_SUBTYPE_VMWARE_VSPHERE",
		44: "DEVICE_SUBTYPE_VXLAN",
		45: "DEVICE_SUBTYPE_KSYNTH",
		46: "DEVICE_SUBTYPE_SDM_LEADER",
	}
	DeviceSubtype_value = map[string]int32{
		"DEVICE_SUBTYPE_UNSPECIFIED":               0,
		"DEVICE_SUBTYPE_A10_CGN":                   1,
		"DEVICE_SUBTYPE_ADVANCED_SFLOW":            2,
		"DEVICE_SUBTYPE_AWS_SUBNET":                3,
		"DEVICE_SUBTYPE_AZURE_SUBNET":              4,
		"DEVICE_SUBTYPE_CISCO_ASA":                 5,
		"DEVICE_SUBTYPE_CISCO_ASA_SYSLOG":          6,
		"DEVICE_SUBTYPE_CISCO_NBAR":                7,
		"DEVICE_SUBTYPE_CISCO_NVZFLOW":             8,
		"DEVICE_SUBTYPE_CISCO_SDWAN_XE":            9,
		"DEVICE_SUBTYPE_CISCO_ZONE_BASED_FIREWALL": 10,
		"DEVICE_SUBTYPE_DARKNET":                   11,
		"DEVICE_SUBTYPE_FORTINET_FORTIGATE":        12,
		"DEVICE_SUBTYPE_GCP_CLOUD_RUN":             13,
		"DEVICE_SUBTYPE_GCP_SUBNET":                14,
		"DEVICE_SUBTYPE_GIGAMON":                   15,
		"DEVICE_SUBTYPE_IBM_SUBNET":                16,
		"DEVICE_SUBTYPE_IOS_XR":                    17,
		"DEVICE_SUBTYPE_ISTIO":                     18,
		"DEVICE_SUBTYPE_JUNIPER_DDOS":              19,
		"DEVICE_SUBTYPE_KAGENT":                    20,
		"DEVICE_SUBTYPE_KAPPA":                     21,
		"DEVICE_SUBTYPE_KMETRICS":                  22,
		"DEVICE_SUBTYPE_KPROBE":                    23,
		"DEVICE_SUBTYPE_KROBE_TAP":                 24,
		"DEVICE_SUBTYPE_KPROXY":                    25,
		"DEVICE_SUBTYPE_MERAKI":                    26,
		"DEVICE_SUBTYPE_MPLS":                      27,
		"DEVICE_SUBTYPE_NOKIALAYER2":               28,
		"DEVICE_SUBTYPE_NPROBE":                    29,
		"DEVICE_SUBTYPE_OCI_FLOW_LOG":              30,
		"DEVICE_SUBTYPE_OCI_SUBNET":                31,
		"DEVICE_SUBTYPE_OPEN_NMS":                  32,
		"DEVICE_SUBTYPE_PALOALTO":                  33,
		"DEVICE_SUBTYPE_PALOALTO_PRISMASDWAN":      34,
		"DEVICE_SUBTYPE_PFE_SYSLOG":                35,
		"DEVICE_SUBTYPE_ROUTER":                    36,
		"DEVICE_SUBTYPE_SFLOW_TUNNEL":              37,
		"DEVICE_SUBTYPE_SILVERPEAK":                38,
		"DEVICE_SUBTYPE_SYSLOG":                    39,
		"DEVICE_SUBTYPE_VERSA":                     40,
		"DEVICE_SUBTYPE_VIPTELA":                   41,
		"DEVICE_SUBTYPE_VMWARE_VELOCLOUD":          42,
		"DEVICE_SUBTYPE_VMWARE_VSPHERE":            43,
		"DEVICE_SUBTYPE_VXLAN":                     44,
		"DEVICE_SUBTYPE_KSYNTH":                    45,
		"DEVICE_SUBTYPE_SDM_LEADER":                46,
	}
)

func (x DeviceSubtype) Enum() *DeviceSubtype {
	p := new(DeviceSubtype)
	*p = x
	return p
}

func (x DeviceSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_plan_v202501alpha1_plan_message_proto_enumTypes[0].Descriptor()
}

func (DeviceSubtype) Type() protoreflect.EnumType {
	return &file_kentik_plan_v202501alpha1_plan_message_proto_enumTypes[0]
}

func (x DeviceSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceSubtype.Descriptor instead.
func (DeviceSubtype) EnumDescriptor() ([]byte, []int) {
	return file_kentik_plan_v202501alpha1_plan_message_proto_rawDescGZIP(), []int{0}
}

// Represents a device that is associated with a plan.
type PlanDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceName    string        `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceSubtype DeviceSubtype `protobuf:"varint,3,opt,name=device_subtype,json=deviceSubtype,proto3,enum=kentik.plan.v202501alpha1.DeviceSubtype" json:"device_subtype,omitempty"`
}

func (x *PlanDevice) Reset() {
	*x = PlanDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDevice) ProtoMessage() {}

func (x *PlanDevice) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDevice.ProtoReflect.Descriptor instead.
func (*PlanDevice) Descriptor() ([]byte, []int) {
	return file_kentik_plan_v202501alpha1_plan_message_proto_rawDescGZIP(), []int{0}
}

func (x *PlanDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlanDevice) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PlanDevice) GetDeviceSubtype() DeviceSubtype {
	if x != nil {
		return x.DeviceSubtype
	}
	return DeviceSubtype_DEVICE_SUBTYPE_UNSPECIFIED
}

// Represents a plan object.
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyId     string                 `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	MaxDevices    int32                  `protobuf:"varint,6,opt,name=max_devices,json=maxDevices,proto3" json:"max_devices,omitempty"`
	MaxFps        int32                  `protobuf:"varint,7,opt,name=max_fps,json=maxFps,proto3" json:"max_fps,omitempty"`
	BgpEnabled    bool                   `protobuf:"varint,8,opt,name=bgp_enabled,json=bgpEnabled,proto3" json:"bgp_enabled,omitempty"`
	FastRetention int32                  `protobuf:"varint,9,opt,name=fast_retention,json=fastRetention,proto3" json:"fast_retention,omitempty"`
	FullRetention int32                  `protobuf:"varint,10,opt,name=full_retention,json=fullRetention,proto3" json:"full_retention,omitempty"`
	CreatedDate   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	UpdatedDate   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
	MaxBigdataFps int32                  `protobuf:"varint,13,opt,name=max_bigdata_fps,json=maxBigdataFps,proto3" json:"max_bigdata_fps,omitempty"`
	DeviceTypes   []DeviceSubtype        `protobuf:"varint,14,rep,packed,name=device_types,json=deviceTypes,proto3,enum=kentik.plan.v202501alpha1.DeviceSubtype" json:"device_types,omitempty"`
	Devices       []*PlanDevice          `protobuf:"bytes,15,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_kentik_plan_v202501alpha1_plan_message_proto_rawDescGZIP(), []int{1}
}

func (x *Plan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Plan) GetMaxDevices() int32 {
	if x != nil {
		return x.MaxDevices
	}
	return 0
}

func (x *Plan) GetMaxFps() int32 {
	if x != nil {
		return x.MaxFps
	}
	return 0
}

func (x *Plan) GetBgpEnabled() bool {
	if x != nil {
		return x.BgpEnabled
	}
	return false
}

func (x *Plan) GetFastRetention() int32 {
	if x != nil {
		return x.FastRetention
	}
	return 0
}

func (x *Plan) GetFullRetention() int32 {
	if x != nil {
		return x.FullRetention
	}
	return 0
}

func (x *Plan) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *Plan) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *Plan) GetMaxBigdataFps() int32 {
	if x != nil {
		return x.MaxBigdataFps
	}
	return 0
}

func (x *Plan) GetDeviceTypes() []DeviceSubtype {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

func (x *Plan) GetDevices() []*PlanDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

var File_kentik_plan_v202501alpha1_plan_message_proto protoreflect.FileDescriptor

var file_kentik_plan_v202501alpha1_plan_message_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92,
	0x41, 0x46, 0x32, 0x44, 0x54, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x67, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x3f, 0x32, 0x3d, 0x54, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x3c, 0x92, 0x41,
	0x35, 0x32, 0x33, 0x41, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x66,
	0x6c, 0x6f, 0x77, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86, 0x0d, 0x0a, 0x04, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x43, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0x92, 0x41, 0x2c, 0x32, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x35,
	0x32, 0x33, 0x54, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x60, 0x32, 0x5e, 0x41, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x20, 0x45, 0x76,
	0x65, 0x72, 0x79, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
	0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x22, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x22, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x41, 0x6e, 0x20,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x32, 0x2d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x79, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x58, 0x92, 0x41, 0x55, 0x32, 0x53, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x73, 0x65, 0x6e,
	0x64, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x73, 0x92, 0x41, 0x70, 0x32, 0x6e, 0x50, 0x65,
	0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x6f,
	0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x20, 0x70,
	0x65, 0x72, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x4b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x20, 0x28, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x20, 0x46, 0x50, 0x53,
	0x20, 0x6d, 0x61, 0x79, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x46, 0x70, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x32,
	0x69, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x6d,
	0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x70, 0x65, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x42, 0x47, 0x50, 0x20, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x48,
	0x92, 0x41, 0x45, 0x32, 0x43, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x61, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x75, 0x6c, 0x6c, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x42, 0x92, 0x41, 0x3b,
	0x32, 0x39, 0x54, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x55, 0x54, 0x43, 0x2e, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x01, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x4b, 0x92, 0x41, 0x44, 0x32, 0x42, 0x54, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
	0x20, 0x69, 0x6e, 0x20, 0x55, 0x54, 0x43, 0x2e, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x69, 0x67, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x4d, 0x61, 0x78, 0x20, 0x46, 0x50, 0x53,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x73, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x42, 0x69, 0x67, 0x64, 0x61, 0x74, 0x61, 0x46, 0x70, 0x73, 0x12, 0x6f, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x32, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x72,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x54, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2a, 0xb7, 0x0b, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x31, 0x30, 0x5f, 0x43, 0x47, 0x4e, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x53, 0x46, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45,
	0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x41, 0x53, 0x41, 0x10,
	0x05, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x41, 0x53, 0x41, 0x5f, 0x53, 0x59,
	0x53, 0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x4e,
	0x42, 0x41, 0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x4e, 0x56,
	0x5a, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f,
	0x53, 0x44, 0x57, 0x41, 0x4e, 0x5f, 0x58, 0x45, 0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x53,
	0x43, 0x4f, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x49,
	0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x4e,
	0x45, 0x54, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x45, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x54, 0x49, 0x47, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x43,
	0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x0d, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x43, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x49, 0x47, 0x41, 0x4d, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x42, 0x4d, 0x5f, 0x53,
	0x55, 0x42, 0x4e, 0x45, 0x54, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x58, 0x52,
	0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x54, 0x49, 0x4f, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a,
	0x55, 0x4e, 0x49, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x44, 0x4f, 0x53, 0x10, 0x13, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4b, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x41, 0x50, 0x50, 0x41,
	0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x16, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x52, 0x4f,
	0x42, 0x45, 0x5f, 0x54, 0x41, 0x50, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x41, 0x4b, 0x49, 0x10, 0x1a, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x1b, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4b, 0x49, 0x41, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x32, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x52, 0x4f, 0x42, 0x45,
	0x10, 0x1d, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x49, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x4f,
	0x47, 0x10, 0x1e, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x49, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54,
	0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4e, 0x4d, 0x53, 0x10, 0x20, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x4c, 0x4f, 0x41, 0x4c, 0x54, 0x4f, 0x10, 0x21, 0x12, 0x27, 0x0a, 0x23,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x4c, 0x4f, 0x41, 0x4c, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x53, 0x4d, 0x41, 0x53, 0x44,
	0x57, 0x41, 0x4e, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x46, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x24, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x25,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x26, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x41, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x50, 0x54, 0x45, 0x4c, 0x41, 0x10, 0x29,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x10, 0x2a, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x56,
	0x53, 0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x2b, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e,
	0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x10, 0x2d, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x44, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x2e, 0x42, 0x4b, 0x5a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kentik_plan_v202501alpha1_plan_message_proto_rawDescOnce sync.Once
	file_kentik_plan_v202501alpha1_plan_message_proto_rawDescData = file_kentik_plan_v202501alpha1_plan_message_proto_rawDesc
)

func file_kentik_plan_v202501alpha1_plan_message_proto_rawDescGZIP() []byte {
	file_kentik_plan_v202501alpha1_plan_message_proto_rawDescOnce.Do(func() {
		file_kentik_plan_v202501alpha1_plan_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_plan_v202501alpha1_plan_message_proto_rawDescData)
	})
	return file_kentik_plan_v202501alpha1_plan_message_proto_rawDescData
}

var file_kentik_plan_v202501alpha1_plan_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_kentik_plan_v202501alpha1_plan_message_proto_goTypes = []interface{}{
	(DeviceSubtype)(0),            // 0: kentik.plan.v202501alpha1.DeviceSubtype
	(*PlanDevice)(nil),            // 1: kentik.plan.v202501alpha1.PlanDevice
	(*Plan)(nil),                  // 2: kentik.plan.v202501alpha1.Plan
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_kentik_plan_v202501alpha1_plan_message_proto_depIdxs = []int32{
	0, // 0: kentik.plan.v202501alpha1.PlanDevice.device_subtype:type_name -> kentik.plan.v202501alpha1.DeviceSubtype
	3, // 1: kentik.plan.v202501alpha1.Plan.created_date:type_name -> google.protobuf.Timestamp
	3, // 2: kentik.plan.v202501alpha1.Plan.updated_date:type_name -> google.protobuf.Timestamp
	0, // 3: kentik.plan.v202501alpha1.Plan.device_types:type_name -> kentik.plan.v202501alpha1.DeviceSubtype
	1, // 4: kentik.plan.v202501alpha1.Plan.devices:type_name -> kentik.plan.v202501alpha1.PlanDevice
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kentik_plan_v202501alpha1_plan_message_proto_init() }
func file_kentik_plan_v202501alpha1_plan_message_proto_init() {
	if File_kentik_plan_v202501alpha1_plan_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_plan_v202501alpha1_plan_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kentik_plan_v202501alpha1_plan_message_proto_goTypes,
		DependencyIndexes: file_kentik_plan_v202501alpha1_plan_message_proto_depIdxs,
		EnumInfos:         file_kentik_plan_v202501alpha1_plan_message_proto_enumTypes,
		MessageInfos:      file_kentik_plan_v202501alpha1_plan_message_proto_msgTypes,
	}.Build()
	File_kentik_plan_v202501alpha1_plan_message_proto = out.File
	file_kentik_plan_v202501alpha1_plan_message_proto_rawDesc = nil
	file_kentik_plan_v202501alpha1_plan_message_proto_goTypes = nil
	file_kentik_plan_v202501alpha1_plan_message_proto_depIdxs = nil
}
