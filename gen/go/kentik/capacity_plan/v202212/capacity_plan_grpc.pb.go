// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/capacity_plan/v202212/capacity_plan.proto

package capacity_plan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CapacityPlanService_ListCapacitySummaries_FullMethodName = "/kentik.capacity_plan.v202212.CapacityPlanService/ListCapacitySummaries"
	CapacityPlanService_GetCapacitySummary_FullMethodName    = "/kentik.capacity_plan.v202212.CapacityPlanService/GetCapacitySummary"
	CapacityPlanService_ListCapacityPlans_FullMethodName     = "/kentik.capacity_plan.v202212.CapacityPlanService/ListCapacityPlans"
	CapacityPlanService_GetCapacityPlan_FullMethodName       = "/kentik.capacity_plan.v202212.CapacityPlanService/GetCapacityPlan"
)

// CapacityPlanServiceClient is the client API for CapacityPlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapacityPlanServiceClient interface {
	ListCapacitySummaries(ctx context.Context, in *ListCapacitySummariesRequest, opts ...grpc.CallOption) (*ListCapacitySummariesResponse, error)
	GetCapacitySummary(ctx context.Context, in *GetCapacitySummaryRequest, opts ...grpc.CallOption) (*GetCapacitySummaryResponse, error)
	ListCapacityPlans(ctx context.Context, in *ListCapacityPlansRequest, opts ...grpc.CallOption) (*ListCapacityPlansResponse, error)
	GetCapacityPlan(ctx context.Context, in *GetCapacityPlanRequest, opts ...grpc.CallOption) (*GetCapacityPlanResponse, error)
}

type capacityPlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCapacityPlanServiceClient(cc grpc.ClientConnInterface) CapacityPlanServiceClient {
	return &capacityPlanServiceClient{cc}
}

func (c *capacityPlanServiceClient) ListCapacitySummaries(ctx context.Context, in *ListCapacitySummariesRequest, opts ...grpc.CallOption) (*ListCapacitySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCapacitySummariesResponse)
	err := c.cc.Invoke(ctx, CapacityPlanService_ListCapacitySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityPlanServiceClient) GetCapacitySummary(ctx context.Context, in *GetCapacitySummaryRequest, opts ...grpc.CallOption) (*GetCapacitySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCapacitySummaryResponse)
	err := c.cc.Invoke(ctx, CapacityPlanService_GetCapacitySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityPlanServiceClient) ListCapacityPlans(ctx context.Context, in *ListCapacityPlansRequest, opts ...grpc.CallOption) (*ListCapacityPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCapacityPlansResponse)
	err := c.cc.Invoke(ctx, CapacityPlanService_ListCapacityPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityPlanServiceClient) GetCapacityPlan(ctx context.Context, in *GetCapacityPlanRequest, opts ...grpc.CallOption) (*GetCapacityPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCapacityPlanResponse)
	err := c.cc.Invoke(ctx, CapacityPlanService_GetCapacityPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapacityPlanServiceServer is the server API for CapacityPlanService service.
// All implementations should embed UnimplementedCapacityPlanServiceServer
// for forward compatibility.
type CapacityPlanServiceServer interface {
	ListCapacitySummaries(context.Context, *ListCapacitySummariesRequest) (*ListCapacitySummariesResponse, error)
	GetCapacitySummary(context.Context, *GetCapacitySummaryRequest) (*GetCapacitySummaryResponse, error)
	ListCapacityPlans(context.Context, *ListCapacityPlansRequest) (*ListCapacityPlansResponse, error)
	GetCapacityPlan(context.Context, *GetCapacityPlanRequest) (*GetCapacityPlanResponse, error)
}

// UnimplementedCapacityPlanServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCapacityPlanServiceServer struct{}

func (UnimplementedCapacityPlanServiceServer) ListCapacitySummaries(context.Context, *ListCapacitySummariesRequest) (*ListCapacitySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCapacitySummaries not implemented")
}
func (UnimplementedCapacityPlanServiceServer) GetCapacitySummary(context.Context, *GetCapacitySummaryRequest) (*GetCapacitySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacitySummary not implemented")
}
func (UnimplementedCapacityPlanServiceServer) ListCapacityPlans(context.Context, *ListCapacityPlansRequest) (*ListCapacityPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCapacityPlans not implemented")
}
func (UnimplementedCapacityPlanServiceServer) GetCapacityPlan(context.Context, *GetCapacityPlanRequest) (*GetCapacityPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacityPlan not implemented")
}
func (UnimplementedCapacityPlanServiceServer) testEmbeddedByValue() {}

// UnsafeCapacityPlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapacityPlanServiceServer will
// result in compilation errors.
type UnsafeCapacityPlanServiceServer interface {
	mustEmbedUnimplementedCapacityPlanServiceServer()
}

func RegisterCapacityPlanServiceServer(s grpc.ServiceRegistrar, srv CapacityPlanServiceServer) {
	// If the following call pancis, it indicates UnimplementedCapacityPlanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CapacityPlanService_ServiceDesc, srv)
}

func _CapacityPlanService_ListCapacitySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCapacitySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanServiceServer).ListCapacitySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CapacityPlanService_ListCapacitySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanServiceServer).ListCapacitySummaries(ctx, req.(*ListCapacitySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapacityPlanService_GetCapacitySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapacitySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanServiceServer).GetCapacitySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CapacityPlanService_GetCapacitySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanServiceServer).GetCapacitySummary(ctx, req.(*GetCapacitySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapacityPlanService_ListCapacityPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCapacityPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanServiceServer).ListCapacityPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CapacityPlanService_ListCapacityPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanServiceServer).ListCapacityPlans(ctx, req.(*ListCapacityPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapacityPlanService_GetCapacityPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapacityPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanServiceServer).GetCapacityPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CapacityPlanService_GetCapacityPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanServiceServer).GetCapacityPlan(ctx, req.(*GetCapacityPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CapacityPlanService_ServiceDesc is the grpc.ServiceDesc for CapacityPlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CapacityPlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.capacity_plan.v202212.CapacityPlanService",
	HandlerType: (*CapacityPlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCapacitySummaries",
			Handler:    _CapacityPlanService_ListCapacitySummaries_Handler,
		},
		{
			MethodName: "GetCapacitySummary",
			Handler:    _CapacityPlanService_GetCapacitySummary_Handler,
		},
		{
			MethodName: "ListCapacityPlans",
			Handler:    _CapacityPlanService_ListCapacityPlans_Handler,
		},
		{
			MethodName: "GetCapacityPlan",
			Handler:    _CapacityPlanService_GetCapacityPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/capacity_plan/v202212/capacity_plan.proto",
}
