// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/capacity_plan/v202212/capacity_plan.proto

package capacity_plan

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runout      *Config_RunoutConfig `protobuf:"bytes,1,opt,name=runout,proto3" json:"runout,omitempty"`
	Utilization *Config_UtilConfig   `protobuf:"bytes,2,opt,name=utilization,proto3" json:"utilization,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetRunout() *Config_RunoutConfig {
	if x != nil {
		return x.Runout
	}
	return nil
}

func (x *Config) GetUtilization() *Config_UtilConfig {
	if x != nil {
		return x.Utilization
	}
	return nil
}

// {{.Name}}
type SummaryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runout      *SummaryStatus_RunoutStatus `protobuf:"bytes,1,opt,name=runout,proto3" json:"runout,omitempty"`
	Utilization *SummaryStatus_UtilStatus   `protobuf:"bytes,2,opt,name=utilization,proto3" json:"utilization,omitempty"`
}

func (x *SummaryStatus) Reset() {
	*x = SummaryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryStatus) ProtoMessage() {}

func (x *SummaryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryStatus.ProtoReflect.Descriptor instead.
func (*SummaryStatus) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{1}
}

func (x *SummaryStatus) GetRunout() *SummaryStatus_RunoutStatus {
	if x != nil {
		return x.Runout
	}
	return nil
}

func (x *SummaryStatus) GetUtilization() *SummaryStatus_UtilStatus {
	if x != nil {
		return x.Utilization
	}
	return nil
}

// {{.Name}}
type CapacitySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status        string                            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Interfaces    *CapacitySummary_InterfacesDetail `protobuf:"bytes,5,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	Config        *Config                           `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	SummaryStatus *SummaryStatus                    `protobuf:"bytes,7,opt,name=summary_status,json=summaryStatus,proto3" json:"summary_status,omitempty"`
}

func (x *CapacitySummary) Reset() {
	*x = CapacitySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacitySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacitySummary) ProtoMessage() {}

func (x *CapacitySummary) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacitySummary.ProtoReflect.Descriptor instead.
func (*CapacitySummary) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{2}
}

func (x *CapacitySummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CapacitySummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CapacitySummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CapacitySummary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CapacitySummary) GetInterfaces() *CapacitySummary_InterfacesDetail {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *CapacitySummary) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CapacitySummary) GetSummaryStatus() *SummaryStatus {
	if x != nil {
		return x.SummaryStatus
	}
	return nil
}

// {{.Name}}
type CapacityPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status        string                          `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Interfaces    []*CapacityPlan_InterfaceDetail `protobuf:"bytes,5,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Config        *Config                         `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	SummaryStatus *SummaryStatus                  `protobuf:"bytes,7,opt,name=summary_status,json=summaryStatus,proto3" json:"summary_status,omitempty"`
}

func (x *CapacityPlan) Reset() {
	*x = CapacityPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacityPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityPlan) ProtoMessage() {}

func (x *CapacityPlan) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityPlan.ProtoReflect.Descriptor instead.
func (*CapacityPlan) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{3}
}

func (x *CapacityPlan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CapacityPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CapacityPlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CapacityPlan) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CapacityPlan) GetInterfaces() []*CapacityPlan_InterfaceDetail {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *CapacityPlan) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CapacityPlan) GetSummaryStatus() *SummaryStatus {
	if x != nil {
		return x.SummaryStatus
	}
	return nil
}

// {{.Name}}
type ListCapacitySummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCapacitySummariesRequest) Reset() {
	*x = ListCapacitySummariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCapacitySummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCapacitySummariesRequest) ProtoMessage() {}

func (x *ListCapacitySummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCapacitySummariesRequest.ProtoReflect.Descriptor instead.
func (*ListCapacitySummariesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{4}
}

// {{.Name}}
type ListCapacitySummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity     []*CapacitySummary `protobuf:"bytes,1,rep,name=capacity,proto3" json:"capacity,omitempty"`
	InvalidCount uint32             `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListCapacitySummariesResponse) Reset() {
	*x = ListCapacitySummariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCapacitySummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCapacitySummariesResponse) ProtoMessage() {}

func (x *ListCapacitySummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCapacitySummariesResponse.ProtoReflect.Descriptor instead.
func (*ListCapacitySummariesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{5}
}

func (x *ListCapacitySummariesResponse) GetCapacity() []*CapacitySummary {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *ListCapacitySummariesResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetCapacitySummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCapacitySummaryRequest) Reset() {
	*x = GetCapacitySummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCapacitySummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapacitySummaryRequest) ProtoMessage() {}

func (x *GetCapacitySummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapacitySummaryRequest.ProtoReflect.Descriptor instead.
func (*GetCapacitySummaryRequest) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{6}
}

func (x *GetCapacitySummaryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetCapacitySummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity *CapacitySummary `protobuf:"bytes,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *GetCapacitySummaryResponse) Reset() {
	*x = GetCapacitySummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCapacitySummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapacitySummaryResponse) ProtoMessage() {}

func (x *GetCapacitySummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapacitySummaryResponse.ProtoReflect.Descriptor instead.
func (*GetCapacitySummaryResponse) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{7}
}

func (x *GetCapacitySummaryResponse) GetCapacity() *CapacitySummary {
	if x != nil {
		return x.Capacity
	}
	return nil
}

// {{.Name}}
type ListCapacityPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCapacityPlansRequest) Reset() {
	*x = ListCapacityPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCapacityPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCapacityPlansRequest) ProtoMessage() {}

func (x *ListCapacityPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCapacityPlansRequest.ProtoReflect.Descriptor instead.
func (*ListCapacityPlansRequest) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{8}
}

// {{.Name}}
type ListCapacityPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity     []*CapacityPlan `protobuf:"bytes,1,rep,name=capacity,proto3" json:"capacity,omitempty"`
	InvalidCount uint32          `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListCapacityPlansResponse) Reset() {
	*x = ListCapacityPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCapacityPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCapacityPlansResponse) ProtoMessage() {}

func (x *ListCapacityPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCapacityPlansResponse.ProtoReflect.Descriptor instead.
func (*ListCapacityPlansResponse) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{9}
}

func (x *ListCapacityPlansResponse) GetCapacity() []*CapacityPlan {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *ListCapacityPlansResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetCapacityPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCapacityPlanRequest) Reset() {
	*x = GetCapacityPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCapacityPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapacityPlanRequest) ProtoMessage() {}

func (x *GetCapacityPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapacityPlanRequest.ProtoReflect.Descriptor instead.
func (*GetCapacityPlanRequest) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{10}
}

func (x *GetCapacityPlanRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetCapacityPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity *CapacityPlan `protobuf:"bytes,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (x *GetCapacityPlanResponse) Reset() {
	*x = GetCapacityPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCapacityPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapacityPlanResponse) ProtoMessage() {}

func (x *GetCapacityPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapacityPlanResponse.ProtoReflect.Descriptor instead.
func (*GetCapacityPlanResponse) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{11}
}

func (x *GetCapacityPlanResponse) GetCapacity() *CapacityPlan {
	if x != nil {
		return x.Capacity
	}
	return nil
}

// {{.Name}}
type Config_RunoutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy string  `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	WarnQty  *uint32 `protobuf:"varint,2,opt,name=warn_qty,json=warnQty,proto3,oneof" json:"warn_qty,omitempty"`
	CritQty  *uint32 `protobuf:"varint,3,opt,name=crit_qty,json=critQty,proto3,oneof" json:"crit_qty,omitempty"`
}

func (x *Config_RunoutConfig) Reset() {
	*x = Config_RunoutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_RunoutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_RunoutConfig) ProtoMessage() {}

func (x *Config_RunoutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_RunoutConfig.ProtoReflect.Descriptor instead.
func (*Config_RunoutConfig) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Config_RunoutConfig) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *Config_RunoutConfig) GetWarnQty() uint32 {
	if x != nil && x.WarnQty != nil {
		return *x.WarnQty
	}
	return 0
}

func (x *Config_RunoutConfig) GetCritQty() uint32 {
	if x != nil && x.CritQty != nil {
		return *x.CritQty
	}
	return 0
}

// {{.Name}}
type Config_UtilConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregate string  `protobuf:"bytes,1,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	WarnPct   *uint32 `protobuf:"varint,2,opt,name=warn_pct,json=warnPct,proto3,oneof" json:"warn_pct,omitempty"`
	CritPct   *uint32 `protobuf:"varint,3,opt,name=crit_pct,json=critPct,proto3,oneof" json:"crit_pct,omitempty"`
}

func (x *Config_UtilConfig) Reset() {
	*x = Config_UtilConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_UtilConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_UtilConfig) ProtoMessage() {}

func (x *Config_UtilConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_UtilConfig.ProtoReflect.Descriptor instead.
func (*Config_UtilConfig) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Config_UtilConfig) GetAggregate() string {
	if x != nil {
		return x.Aggregate
	}
	return ""
}

func (x *Config_UtilConfig) GetWarnPct() uint32 {
	if x != nil && x.WarnPct != nil {
		return *x.WarnPct
	}
	return 0
}

func (x *Config_UtilConfig) GetCritPct() uint32 {
	if x != nil && x.CritPct != nil {
		return *x.CritPct
	}
	return 0
}

// {{.Name}}
type SummaryStatus_RunoutStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EarliestDate *uint64 `protobuf:"varint,2,opt,name=earliest_date,json=earliestDate,proto3,oneof" json:"earliest_date,omitempty"`
}

func (x *SummaryStatus_RunoutStatus) Reset() {
	*x = SummaryStatus_RunoutStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryStatus_RunoutStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryStatus_RunoutStatus) ProtoMessage() {}

func (x *SummaryStatus_RunoutStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryStatus_RunoutStatus.ProtoReflect.Descriptor instead.
func (*SummaryStatus_RunoutStatus) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SummaryStatus_RunoutStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SummaryStatus_RunoutStatus) GetEarliestDate() uint64 {
	if x != nil && x.EarliestDate != nil {
		return *x.EarliestDate
	}
	return 0
}

// {{.Name}}
type SummaryStatus_UtilStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	HighestPct *uint32 `protobuf:"varint,2,opt,name=highest_pct,json=highestPct,proto3,oneof" json:"highest_pct,omitempty"`
}

func (x *SummaryStatus_UtilStatus) Reset() {
	*x = SummaryStatus_UtilStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryStatus_UtilStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryStatus_UtilStatus) ProtoMessage() {}

func (x *SummaryStatus_UtilStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryStatus_UtilStatus.ProtoReflect.Descriptor instead.
func (*SummaryStatus_UtilStatus) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SummaryStatus_UtilStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SummaryStatus_UtilStatus) GetHighestPct() uint32 {
	if x != nil && x.HighestPct != nil {
		return *x.HighestPct
	}
	return 0
}

// {{.Name}}
type CapacitySummary_InterfacesDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount       *uint32                                        `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	TotalCapacityBps *uint64                                        `protobuf:"varint,2,opt,name=total_capacity_bps,json=totalCapacityBps,proto3,oneof" json:"total_capacity_bps,omitempty"`
	Healthy          *CapacitySummary_InterfacesDetail_StatusDetail `protobuf:"bytes,3,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Warning          *CapacitySummary_InterfacesDetail_StatusDetail `protobuf:"bytes,4,opt,name=warning,proto3" json:"warning,omitempty"`
	Critical         *CapacitySummary_InterfacesDetail_StatusDetail `protobuf:"bytes,5,opt,name=critical,proto3" json:"critical,omitempty"`
}

func (x *CapacitySummary_InterfacesDetail) Reset() {
	*x = CapacitySummary_InterfacesDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacitySummary_InterfacesDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacitySummary_InterfacesDetail) ProtoMessage() {}

func (x *CapacitySummary_InterfacesDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacitySummary_InterfacesDetail.ProtoReflect.Descriptor instead.
func (*CapacitySummary_InterfacesDetail) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CapacitySummary_InterfacesDetail) GetTotalCount() uint32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CapacitySummary_InterfacesDetail) GetTotalCapacityBps() uint64 {
	if x != nil && x.TotalCapacityBps != nil {
		return *x.TotalCapacityBps
	}
	return 0
}

func (x *CapacitySummary_InterfacesDetail) GetHealthy() *CapacitySummary_InterfacesDetail_StatusDetail {
	if x != nil {
		return x.Healthy
	}
	return nil
}

func (x *CapacitySummary_InterfacesDetail) GetWarning() *CapacitySummary_InterfacesDetail_StatusDetail {
	if x != nil {
		return x.Warning
	}
	return nil
}

func (x *CapacitySummary_InterfacesDetail) GetCritical() *CapacitySummary_InterfacesDetail_StatusDetail {
	if x != nil {
		return x.Critical
	}
	return nil
}

// {{.Name}}
type CapacitySummary_InterfacesDetail_StatusDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bps   *uint64 `protobuf:"varint,1,opt,name=bps,proto3,oneof" json:"bps,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *CapacitySummary_InterfacesDetail_StatusDetail) Reset() {
	*x = CapacitySummary_InterfacesDetail_StatusDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacitySummary_InterfacesDetail_StatusDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacitySummary_InterfacesDetail_StatusDetail) ProtoMessage() {}

func (x *CapacitySummary_InterfacesDetail_StatusDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacitySummary_InterfacesDetail_StatusDetail.ProtoReflect.Descriptor instead.
func (*CapacitySummary_InterfacesDetail_StatusDetail) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *CapacitySummary_InterfacesDetail_StatusDetail) GetBps() uint64 {
	if x != nil && x.Bps != nil {
		return *x.Bps
	}
	return 0
}

func (x *CapacitySummary_InterfacesDetail_StatusDetail) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// {{.Name}}
type CapacityPlan_InterfaceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName         string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	IntfName           string `protobuf:"bytes,2,opt,name=intf_name,json=intfName,proto3" json:"intf_name,omitempty"`
	IntfDescription    string `protobuf:"bytes,3,opt,name=intf_description,json=intfDescription,proto3" json:"intf_description,omitempty"`
	IntfCapacity       string `protobuf:"bytes,4,opt,name=intf_capacity,json=intfCapacity,proto3" json:"intf_capacity,omitempty"`
	NetworkBoundary    string `protobuf:"bytes,5,opt,name=network_boundary,json=networkBoundary,proto3" json:"network_boundary,omitempty"`
	ConnType           string `protobuf:"bytes,6,opt,name=conn_type,json=connType,proto3" json:"conn_type,omitempty"`
	Provider           string `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
	UtilStatus         string `protobuf:"bytes,8,opt,name=util_status,json=utilStatus,proto3" json:"util_status,omitempty"`
	UtilOutMbps        string `protobuf:"bytes,9,opt,name=util_out_mbps,json=utilOutMbps,proto3" json:"util_out_mbps,omitempty"`
	UtilOutPct         string `protobuf:"bytes,10,opt,name=util_out_pct,json=utilOutPct,proto3" json:"util_out_pct,omitempty"`
	UtilInMbps         string `protobuf:"bytes,11,opt,name=util_in_mbps,json=utilInMbps,proto3" json:"util_in_mbps,omitempty"`
	UtilInPct          string `protobuf:"bytes,12,opt,name=util_in_pct,json=utilInPct,proto3" json:"util_in_pct,omitempty"`
	RunoutStatus       string `protobuf:"bytes,13,opt,name=runout_status,json=runoutStatus,proto3" json:"runout_status,omitempty"`
	RunoutInDate       string `protobuf:"bytes,14,opt,name=runout_in_date,json=runoutInDate,proto3" json:"runout_in_date,omitempty"`
	RunoutInVariation  string `protobuf:"bytes,15,opt,name=runout_in_variation,json=runoutInVariation,proto3" json:"runout_in_variation,omitempty"`
	RunoutOutDate      string `protobuf:"bytes,16,opt,name=runout_out_date,json=runoutOutDate,proto3" json:"runout_out_date,omitempty"`
	RunoutOutVariation string `protobuf:"bytes,17,opt,name=runout_out_variation,json=runoutOutVariation,proto3" json:"runout_out_variation,omitempty"`
}

func (x *CapacityPlan_InterfaceDetail) Reset() {
	*x = CapacityPlan_InterfaceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacityPlan_InterfaceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityPlan_InterfaceDetail) ProtoMessage() {}

func (x *CapacityPlan_InterfaceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityPlan_InterfaceDetail.ProtoReflect.Descriptor instead.
func (*CapacityPlan_InterfaceDetail) Descriptor() ([]byte, []int) {
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CapacityPlan_InterfaceDetail) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetIntfName() string {
	if x != nil {
		return x.IntfName
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetIntfDescription() string {
	if x != nil {
		return x.IntfDescription
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetIntfCapacity() string {
	if x != nil {
		return x.IntfCapacity
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetNetworkBoundary() string {
	if x != nil {
		return x.NetworkBoundary
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetConnType() string {
	if x != nil {
		return x.ConnType
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetUtilStatus() string {
	if x != nil {
		return x.UtilStatus
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetUtilOutMbps() string {
	if x != nil {
		return x.UtilOutMbps
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetUtilOutPct() string {
	if x != nil {
		return x.UtilOutPct
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetUtilInMbps() string {
	if x != nil {
		return x.UtilInMbps
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetUtilInPct() string {
	if x != nil {
		return x.UtilInPct
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetRunoutStatus() string {
	if x != nil {
		return x.RunoutStatus
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetRunoutInDate() string {
	if x != nil {
		return x.RunoutInDate
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetRunoutInVariation() string {
	if x != nil {
		return x.RunoutInVariation
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetRunoutOutDate() string {
	if x != nil {
		return x.RunoutOutDate
	}
	return ""
}

func (x *CapacityPlan_InterfaceDetail) GetRunoutOutVariation() string {
	if x != nil {
		return x.RunoutOutVariation
	}
	return ""
}

var File_kentik_capacity_plan_v202212_capacity_plan_proto protoreflect.FileDescriptor

var file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd9, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1c, 0x92,
	0x41, 0x16, 0x32, 0x14, 0x52, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x75, 0x6e,
	0x6f, 0x75, 0x74, 0x12, 0x74, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55,
	0x74, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32, 0x19,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xec, 0x01, 0x0a, 0x0c, 0x52, 0x75,
	0x6e, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x15, 0x32, 0x13, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x23, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61,
	0x72, 0x6e, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32,
	0x1c, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0xe0, 0x41, 0x03,
	0x48, 0x01, 0x52, 0x07, 0x63, 0x72, 0x69, 0x74, 0x51, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x1a, 0x80, 0x02, 0x0a, 0x0a, 0x55, 0x74, 0x69,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x70, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32,
	0x22, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x50, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x5f, 0x70, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x25, 0x32, 0x23, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x07, 0x63, 0x72, 0x69, 0x74, 0x50, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x0d,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a,
	0x06, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x6f, 0x75,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x15, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x52, 0x75,
	0x6e, 0x6f, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x74, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xe0, 0x41, 0x03, 0x52,
	0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9a, 0x01, 0x0a,
	0x0c, 0x52, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x12, 0x32, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x75,
	0x6e, 0x6f, 0x75, 0x74, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1c, 0x92, 0x41, 0x16, 0x32, 0x14, 0x45, 0x61, 0x72,
	0x6c, 0x69, 0x65, 0x73, 0x74, 0x20, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x65, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xa1, 0x01, 0x0a, 0x0a, 0x55, 0x74,
	0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4c, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0a,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x22, 0xc4, 0x0a,
	0x0a, 0x0f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92,
	0x41, 0x15, 0x32, 0x13, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x17, 0x32, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x19, 0x32, 0x17,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x79, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x27, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41,
	0x03, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0xf1, 0x05, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x32,
	0x1a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0xe0, 0x41, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d, 0x92, 0x41, 0x17,
	0x32, 0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x20, 0x69, 0x6e, 0x20, 0x62, 0x70, 0x73, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x70, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0xe0, 0x41, 0x03,
	0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32, 0x13,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x1a, 0x8a, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2f, 0x0a, 0x03, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18,
	0x92, 0x41, 0x12, 0x32, 0x10, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x69,
	0x6e, 0x20, 0x62, 0x70, 0x73, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x03, 0x62, 0x70, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1c, 0x92, 0x41, 0x16, 0x32, 0x14, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0xe0, 0x41, 0x03, 0x48,
	0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x62, 0x70, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x62, 0x70, 0x73, 0x22, 0x9e, 0x0d, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32, 0x13, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32,
	0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x19, 0x32, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x64,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x27, 0x92, 0x41, 0x21, 0x32, 0x1f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0,
	0x41, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0xd1, 0x08, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32,
	0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x66, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0x92, 0x41, 0x14, 0x32, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x66, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x12, 0x32, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0xe0, 0x41, 0x03, 0x52,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x14,
	0x32, 0x12, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x74, 0x69, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x62, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x16, 0x32,
	0x14, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x62, 0x70, 0x73, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x4f, 0x75,
	0x74, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x75, 0x74, 0x69, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1c,
	0x32, 0x1a, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x75, 0x74, 0x69, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x75,
	0x74, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32, 0x13, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x62, 0x70, 0x73, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x75, 0x74, 0x69, 0x6c, 0x49, 0x6e, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x74,
	0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x75, 0x74, 0x69, 0x6c, 0x49, 0x6e, 0x50, 0x63, 0x74, 0x12, 0x3a, 0x0a,
	0x0d, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x52, 0x75, 0x6e, 0x6f, 0x75,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x72, 0x75, 0x6e,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x75, 0x6e,
	0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x52, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x20, 0x69,
	0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6f, 0x75,
	0x74, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x75, 0x6e, 0x6f, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32, 0x13, 0x52, 0x75, 0x6e, 0x6f, 0x75,
	0x74, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe0, 0x41,
	0x03, 0x52, 0x11, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x11, 0x32, 0x0f, 0x52, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x4f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x16, 0x32, 0x14, 0x52, 0x75, 0x6e, 0x6f, 0x75, 0x74,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe0, 0x41,
	0x03, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6f, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x6c, 0x61, 0x6e, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c,
	0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e,
	0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa3, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x6c, 0x61, 0x6e, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x32, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d,
	0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0x92, 0x41, 0x23, 0x32, 0x21, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x2c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x32, 0x9e, 0x0a, 0x0a, 0x13, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xc0, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xad, 0x01, 0x92, 0x41, 0x5a, 0x12, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x1a, 0x23, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x2a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0xc7, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x92,
	0x41, 0x65, 0x12, 0x1f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x1a, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x49, 0x44, 0x2e, 0x2a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x32, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0xa0, 0x02, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x99, 0x01, 0x92, 0x41, 0x4e, 0x12, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61,
	0x6e, 0x73, 0x2e, 0x1a, 0x1f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c,
	0x61, 0x6e, 0x73, 0x2e, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x32, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x12,
	0xa3, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa2, 0x01, 0x92, 0x41, 0x52, 0x12, 0x17, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x1a,
	0x26, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x2a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x32, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x31, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02,
	0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x90, 0xd8, 0x02, 0x03, 0x42, 0xfe, 0x03, 0x5a, 0x55, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x32, 0x3b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x92, 0x41, 0xa3, 0x03, 0x12, 0xbc, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x20, 0x50, 0x6c, 0x61, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x12, 0x57, 0x23, 0x20,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x20, 0x50, 0x6c, 0x61, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x32, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a,
	0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a, 0x25, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41,
	0x50, 0x49, 0x73, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x41, 0x62,
	0x30, 0x39, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x41, 0x62, 0x30, 0x39, 0x2d, 0x41, 0x50, 0x49, 0x73,
	0x5f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescOnce sync.Once
	file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescData = file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDesc
)

func file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescGZIP() []byte {
	file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescOnce.Do(func() {
		file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescData)
	})
	return file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDescData
}

var file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_kentik_capacity_plan_v202212_capacity_plan_proto_goTypes = []interface{}{
	(*Config)(nil),                                        // 0: kentik.capacity_plan.v202212.Config
	(*SummaryStatus)(nil),                                 // 1: kentik.capacity_plan.v202212.SummaryStatus
	(*CapacitySummary)(nil),                               // 2: kentik.capacity_plan.v202212.CapacitySummary
	(*CapacityPlan)(nil),                                  // 3: kentik.capacity_plan.v202212.CapacityPlan
	(*ListCapacitySummariesRequest)(nil),                  // 4: kentik.capacity_plan.v202212.ListCapacitySummariesRequest
	(*ListCapacitySummariesResponse)(nil),                 // 5: kentik.capacity_plan.v202212.ListCapacitySummariesResponse
	(*GetCapacitySummaryRequest)(nil),                     // 6: kentik.capacity_plan.v202212.GetCapacitySummaryRequest
	(*GetCapacitySummaryResponse)(nil),                    // 7: kentik.capacity_plan.v202212.GetCapacitySummaryResponse
	(*ListCapacityPlansRequest)(nil),                      // 8: kentik.capacity_plan.v202212.ListCapacityPlansRequest
	(*ListCapacityPlansResponse)(nil),                     // 9: kentik.capacity_plan.v202212.ListCapacityPlansResponse
	(*GetCapacityPlanRequest)(nil),                        // 10: kentik.capacity_plan.v202212.GetCapacityPlanRequest
	(*GetCapacityPlanResponse)(nil),                       // 11: kentik.capacity_plan.v202212.GetCapacityPlanResponse
	(*Config_RunoutConfig)(nil),                           // 12: kentik.capacity_plan.v202212.Config.RunoutConfig
	(*Config_UtilConfig)(nil),                             // 13: kentik.capacity_plan.v202212.Config.UtilConfig
	(*SummaryStatus_RunoutStatus)(nil),                    // 14: kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus
	(*SummaryStatus_UtilStatus)(nil),                      // 15: kentik.capacity_plan.v202212.SummaryStatus.UtilStatus
	(*CapacitySummary_InterfacesDetail)(nil),              // 16: kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail
	(*CapacitySummary_InterfacesDetail_StatusDetail)(nil), // 17: kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail
	(*CapacityPlan_InterfaceDetail)(nil),                  // 18: kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail
}
var file_kentik_capacity_plan_v202212_capacity_plan_proto_depIdxs = []int32{
	12, // 0: kentik.capacity_plan.v202212.Config.runout:type_name -> kentik.capacity_plan.v202212.Config.RunoutConfig
	13, // 1: kentik.capacity_plan.v202212.Config.utilization:type_name -> kentik.capacity_plan.v202212.Config.UtilConfig
	14, // 2: kentik.capacity_plan.v202212.SummaryStatus.runout:type_name -> kentik.capacity_plan.v202212.SummaryStatus.RunoutStatus
	15, // 3: kentik.capacity_plan.v202212.SummaryStatus.utilization:type_name -> kentik.capacity_plan.v202212.SummaryStatus.UtilStatus
	16, // 4: kentik.capacity_plan.v202212.CapacitySummary.interfaces:type_name -> kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail
	0,  // 5: kentik.capacity_plan.v202212.CapacitySummary.config:type_name -> kentik.capacity_plan.v202212.Config
	1,  // 6: kentik.capacity_plan.v202212.CapacitySummary.summary_status:type_name -> kentik.capacity_plan.v202212.SummaryStatus
	18, // 7: kentik.capacity_plan.v202212.CapacityPlan.interfaces:type_name -> kentik.capacity_plan.v202212.CapacityPlan.InterfaceDetail
	0,  // 8: kentik.capacity_plan.v202212.CapacityPlan.config:type_name -> kentik.capacity_plan.v202212.Config
	1,  // 9: kentik.capacity_plan.v202212.CapacityPlan.summary_status:type_name -> kentik.capacity_plan.v202212.SummaryStatus
	2,  // 10: kentik.capacity_plan.v202212.ListCapacitySummariesResponse.capacity:type_name -> kentik.capacity_plan.v202212.CapacitySummary
	2,  // 11: kentik.capacity_plan.v202212.GetCapacitySummaryResponse.capacity:type_name -> kentik.capacity_plan.v202212.CapacitySummary
	3,  // 12: kentik.capacity_plan.v202212.ListCapacityPlansResponse.capacity:type_name -> kentik.capacity_plan.v202212.CapacityPlan
	3,  // 13: kentik.capacity_plan.v202212.GetCapacityPlanResponse.capacity:type_name -> kentik.capacity_plan.v202212.CapacityPlan
	17, // 14: kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.healthy:type_name -> kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail
	17, // 15: kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.warning:type_name -> kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail
	17, // 16: kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.critical:type_name -> kentik.capacity_plan.v202212.CapacitySummary.InterfacesDetail.StatusDetail
	4,  // 17: kentik.capacity_plan.v202212.CapacityPlanService.ListCapacitySummaries:input_type -> kentik.capacity_plan.v202212.ListCapacitySummariesRequest
	6,  // 18: kentik.capacity_plan.v202212.CapacityPlanService.GetCapacitySummary:input_type -> kentik.capacity_plan.v202212.GetCapacitySummaryRequest
	8,  // 19: kentik.capacity_plan.v202212.CapacityPlanService.ListCapacityPlans:input_type -> kentik.capacity_plan.v202212.ListCapacityPlansRequest
	10, // 20: kentik.capacity_plan.v202212.CapacityPlanService.GetCapacityPlan:input_type -> kentik.capacity_plan.v202212.GetCapacityPlanRequest
	5,  // 21: kentik.capacity_plan.v202212.CapacityPlanService.ListCapacitySummaries:output_type -> kentik.capacity_plan.v202212.ListCapacitySummariesResponse
	7,  // 22: kentik.capacity_plan.v202212.CapacityPlanService.GetCapacitySummary:output_type -> kentik.capacity_plan.v202212.GetCapacitySummaryResponse
	9,  // 23: kentik.capacity_plan.v202212.CapacityPlanService.ListCapacityPlans:output_type -> kentik.capacity_plan.v202212.ListCapacityPlansResponse
	11, // 24: kentik.capacity_plan.v202212.CapacityPlanService.GetCapacityPlan:output_type -> kentik.capacity_plan.v202212.GetCapacityPlanResponse
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_kentik_capacity_plan_v202212_capacity_plan_proto_init() }
func file_kentik_capacity_plan_v202212_capacity_plan_proto_init() {
	if File_kentik_capacity_plan_v202212_capacity_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacitySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacityPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCapacitySummariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCapacitySummariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCapacitySummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCapacitySummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCapacityPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCapacityPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCapacityPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCapacityPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_RunoutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_UtilConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryStatus_RunoutStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryStatus_UtilStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacitySummary_InterfacesDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacitySummary_InterfacesDetail_StatusDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacityPlan_InterfaceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_capacity_plan_v202212_capacity_plan_proto_goTypes,
		DependencyIndexes: file_kentik_capacity_plan_v202212_capacity_plan_proto_depIdxs,
		MessageInfos:      file_kentik_capacity_plan_v202212_capacity_plan_proto_msgTypes,
	}.Build()
	File_kentik_capacity_plan_v202212_capacity_plan_proto = out.File
	file_kentik_capacity_plan_v202212_capacity_plan_proto_rawDesc = nil
	file_kentik_capacity_plan_v202212_capacity_plan_proto_goTypes = nil
	file_kentik_capacity_plan_v202212_capacity_plan_proto_depIdxs = nil
}
