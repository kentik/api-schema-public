// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/site/v202106alpha1/site.proto

package site

import "google.golang.org/genproto/googleapis/type/latlng"
import "google.golang.org/genproto/googleapis/type/postaladdress"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SiteIpClassification) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SiteIpClassification:
		x.InfrastructureNetworks = v.GetInfrastructureNetworks()
		x.UserAccessNetworks = v.GetUserAccessNetworks()
		x.OtherIps = v.GetOtherIps()
	default:
		if v, ok := v.(interface{ GetInfrastructureNetworks() []string }); ok {
			x.InfrastructureNetworks = v.GetInfrastructureNetworks()
		}
		if v, ok := v.(interface{ GetUserAccessNetworks() []string }); ok {
			x.UserAccessNetworks = v.GetUserAccessNetworks()
		}
		if v, ok := v.(interface{ GetOtherIps() []string }); ok {
			x.OtherIps = v.GetOtherIps()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SiteIpClassification) Proto_ShallowClone() (c *SiteIpClassification) {
	if x != nil {
		c = new(SiteIpClassification)
		c.InfrastructureNetworks = x.InfrastructureNetworks
		c.UserAccessNetworks = x.UserAccessNetworks
		c.OtherIps = x.OtherIps
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SubLayer) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SubLayer:
		x.Name = v.GetName()
		x.DeviceIds = v.GetDeviceIds()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetDeviceIds() []string }); ok {
			x.DeviceIds = v.GetDeviceIds()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SubLayer) Proto_ShallowClone() (c *SubLayer) {
	if x != nil {
		c = new(SubLayer)
		c.Name = x.Name
		c.DeviceIds = x.DeviceIds
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Layer) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Layer:
		x.SubLayers = v.GetSubLayers()
	default:
		if v, ok := v.(interface{ GetSubLayers() []*SubLayer }); ok {
			x.SubLayers = v.GetSubLayers()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Layer) Proto_ShallowClone() (c *Layer) {
	if x != nil {
		c = new(Layer)
		c.SubLayers = x.SubLayers
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Site) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Site:
		x.Id = v.GetId()
		x.Title = v.GetTitle()
		x.Coordinate = v.GetCoordinate()
		x.Address = v.GetAddress()
		x.Type = v.GetType()
		x.Classification = v.GetClassification()
		x.Architecture = v.GetArchitecture()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetTitle() string }); ok {
			x.Title = v.GetTitle()
		}
		if v, ok := v.(interface{ GetCoordinate() *latlng.LatLng }); ok {
			x.Coordinate = v.GetCoordinate()
		}
		if v, ok := v.(interface {
			GetAddress() *postaladdress.PostalAddress
		}); ok {
			x.Address = v.GetAddress()
		}
		if v, ok := v.(interface{ GetType() SiteType }); ok {
			x.Type = v.GetType()
		}
		if v, ok := v.(interface{ GetClassification() *SiteIpClassification }); ok {
			x.Classification = v.GetClassification()
		}
		if v, ok := v.(interface{ GetArchitecture() []*Layer }); ok {
			x.Architecture = v.GetArchitecture()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Site) Proto_ShallowClone() (c *Site) {
	if x != nil {
		c = new(Site)
		c.Id = x.Id
		c.Title = x.Title
		c.Coordinate = x.Coordinate
		c.Address = x.Address
		c.Type = x.Type
		c.Classification = x.Classification
		c.Architecture = x.Architecture
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListSiteRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListSiteRequest) Proto_ShallowClone() (c *ListSiteRequest) {
	if x != nil {
		c = new(ListSiteRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListSiteResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListSiteResponse:
		x.Sites = v.GetSites()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetSites() []*Site }); ok {
			x.Sites = v.GetSites()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListSiteResponse) Proto_ShallowClone() (c *ListSiteResponse) {
	if x != nil {
		c = new(ListSiteResponse)
		c.Sites = x.Sites
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetSiteRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetSiteRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetSiteRequest) Proto_ShallowClone() (c *GetSiteRequest) {
	if x != nil {
		c = new(GetSiteRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetSiteResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetSiteResponse:
		x.Site = v.GetSite()
	default:
		if v, ok := v.(interface{ GetSite() *Site }); ok {
			x.Site = v.GetSite()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetSiteResponse) Proto_ShallowClone() (c *GetSiteResponse) {
	if x != nil {
		c = new(GetSiteResponse)
		c.Site = x.Site
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateSiteRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateSiteRequest:
		x.Site = v.GetSite()
	default:
		if v, ok := v.(interface{ GetSite() *Site }); ok {
			x.Site = v.GetSite()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateSiteRequest) Proto_ShallowClone() (c *CreateSiteRequest) {
	if x != nil {
		c = new(CreateSiteRequest)
		c.Site = x.Site
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateSiteResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateSiteResponse:
		x.Site = v.GetSite()
	default:
		if v, ok := v.(interface{ GetSite() *Site }); ok {
			x.Site = v.GetSite()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateSiteResponse) Proto_ShallowClone() (c *CreateSiteResponse) {
	if x != nil {
		c = new(CreateSiteResponse)
		c.Site = x.Site
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateSiteRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateSiteRequest:
		x.Site = v.GetSite()
	default:
		if v, ok := v.(interface{ GetSite() *Site }); ok {
			x.Site = v.GetSite()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateSiteRequest) Proto_ShallowClone() (c *UpdateSiteRequest) {
	if x != nil {
		c = new(UpdateSiteRequest)
		c.Site = x.Site
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateSiteResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateSiteResponse:
		x.Site = v.GetSite()
	default:
		if v, ok := v.(interface{ GetSite() *Site }); ok {
			x.Site = v.GetSite()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateSiteResponse) Proto_ShallowClone() (c *UpdateSiteResponse) {
	if x != nil {
		c = new(UpdateSiteResponse)
		c.Site = x.Site
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteSiteRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteSiteRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteSiteRequest) Proto_ShallowClone() (c *DeleteSiteRequest) {
	if x != nil {
		c = new(DeleteSiteRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteSiteResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteSiteResponse) Proto_ShallowClone() (c *DeleteSiteResponse) {
	if x != nil {
		c = new(DeleteSiteResponse)
	}
	return
}
