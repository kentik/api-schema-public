// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/site/v202211/site.proto

package site

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type SiteType int32

const (
	// Invalid value.
	SiteType_SITE_TYPE_UNSPECIFIED SiteType = 0
	// Data center site type.
	SiteType_SITE_TYPE_DATA_CENTER SiteType = 1
	// Cloud site type.
	SiteType_SITE_TYPE_CLOUD SiteType = 2
	// Branch office site type.
	SiteType_SITE_TYPE_BRANCH SiteType = 3
	// Connectivity/PoP site type.
	SiteType_SITE_TYPE_CONNECTIVITY SiteType = 4
	// Customer/partner site type.
	SiteType_SITE_TYPE_CUSTOMER SiteType = 5
	// Other site type.
	SiteType_SITE_TYPE_OTHER SiteType = 6
)

// Enum value maps for SiteType.
var (
	SiteType_name = map[int32]string{
		0: "SITE_TYPE_UNSPECIFIED",
		1: "SITE_TYPE_DATA_CENTER",
		2: "SITE_TYPE_CLOUD",
		3: "SITE_TYPE_BRANCH",
		4: "SITE_TYPE_CONNECTIVITY",
		5: "SITE_TYPE_CUSTOMER",
		6: "SITE_TYPE_OTHER",
	}
	SiteType_value = map[string]int32{
		"SITE_TYPE_UNSPECIFIED":  0,
		"SITE_TYPE_DATA_CENTER":  1,
		"SITE_TYPE_CLOUD":        2,
		"SITE_TYPE_BRANCH":       3,
		"SITE_TYPE_CONNECTIVITY": 4,
		"SITE_TYPE_CUSTOMER":     5,
		"SITE_TYPE_OTHER":        6,
	}
)

func (x SiteType) Enum() *SiteType {
	p := new(SiteType)
	*p = x
	return p
}

func (x SiteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiteType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_site_v202211_site_proto_enumTypes[0].Descriptor()
}

func (SiteType) Type() protoreflect.EnumType {
	return &file_kentik_site_v202211_site_proto_enumTypes[0]
}

func (x SiteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiteType.Descriptor instead.
func (SiteType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{0}
}

// {{.Name}}
type SiteIpAddressClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfrastructureNetworks []string `protobuf:"bytes,1,rep,name=infrastructure_networks,json=infrastructureNetworks,proto3" json:"infrastructure_networks,omitempty"`
	UserAccessNetworks     []string `protobuf:"bytes,2,rep,name=user_access_networks,json=userAccessNetworks,proto3" json:"user_access_networks,omitempty"`
	OtherNetworks          []string `protobuf:"bytes,3,rep,name=other_networks,json=otherNetworks,proto3" json:"other_networks,omitempty"`
}

func (x *SiteIpAddressClassification) Reset() {
	*x = SiteIpAddressClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteIpAddressClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteIpAddressClassification) ProtoMessage() {}

func (x *SiteIpAddressClassification) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteIpAddressClassification.ProtoReflect.Descriptor instead.
func (*SiteIpAddressClassification) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{0}
}

func (x *SiteIpAddressClassification) GetInfrastructureNetworks() []string {
	if x != nil {
		return x.InfrastructureNetworks
	}
	return nil
}

func (x *SiteIpAddressClassification) GetUserAccessNetworks() []string {
	if x != nil {
		return x.UserAccessNetworks
	}
	return nil
}

func (x *SiteIpAddressClassification) GetOtherNetworks() []string {
	if x != nil {
		return x.OtherNetworks
	}
	return nil
}

// {{.Name}}
type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DeviceIds []string `protobuf:"bytes,2,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{1}
}

func (x *Layer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Layer) GetDeviceIds() []string {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

// {{.Name}}
type LayerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layers []*Layer `protobuf:"bytes,1,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *LayerSet) Reset() {
	*x = LayerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerSet) ProtoMessage() {}

func (x *LayerSet) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerSet.ProtoReflect.Descriptor instead.
func (*LayerSet) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{2}
}

func (x *LayerSet) GetLayers() []*Layer {
	if x != nil {
		return x.Layers
	}
	return nil
}

// {{.Name}}
type PostalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	City       string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Region     string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	PostalCode string `protobuf:"bytes,4,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Country    string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *PostalAddress) Reset() {
	*x = PostalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostalAddress) ProtoMessage() {}

func (x *PostalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostalAddress.ProtoReflect.Descriptor instead.
func (*PostalAddress) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{3}
}

func (x *PostalAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PostalAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PostalAddress) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PostalAddress) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *PostalAddress) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// {{.Name}}
type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                 string                       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Lat                   float64                      `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                   float64                      `protobuf:"fixed64,5,opt,name=lon,proto3" json:"lon,omitempty"`
	PostalAddress         *PostalAddress               `protobuf:"bytes,6,opt,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`
	Type                  SiteType                     `protobuf:"varint,7,opt,name=type,proto3,enum=kentik.site.v202211.SiteType" json:"type,omitempty"`
	AddressClassification *SiteIpAddressClassification `protobuf:"bytes,8,opt,name=address_classification,json=addressClassification,proto3" json:"address_classification,omitempty"`
	Architecture          []*LayerSet                  `protobuf:"bytes,9,rep,name=architecture,proto3" json:"architecture,omitempty"`
	SiteMarket            string                       `protobuf:"bytes,10,opt,name=site_market,json=siteMarket,proto3" json:"site_market,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{4}
}

func (x *Site) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Site) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Site) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Site) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Site) GetPostalAddress() *PostalAddress {
	if x != nil {
		return x.PostalAddress
	}
	return nil
}

func (x *Site) GetType() SiteType {
	if x != nil {
		return x.Type
	}
	return SiteType_SITE_TYPE_UNSPECIFIED
}

func (x *Site) GetAddressClassification() *SiteIpAddressClassification {
	if x != nil {
		return x.AddressClassification
	}
	return nil
}

func (x *Site) GetArchitecture() []*LayerSet {
	if x != nil {
		return x.Architecture
	}
	return nil
}

func (x *Site) GetSiteMarket() string {
	if x != nil {
		return x.SiteMarket
	}
	return ""
}

// {{.Name}}
type ListSitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSitesRequest) Reset() {
	*x = ListSitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSitesRequest) ProtoMessage() {}

func (x *ListSitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSitesRequest.ProtoReflect.Descriptor instead.
func (*ListSitesRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{5}
}

// {{.Name}}
type ListSitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sites        []*Site `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites,omitempty"`
	InvalidCount uint32  `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListSitesResponse) Reset() {
	*x = ListSitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSitesResponse) ProtoMessage() {}

func (x *ListSitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSitesResponse.ProtoReflect.Descriptor instead.
func (*ListSitesResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{6}
}

func (x *ListSitesResponse) GetSites() []*Site {
	if x != nil {
		return x.Sites
	}
	return nil
}

func (x *ListSitesResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSiteRequest) Reset() {
	*x = GetSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteRequest) ProtoMessage() {}

func (x *GetSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteRequest.ProtoReflect.Descriptor instead.
func (*GetSiteRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{7}
}

func (x *GetSiteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetSiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Site *Site `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *GetSiteResponse) Reset() {
	*x = GetSiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteResponse) ProtoMessage() {}

func (x *GetSiteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteResponse.ProtoReflect.Descriptor instead.
func (*GetSiteResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{8}
}

func (x *GetSiteResponse) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

// {{.Name}}
type CreateSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Site *Site `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *CreateSiteRequest) Reset() {
	*x = CreateSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSiteRequest) ProtoMessage() {}

func (x *CreateSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSiteRequest.ProtoReflect.Descriptor instead.
func (*CreateSiteRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{9}
}

func (x *CreateSiteRequest) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

// {{.Name}}
type CreateSiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Site *Site `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *CreateSiteResponse) Reset() {
	*x = CreateSiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSiteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSiteResponse) ProtoMessage() {}

func (x *CreateSiteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSiteResponse.ProtoReflect.Descriptor instead.
func (*CreateSiteResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{10}
}

func (x *CreateSiteResponse) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

// {{.Name}}
type UpdateSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Site *Site `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *UpdateSiteRequest) Reset() {
	*x = UpdateSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSiteRequest) ProtoMessage() {}

func (x *UpdateSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSiteRequest.ProtoReflect.Descriptor instead.
func (*UpdateSiteRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSiteRequest) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

// {{.Name}}
type UpdateSiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Site *Site `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *UpdateSiteResponse) Reset() {
	*x = UpdateSiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSiteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSiteResponse) ProtoMessage() {}

func (x *UpdateSiteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSiteResponse.ProtoReflect.Descriptor instead.
func (*UpdateSiteResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSiteResponse) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

// {{.Name}}
type DeleteSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSiteRequest) Reset() {
	*x = DeleteSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSiteRequest) ProtoMessage() {}

func (x *DeleteSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSiteRequest.ProtoReflect.Descriptor instead.
func (*DeleteSiteRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteSiteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteSiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSiteResponse) Reset() {
	*x = DeleteSiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSiteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSiteResponse) ProtoMessage() {}

func (x *DeleteSiteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSiteResponse.ProtoReflect.Descriptor instead.
func (*DeleteSiteResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{14}
}

// {{.Name}}
type SiteMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	NumberOfSites uint32                 `protobuf:"varint,4,opt,name=number_of_sites,json=numberOfSites,proto3" json:"number_of_sites,omitempty"`
	Cdate         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=edate,proto3" json:"edate,omitempty"`
}

func (x *SiteMarket) Reset() {
	*x = SiteMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteMarket) ProtoMessage() {}

func (x *SiteMarket) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteMarket.ProtoReflect.Descriptor instead.
func (*SiteMarket) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{15}
}

func (x *SiteMarket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SiteMarket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SiteMarket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SiteMarket) GetNumberOfSites() uint32 {
	if x != nil {
		return x.NumberOfSites
	}
	return 0
}

func (x *SiteMarket) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *SiteMarket) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

// {{.Name}}
type ListSiteMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSiteMarketsRequest) Reset() {
	*x = ListSiteMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSiteMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSiteMarketsRequest) ProtoMessage() {}

func (x *ListSiteMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSiteMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListSiteMarketsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{16}
}

// {{.Name}}
type ListSiteMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteMarkets  []*SiteMarket `protobuf:"bytes,1,rep,name=site_markets,json=siteMarkets,proto3" json:"site_markets,omitempty"`
	InvalidCount uint32        `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListSiteMarketsResponse) Reset() {
	*x = ListSiteMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSiteMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSiteMarketsResponse) ProtoMessage() {}

func (x *ListSiteMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSiteMarketsResponse.ProtoReflect.Descriptor instead.
func (*ListSiteMarketsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{17}
}

func (x *ListSiteMarketsResponse) GetSiteMarkets() []*SiteMarket {
	if x != nil {
		return x.SiteMarkets
	}
	return nil
}

func (x *ListSiteMarketsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetSiteMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSiteMarketRequest) Reset() {
	*x = GetSiteMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteMarketRequest) ProtoMessage() {}

func (x *GetSiteMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteMarketRequest.ProtoReflect.Descriptor instead.
func (*GetSiteMarketRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{18}
}

func (x *GetSiteMarketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetSiteMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteMarket *SiteMarket `protobuf:"bytes,1,opt,name=site_market,json=siteMarket,proto3" json:"site_market,omitempty"`
}

func (x *GetSiteMarketResponse) Reset() {
	*x = GetSiteMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteMarketResponse) ProtoMessage() {}

func (x *GetSiteMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteMarketResponse.ProtoReflect.Descriptor instead.
func (*GetSiteMarketResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{19}
}

func (x *GetSiteMarketResponse) GetSiteMarket() *SiteMarket {
	if x != nil {
		return x.SiteMarket
	}
	return nil
}

// {{.Name}}
type CreateSiteMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteMarket *SiteMarket `protobuf:"bytes,1,opt,name=site_market,json=siteMarket,proto3" json:"site_market,omitempty"`
}

func (x *CreateSiteMarketRequest) Reset() {
	*x = CreateSiteMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSiteMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSiteMarketRequest) ProtoMessage() {}

func (x *CreateSiteMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSiteMarketRequest.ProtoReflect.Descriptor instead.
func (*CreateSiteMarketRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{20}
}

func (x *CreateSiteMarketRequest) GetSiteMarket() *SiteMarket {
	if x != nil {
		return x.SiteMarket
	}
	return nil
}

// {{.Name}}
type CreateSiteMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteMarket *SiteMarket `protobuf:"bytes,1,opt,name=site_market,json=siteMarket,proto3" json:"site_market,omitempty"`
}

func (x *CreateSiteMarketResponse) Reset() {
	*x = CreateSiteMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSiteMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSiteMarketResponse) ProtoMessage() {}

func (x *CreateSiteMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSiteMarketResponse.ProtoReflect.Descriptor instead.
func (*CreateSiteMarketResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{21}
}

func (x *CreateSiteMarketResponse) GetSiteMarket() *SiteMarket {
	if x != nil {
		return x.SiteMarket
	}
	return nil
}

// {{.Name}}
type UpdateSiteMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteMarket *SiteMarket `protobuf:"bytes,1,opt,name=site_market,json=siteMarket,proto3" json:"site_market,omitempty"`
}

func (x *UpdateSiteMarketRequest) Reset() {
	*x = UpdateSiteMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSiteMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSiteMarketRequest) ProtoMessage() {}

func (x *UpdateSiteMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSiteMarketRequest.ProtoReflect.Descriptor instead.
func (*UpdateSiteMarketRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateSiteMarketRequest) GetSiteMarket() *SiteMarket {
	if x != nil {
		return x.SiteMarket
	}
	return nil
}

// {{.Name}}
type UpdateSiteMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteMarket *SiteMarket `protobuf:"bytes,1,opt,name=site_market,json=siteMarket,proto3" json:"site_market,omitempty"`
}

func (x *UpdateSiteMarketResponse) Reset() {
	*x = UpdateSiteMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSiteMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSiteMarketResponse) ProtoMessage() {}

func (x *UpdateSiteMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSiteMarketResponse.ProtoReflect.Descriptor instead.
func (*UpdateSiteMarketResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateSiteMarketResponse) GetSiteMarket() *SiteMarket {
	if x != nil {
		return x.SiteMarket
	}
	return nil
}

// {{.Name}}
type DeleteSiteMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSiteMarketRequest) Reset() {
	*x = DeleteSiteMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSiteMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSiteMarketRequest) ProtoMessage() {}

func (x *DeleteSiteMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSiteMarketRequest.ProtoReflect.Descriptor instead.
func (*DeleteSiteMarketRequest) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteSiteMarketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteSiteMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSiteMarketResponse) Reset() {
	*x = DeleteSiteMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_site_v202211_site_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSiteMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSiteMarketResponse) ProtoMessage() {}

func (x *DeleteSiteMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_site_v202211_site_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSiteMarketResponse.ProtoReflect.Descriptor instead.
func (*DeleteSiteMarketResponse) Descriptor() ([]byte, []int) {
	return file_kentik_site_v202211_site_proto_rawDescGZIP(), []int{25}
}

var File_kentik_site_v202211_site_proto protoreflect.FileDescriptor

var file_kentik_site_v202211_site_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x03, 0x0a, 0x1b,
	0x53, 0x69, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x17,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x5c, 0x92,
	0x41, 0x59, 0x32, 0x57, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x50, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x20,
	0x28, 0x69, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x43, 0x49, 0x44,
	0x52, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x54, 0x92, 0x41, 0x51, 0x32, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x20, 0x43, 0x49, 0x44, 0x52, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x7a, 0x0a, 0x0e,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x50, 0x32, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x20, 0x43, 0x49, 0x44, 0x52, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x29, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x05, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x40, 0x32,
	0x3e, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x08, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x12, 0x32, 0x10, 0x43, 0x69, 0x74, 0x79, 0x20, 0x28,
	0x66, 0x75, 0x6c, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x47, 0x65, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x32, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x25,
	0x32, 0x23, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x28, 0x66, 0x75, 0x6c, 0x6c, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x29, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0xf4, 0x05, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x24, 0x32, 0x22, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x32, 0x21, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x28, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x29, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x6c,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x28, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73,
	0x29, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x15, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x73, 0x69, 0x74, 0x65, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x93, 0x01, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x69, 0x74, 0x65,
	0x27, 0x73, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x31, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x32, 0x25, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x2c, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x69, 0x74,
	0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x69,
	0x72, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x52, 0x0a, 0x73,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdb, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x32, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x52, 0x05, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d,
	0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x32, 0x23, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x42, 0x26, 0x92, 0x41, 0x1f, 0x32,
	0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x69, 0x74, 0x65, 0xe2, 0x41,
	0x01, 0x02, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0x71, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6f, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x42, 0x40, 0x92, 0x41, 0x39, 0x32,
	0x37, 0x4e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x22, 0x6b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74,
	0x65, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22,
	0x4a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc3, 0x03, 0x0a, 0x0a, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x24, 0x32, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1b,
	0x32, 0x19, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32,
	0x15, 0x46, 0x72, 0x65, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x27, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x65, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x92, 0x41, 0x23, 0x32, 0x21, 0x4c, 0x61, 0x73, 0x74, 0x20,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xfb, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a,
	0x0c, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x0b, 0x73, 0x69, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c,
	0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x69,
	0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0b, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x8a,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x0b, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x42, 0x2d, 0x92, 0x41, 0x26, 0x32, 0x24, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20,
	0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x0a, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x33,
	0x92, 0x41, 0x30, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22,
	0x9e, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x0b,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x40, 0x92, 0x41, 0x39, 0x32, 0x37, 0x4e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69,
	0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a,
	0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x57,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x25, 0x32, 0x23, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0xb4, 0x01, 0x0a, 0x08, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x32, 0x8b, 0x16, 0x0a, 0x0b, 0x53,
	0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x92, 0x41, 0x3f, 0x12, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x1a, 0x21, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x2a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0xf2, 0xd7, 0x02, 0x0f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0xeb, 0x01, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x94, 0x01, 0x92, 0x41, 0x5e, 0x12, 0x21, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x1a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x2a, 0x07, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f,
	0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x92, 0x41, 0x72, 0x12, 0x15, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73,
	0x69, 0x74, 0x65, 0x2e, 0x1a, 0x4d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x2a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0xf2,
	0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x73, 0x69, 0x74, 0x65,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xb3, 0x02, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd3, 0x01, 0x92, 0x41, 0x93, 0x01, 0x12, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x1a, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x10, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xf7, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x92, 0x41, 0x60, 0x12, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x1a, 0x31,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49, 0x44,
	0x2e, 0x2a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0xf2, 0xd7, 0x02,
	0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xfa, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73,
	0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8b, 0x01, 0x92, 0x41, 0x53, 0x12, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x1a, 0x28,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x2a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0xf2, 0xd7, 0x02, 0x0f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x98,
	0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x92, 0x41, 0x72, 0x12, 0x28, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x1a, 0x37, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e,
	0x2a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0xf2,
	0xd7, 0x02, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb5, 0x02, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2c,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x92, 0x41,
	0x86, 0x01, 0x12, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x61, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x1a, 0x54, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
	0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x20, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0xf2, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xe7, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf5, 0x01, 0x92, 0x41, 0xa7, 0x01, 0x12, 0x27, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x1a, 0x6a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0xf2, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2b, 0x2f, 0x73, 0x69,
	0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x02, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01,
	0x92, 0x41, 0x74, 0x12, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73,
	0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x1a, 0x38, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x49, 0x44, 0x2e, 0x2a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0xf2, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x2a, 0x1f, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x31,
	0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x1a, 0x24, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x42, 0xfc, 0x0b, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x3b, 0x73, 0x69, 0x74, 0x65, 0x92, 0x41, 0xba, 0x0b, 0x12, 0xd3, 0x09,
	0x0a, 0x16, 0x53, 0x69, 0x74, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x12, 0xe8, 0x08, 0x23, 0x20, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x53, 0x69, 0x74, 0x65, 0x20, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x53, 0x69, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x69, 0x74, 0x65,
	0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x3a, 0x0a, 0x0a, 0x2a, 0x20, 0x2a, 0x2a, 0x53,
	0x69, 0x74, 0x65, 0x2a, 0x2a, 0x3a, 0x20, 0x41, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x61,
	0x74, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x20, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x69, 0x74, 0x65, 0x27, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x0a, 0x2a, 0x20, 0x2a,
	0x2a, 0x53, 0x69, 0x74, 0x65, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2a, 0x2a, 0x3a, 0x20,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x50, 0x6f, 0x50, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x63, 0x61,
	0x6e, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69,
	0x74, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x42, 0x6f, 0x74, 0x68,
	0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20, 0x52, 0x50, 0x43, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x2a, 0x2a, 0x2a, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x3a, 0x2a, 0x2a, 0x2a, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x2d, 0x20,
	0x4f, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65,
	0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x3b, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x73, 0x6f, 0x20, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x79,
	0x6f, 0x75, 0x27, 0x64, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x35, 0x20,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20,
	0x5b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5d, 0x28,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x45, 0x63, 0x30, 0x35, 0x2e, 0x68, 0x74,
	0x6d, 0x23, 0x45, 0x63, 0x30, 0x35, 0x2d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x29, 0x29, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x2d, 0x20, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x20, 0x52, 0x45, 0x53, 0x54, 0x2d, 0x6f, 0x6e,
	0x6c, 0x79, 0x20, 0x5b, 0x53, 0x69, 0x74, 0x65, 0x20, 0x41, 0x50, 0x49, 0x5d, 0x28, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x45, 0x63, 0x31, 0x30, 0x2e, 0x68, 0x74, 0x6d, 0x23,
	0x45, 0x63, 0x31, 0x30, 0x2d, 0x53, 0x69, 0x74, 0x65, 0x5f, 0x41, 0x50, 0x49, 0x29, 0x2c, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d,
	0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d,
	0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02,
	0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a, 0x25, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49,
	0x73, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x41, 0x62, 0x30, 0x39,
	0x2e, 0x68, 0x74, 0x6d, 0x23, 0x41, 0x62, 0x30, 0x39, 0x2d, 0x41, 0x50, 0x49, 0x73, 0x5f, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_site_v202211_site_proto_rawDescOnce sync.Once
	file_kentik_site_v202211_site_proto_rawDescData = file_kentik_site_v202211_site_proto_rawDesc
)

func file_kentik_site_v202211_site_proto_rawDescGZIP() []byte {
	file_kentik_site_v202211_site_proto_rawDescOnce.Do(func() {
		file_kentik_site_v202211_site_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_site_v202211_site_proto_rawDescData)
	})
	return file_kentik_site_v202211_site_proto_rawDescData
}

var file_kentik_site_v202211_site_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_site_v202211_site_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_kentik_site_v202211_site_proto_goTypes = []interface{}{
	(SiteType)(0),                       // 0: kentik.site.v202211.SiteType
	(*SiteIpAddressClassification)(nil), // 1: kentik.site.v202211.SiteIpAddressClassification
	(*Layer)(nil),                       // 2: kentik.site.v202211.Layer
	(*LayerSet)(nil),                    // 3: kentik.site.v202211.LayerSet
	(*PostalAddress)(nil),               // 4: kentik.site.v202211.PostalAddress
	(*Site)(nil),                        // 5: kentik.site.v202211.Site
	(*ListSitesRequest)(nil),            // 6: kentik.site.v202211.ListSitesRequest
	(*ListSitesResponse)(nil),           // 7: kentik.site.v202211.ListSitesResponse
	(*GetSiteRequest)(nil),              // 8: kentik.site.v202211.GetSiteRequest
	(*GetSiteResponse)(nil),             // 9: kentik.site.v202211.GetSiteResponse
	(*CreateSiteRequest)(nil),           // 10: kentik.site.v202211.CreateSiteRequest
	(*CreateSiteResponse)(nil),          // 11: kentik.site.v202211.CreateSiteResponse
	(*UpdateSiteRequest)(nil),           // 12: kentik.site.v202211.UpdateSiteRequest
	(*UpdateSiteResponse)(nil),          // 13: kentik.site.v202211.UpdateSiteResponse
	(*DeleteSiteRequest)(nil),           // 14: kentik.site.v202211.DeleteSiteRequest
	(*DeleteSiteResponse)(nil),          // 15: kentik.site.v202211.DeleteSiteResponse
	(*SiteMarket)(nil),                  // 16: kentik.site.v202211.SiteMarket
	(*ListSiteMarketsRequest)(nil),      // 17: kentik.site.v202211.ListSiteMarketsRequest
	(*ListSiteMarketsResponse)(nil),     // 18: kentik.site.v202211.ListSiteMarketsResponse
	(*GetSiteMarketRequest)(nil),        // 19: kentik.site.v202211.GetSiteMarketRequest
	(*GetSiteMarketResponse)(nil),       // 20: kentik.site.v202211.GetSiteMarketResponse
	(*CreateSiteMarketRequest)(nil),     // 21: kentik.site.v202211.CreateSiteMarketRequest
	(*CreateSiteMarketResponse)(nil),    // 22: kentik.site.v202211.CreateSiteMarketResponse
	(*UpdateSiteMarketRequest)(nil),     // 23: kentik.site.v202211.UpdateSiteMarketRequest
	(*UpdateSiteMarketResponse)(nil),    // 24: kentik.site.v202211.UpdateSiteMarketResponse
	(*DeleteSiteMarketRequest)(nil),     // 25: kentik.site.v202211.DeleteSiteMarketRequest
	(*DeleteSiteMarketResponse)(nil),    // 26: kentik.site.v202211.DeleteSiteMarketResponse
	(*timestamppb.Timestamp)(nil),       // 27: google.protobuf.Timestamp
}
var file_kentik_site_v202211_site_proto_depIdxs = []int32{
	2,  // 0: kentik.site.v202211.LayerSet.layers:type_name -> kentik.site.v202211.Layer
	4,  // 1: kentik.site.v202211.Site.postal_address:type_name -> kentik.site.v202211.PostalAddress
	0,  // 2: kentik.site.v202211.Site.type:type_name -> kentik.site.v202211.SiteType
	1,  // 3: kentik.site.v202211.Site.address_classification:type_name -> kentik.site.v202211.SiteIpAddressClassification
	3,  // 4: kentik.site.v202211.Site.architecture:type_name -> kentik.site.v202211.LayerSet
	5,  // 5: kentik.site.v202211.ListSitesResponse.sites:type_name -> kentik.site.v202211.Site
	5,  // 6: kentik.site.v202211.GetSiteResponse.site:type_name -> kentik.site.v202211.Site
	5,  // 7: kentik.site.v202211.CreateSiteRequest.site:type_name -> kentik.site.v202211.Site
	5,  // 8: kentik.site.v202211.CreateSiteResponse.site:type_name -> kentik.site.v202211.Site
	5,  // 9: kentik.site.v202211.UpdateSiteRequest.site:type_name -> kentik.site.v202211.Site
	5,  // 10: kentik.site.v202211.UpdateSiteResponse.site:type_name -> kentik.site.v202211.Site
	27, // 11: kentik.site.v202211.SiteMarket.cdate:type_name -> google.protobuf.Timestamp
	27, // 12: kentik.site.v202211.SiteMarket.edate:type_name -> google.protobuf.Timestamp
	16, // 13: kentik.site.v202211.ListSiteMarketsResponse.site_markets:type_name -> kentik.site.v202211.SiteMarket
	16, // 14: kentik.site.v202211.GetSiteMarketResponse.site_market:type_name -> kentik.site.v202211.SiteMarket
	16, // 15: kentik.site.v202211.CreateSiteMarketRequest.site_market:type_name -> kentik.site.v202211.SiteMarket
	16, // 16: kentik.site.v202211.CreateSiteMarketResponse.site_market:type_name -> kentik.site.v202211.SiteMarket
	16, // 17: kentik.site.v202211.UpdateSiteMarketRequest.site_market:type_name -> kentik.site.v202211.SiteMarket
	16, // 18: kentik.site.v202211.UpdateSiteMarketResponse.site_market:type_name -> kentik.site.v202211.SiteMarket
	6,  // 19: kentik.site.v202211.SiteService.ListSites:input_type -> kentik.site.v202211.ListSitesRequest
	8,  // 20: kentik.site.v202211.SiteService.GetSite:input_type -> kentik.site.v202211.GetSiteRequest
	10, // 21: kentik.site.v202211.SiteService.CreateSite:input_type -> kentik.site.v202211.CreateSiteRequest
	12, // 22: kentik.site.v202211.SiteService.UpdateSite:input_type -> kentik.site.v202211.UpdateSiteRequest
	14, // 23: kentik.site.v202211.SiteService.DeleteSite:input_type -> kentik.site.v202211.DeleteSiteRequest
	17, // 24: kentik.site.v202211.SiteService.ListSiteMarkets:input_type -> kentik.site.v202211.ListSiteMarketsRequest
	19, // 25: kentik.site.v202211.SiteService.GetSiteMarket:input_type -> kentik.site.v202211.GetSiteMarketRequest
	21, // 26: kentik.site.v202211.SiteService.CreateSiteMarket:input_type -> kentik.site.v202211.CreateSiteMarketRequest
	23, // 27: kentik.site.v202211.SiteService.UpdateSiteMarket:input_type -> kentik.site.v202211.UpdateSiteMarketRequest
	25, // 28: kentik.site.v202211.SiteService.DeleteSiteMarket:input_type -> kentik.site.v202211.DeleteSiteMarketRequest
	7,  // 29: kentik.site.v202211.SiteService.ListSites:output_type -> kentik.site.v202211.ListSitesResponse
	9,  // 30: kentik.site.v202211.SiteService.GetSite:output_type -> kentik.site.v202211.GetSiteResponse
	11, // 31: kentik.site.v202211.SiteService.CreateSite:output_type -> kentik.site.v202211.CreateSiteResponse
	13, // 32: kentik.site.v202211.SiteService.UpdateSite:output_type -> kentik.site.v202211.UpdateSiteResponse
	15, // 33: kentik.site.v202211.SiteService.DeleteSite:output_type -> kentik.site.v202211.DeleteSiteResponse
	18, // 34: kentik.site.v202211.SiteService.ListSiteMarkets:output_type -> kentik.site.v202211.ListSiteMarketsResponse
	20, // 35: kentik.site.v202211.SiteService.GetSiteMarket:output_type -> kentik.site.v202211.GetSiteMarketResponse
	22, // 36: kentik.site.v202211.SiteService.CreateSiteMarket:output_type -> kentik.site.v202211.CreateSiteMarketResponse
	24, // 37: kentik.site.v202211.SiteService.UpdateSiteMarket:output_type -> kentik.site.v202211.UpdateSiteMarketResponse
	26, // 38: kentik.site.v202211.SiteService.DeleteSiteMarket:output_type -> kentik.site.v202211.DeleteSiteMarketResponse
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_kentik_site_v202211_site_proto_init() }
func file_kentik_site_v202211_site_proto_init() {
	if File_kentik_site_v202211_site_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_site_v202211_site_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteIpAddressClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSiteMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSiteMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSiteMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSiteMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSiteMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSiteMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSiteMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_site_v202211_site_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSiteMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_site_v202211_site_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_site_v202211_site_proto_goTypes,
		DependencyIndexes: file_kentik_site_v202211_site_proto_depIdxs,
		EnumInfos:         file_kentik_site_v202211_site_proto_enumTypes,
		MessageInfos:      file_kentik_site_v202211_site_proto_msgTypes,
	}.Build()
	File_kentik_site_v202211_site_proto = out.File
	file_kentik_site_v202211_site_proto_rawDesc = nil
	file_kentik_site_v202211_site_proto_goTypes = nil
	file_kentik_site_v202211_site_proto_depIdxs = nil
}
