// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertAutoAckServiceClient is the client API for AlertAutoAckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertAutoAckServiceClient interface {
	Create(ctx context.Context, in *AlertAutoAckServiceCreateRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceCreateResponse, error)
	Get(ctx context.Context, in *AlertAutoAckServiceGetRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceGetResponse, error)
	List(ctx context.Context, in *AlertAutoAckServiceListRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceListResponse, error)
	Replace(ctx context.Context, in *AlertAutoAckServiceReplaceRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceReplaceResponse, error)
	Delete(ctx context.Context, in *AlertAutoAckServiceDeleteRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceDeleteResponse, error)
}

type alertAutoAckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertAutoAckServiceClient(cc grpc.ClientConnInterface) AlertAutoAckServiceClient {
	return &alertAutoAckServiceClient{cc}
}

func (c *alertAutoAckServiceClient) Create(ctx context.Context, in *AlertAutoAckServiceCreateRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceCreateResponse, error) {
	out := new(AlertAutoAckServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.AlertAutoAckService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertAutoAckServiceClient) Get(ctx context.Context, in *AlertAutoAckServiceGetRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceGetResponse, error) {
	out := new(AlertAutoAckServiceGetResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.AlertAutoAckService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertAutoAckServiceClient) List(ctx context.Context, in *AlertAutoAckServiceListRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceListResponse, error) {
	out := new(AlertAutoAckServiceListResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.AlertAutoAckService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertAutoAckServiceClient) Replace(ctx context.Context, in *AlertAutoAckServiceReplaceRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceReplaceResponse, error) {
	out := new(AlertAutoAckServiceReplaceResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.AlertAutoAckService/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertAutoAckServiceClient) Delete(ctx context.Context, in *AlertAutoAckServiceDeleteRequest, opts ...grpc.CallOption) (*AlertAutoAckServiceDeleteResponse, error) {
	out := new(AlertAutoAckServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.AlertAutoAckService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertAutoAckServiceServer is the server API for AlertAutoAckService service.
// All implementations should embed UnimplementedAlertAutoAckServiceServer
// for forward compatibility
type AlertAutoAckServiceServer interface {
	Create(context.Context, *AlertAutoAckServiceCreateRequest) (*AlertAutoAckServiceCreateResponse, error)
	Get(context.Context, *AlertAutoAckServiceGetRequest) (*AlertAutoAckServiceGetResponse, error)
	List(context.Context, *AlertAutoAckServiceListRequest) (*AlertAutoAckServiceListResponse, error)
	Replace(context.Context, *AlertAutoAckServiceReplaceRequest) (*AlertAutoAckServiceReplaceResponse, error)
	Delete(context.Context, *AlertAutoAckServiceDeleteRequest) (*AlertAutoAckServiceDeleteResponse, error)
}

// UnimplementedAlertAutoAckServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAlertAutoAckServiceServer struct {
}

func (UnimplementedAlertAutoAckServiceServer) Create(context.Context, *AlertAutoAckServiceCreateRequest) (*AlertAutoAckServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlertAutoAckServiceServer) Get(context.Context, *AlertAutoAckServiceGetRequest) (*AlertAutoAckServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAlertAutoAckServiceServer) List(context.Context, *AlertAutoAckServiceListRequest) (*AlertAutoAckServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAlertAutoAckServiceServer) Replace(context.Context, *AlertAutoAckServiceReplaceRequest) (*AlertAutoAckServiceReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedAlertAutoAckServiceServer) Delete(context.Context, *AlertAutoAckServiceDeleteRequest) (*AlertAutoAckServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeAlertAutoAckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertAutoAckServiceServer will
// result in compilation errors.
type UnsafeAlertAutoAckServiceServer interface {
	mustEmbedUnimplementedAlertAutoAckServiceServer()
}

func RegisterAlertAutoAckServiceServer(s grpc.ServiceRegistrar, srv AlertAutoAckServiceServer) {
	s.RegisterService(&AlertAutoAckService_ServiceDesc, srv)
}

func _AlertAutoAckService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertAutoAckServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertAutoAckServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.AlertAutoAckService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertAutoAckServiceServer).Create(ctx, req.(*AlertAutoAckServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertAutoAckService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertAutoAckServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertAutoAckServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.AlertAutoAckService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertAutoAckServiceServer).Get(ctx, req.(*AlertAutoAckServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertAutoAckService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertAutoAckServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertAutoAckServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.AlertAutoAckService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertAutoAckServiceServer).List(ctx, req.(*AlertAutoAckServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertAutoAckService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertAutoAckServiceReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertAutoAckServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.AlertAutoAckService/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertAutoAckServiceServer).Replace(ctx, req.(*AlertAutoAckServiceReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertAutoAckService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertAutoAckServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertAutoAckServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.AlertAutoAckService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertAutoAckServiceServer).Delete(ctx, req.(*AlertAutoAckServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertAutoAckService_ServiceDesc is the grpc.ServiceDesc for AlertAutoAckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertAutoAckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.AlertAutoAckService",
	HandlerType: (*AlertAutoAckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AlertAutoAckService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AlertAutoAckService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AlertAutoAckService_List_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _AlertAutoAckService_Replace_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AlertAutoAckService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/auto_ack.proto",
}
