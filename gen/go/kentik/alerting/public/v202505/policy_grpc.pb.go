// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/alerting/public/v202505/policy.proto

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PolicyService_Get_FullMethodName     = "/kentik.alerting.public.v202505.PolicyService/Get"
	PolicyService_List_FullMethodName    = "/kentik.alerting.public.v202505.PolicyService/List"
	PolicyService_Disable_FullMethodName = "/kentik.alerting.public.v202505.PolicyService/Disable"
	PolicyService_Enable_FullMethodName  = "/kentik.alerting.public.v202505.PolicyService/Enable"
)

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyServiceClient interface {
	Get(ctx context.Context, in *PolicyServiceGetRequest, opts ...grpc.CallOption) (*PolicyServiceGetResponse, error)
	List(ctx context.Context, in *PolicyServiceListRequest, opts ...grpc.CallOption) (*PolicyServiceListResponse, error)
	Disable(ctx context.Context, in *PolicyServiceDisableRequest, opts ...grpc.CallOption) (*PolicyServiceDisableResponse, error)
	Enable(ctx context.Context, in *PolicyServiceEnableRequest, opts ...grpc.CallOption) (*PolicyServiceEnableResponse, error)
}

type policyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyServiceClient(cc grpc.ClientConnInterface) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) Get(ctx context.Context, in *PolicyServiceGetRequest, opts ...grpc.CallOption) (*PolicyServiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PolicyServiceGetResponse)
	err := c.cc.Invoke(ctx, PolicyService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) List(ctx context.Context, in *PolicyServiceListRequest, opts ...grpc.CallOption) (*PolicyServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PolicyServiceListResponse)
	err := c.cc.Invoke(ctx, PolicyService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) Disable(ctx context.Context, in *PolicyServiceDisableRequest, opts ...grpc.CallOption) (*PolicyServiceDisableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PolicyServiceDisableResponse)
	err := c.cc.Invoke(ctx, PolicyService_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) Enable(ctx context.Context, in *PolicyServiceEnableRequest, opts ...grpc.CallOption) (*PolicyServiceEnableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PolicyServiceEnableResponse)
	err := c.cc.Invoke(ctx, PolicyService_Enable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServiceServer is the server API for PolicyService service.
// All implementations should embed UnimplementedPolicyServiceServer
// for forward compatibility.
type PolicyServiceServer interface {
	Get(context.Context, *PolicyServiceGetRequest) (*PolicyServiceGetResponse, error)
	List(context.Context, *PolicyServiceListRequest) (*PolicyServiceListResponse, error)
	Disable(context.Context, *PolicyServiceDisableRequest) (*PolicyServiceDisableResponse, error)
	Enable(context.Context, *PolicyServiceEnableRequest) (*PolicyServiceEnableResponse, error)
}

// UnimplementedPolicyServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPolicyServiceServer struct{}

func (UnimplementedPolicyServiceServer) Get(context.Context, *PolicyServiceGetRequest) (*PolicyServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPolicyServiceServer) List(context.Context, *PolicyServiceListRequest) (*PolicyServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPolicyServiceServer) Disable(context.Context, *PolicyServiceDisableRequest) (*PolicyServiceDisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedPolicyServiceServer) Enable(context.Context, *PolicyServiceEnableRequest) (*PolicyServiceEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedPolicyServiceServer) testEmbeddedByValue() {}

// UnsafePolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyServiceServer will
// result in compilation errors.
type UnsafePolicyServiceServer interface {
	mustEmbedUnimplementedPolicyServiceServer()
}

func RegisterPolicyServiceServer(s grpc.ServiceRegistrar, srv PolicyServiceServer) {
	// If the following call pancis, it indicates UnimplementedPolicyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PolicyService_ServiceDesc, srv)
}

func _PolicyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).Get(ctx, req.(*PolicyServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).List(ctx, req.(*PolicyServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyServiceDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).Disable(ctx, req.(*PolicyServiceDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyServiceEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyService_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).Enable(ctx, req.(*PolicyServiceEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyService_ServiceDesc is the grpc.ServiceDesc for PolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PolicyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PolicyService_List_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _PolicyService_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _PolicyService_Enable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/policy.proto",
}
