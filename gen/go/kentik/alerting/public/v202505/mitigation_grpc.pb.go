// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/alerting/public/v202505/mitigation.proto

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MitigationsService_List_FullMethodName                          = "/kentik.alerting.public.v202505.MitigationsService/List"
	MitigationsService_Get_FullMethodName                           = "/kentik.alerting.public.v202505.MitigationsService/Get"
	MitigationsService_Create_FullMethodName                        = "/kentik.alerting.public.v202505.MitigationsService/Create"
	MitigationsService_Act_FullMethodName                           = "/kentik.alerting.public.v202505.MitigationsService/Act"
	MitigationsService_AvailableActions_FullMethodName              = "/kentik.alerting.public.v202505.MitigationsService/AvailableActions"
	MitigationsService_AvailableActionsForMitigation_FullMethodName = "/kentik.alerting.public.v202505.MitigationsService/AvailableActionsForMitigation"
)

// MitigationsServiceClient is the client API for MitigationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MitigationsServiceClient interface {
	List(ctx context.Context, in *MitigationsServiceListRequest, opts ...grpc.CallOption) (*MitigationsServiceListResponse, error)
	Get(ctx context.Context, in *MitigationsServiceGetRequest, opts ...grpc.CallOption) (*MitigationsServiceGetResponse, error)
	Create(ctx context.Context, in *MitigationsServiceCreateRequest, opts ...grpc.CallOption) (*MitigationsServiceCreateResponse, error)
	Act(ctx context.Context, in *MitigationsServiceActRequest, opts ...grpc.CallOption) (*MitigationsServiceActResponse, error)
	AvailableActions(ctx context.Context, in *MitigationsServiceAvailableActionsRequest, opts ...grpc.CallOption) (*MitigationsServiceAvailableActionsResponse, error)
	AvailableActionsForMitigation(ctx context.Context, in *MitigationsServiceAvailableActionsForMitigationRequest, opts ...grpc.CallOption) (*MitigationsServiceAvailableActionsForMitigationResponse, error)
}

type mitigationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMitigationsServiceClient(cc grpc.ClientConnInterface) MitigationsServiceClient {
	return &mitigationsServiceClient{cc}
}

func (c *mitigationsServiceClient) List(ctx context.Context, in *MitigationsServiceListRequest, opts ...grpc.CallOption) (*MitigationsServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MitigationsServiceListResponse)
	err := c.cc.Invoke(ctx, MitigationsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitigationsServiceClient) Get(ctx context.Context, in *MitigationsServiceGetRequest, opts ...grpc.CallOption) (*MitigationsServiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MitigationsServiceGetResponse)
	err := c.cc.Invoke(ctx, MitigationsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitigationsServiceClient) Create(ctx context.Context, in *MitigationsServiceCreateRequest, opts ...grpc.CallOption) (*MitigationsServiceCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MitigationsServiceCreateResponse)
	err := c.cc.Invoke(ctx, MitigationsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitigationsServiceClient) Act(ctx context.Context, in *MitigationsServiceActRequest, opts ...grpc.CallOption) (*MitigationsServiceActResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MitigationsServiceActResponse)
	err := c.cc.Invoke(ctx, MitigationsService_Act_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitigationsServiceClient) AvailableActions(ctx context.Context, in *MitigationsServiceAvailableActionsRequest, opts ...grpc.CallOption) (*MitigationsServiceAvailableActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MitigationsServiceAvailableActionsResponse)
	err := c.cc.Invoke(ctx, MitigationsService_AvailableActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitigationsServiceClient) AvailableActionsForMitigation(ctx context.Context, in *MitigationsServiceAvailableActionsForMitigationRequest, opts ...grpc.CallOption) (*MitigationsServiceAvailableActionsForMitigationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MitigationsServiceAvailableActionsForMitigationResponse)
	err := c.cc.Invoke(ctx, MitigationsService_AvailableActionsForMitigation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MitigationsServiceServer is the server API for MitigationsService service.
// All implementations should embed UnimplementedMitigationsServiceServer
// for forward compatibility.
type MitigationsServiceServer interface {
	List(context.Context, *MitigationsServiceListRequest) (*MitigationsServiceListResponse, error)
	Get(context.Context, *MitigationsServiceGetRequest) (*MitigationsServiceGetResponse, error)
	Create(context.Context, *MitigationsServiceCreateRequest) (*MitigationsServiceCreateResponse, error)
	Act(context.Context, *MitigationsServiceActRequest) (*MitigationsServiceActResponse, error)
	AvailableActions(context.Context, *MitigationsServiceAvailableActionsRequest) (*MitigationsServiceAvailableActionsResponse, error)
	AvailableActionsForMitigation(context.Context, *MitigationsServiceAvailableActionsForMitigationRequest) (*MitigationsServiceAvailableActionsForMitigationResponse, error)
}

// UnimplementedMitigationsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMitigationsServiceServer struct{}

func (UnimplementedMitigationsServiceServer) List(context.Context, *MitigationsServiceListRequest) (*MitigationsServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMitigationsServiceServer) Get(context.Context, *MitigationsServiceGetRequest) (*MitigationsServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMitigationsServiceServer) Create(context.Context, *MitigationsServiceCreateRequest) (*MitigationsServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMitigationsServiceServer) Act(context.Context, *MitigationsServiceActRequest) (*MitigationsServiceActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Act not implemented")
}
func (UnimplementedMitigationsServiceServer) AvailableActions(context.Context, *MitigationsServiceAvailableActionsRequest) (*MitigationsServiceAvailableActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableActions not implemented")
}
func (UnimplementedMitigationsServiceServer) AvailableActionsForMitigation(context.Context, *MitigationsServiceAvailableActionsForMitigationRequest) (*MitigationsServiceAvailableActionsForMitigationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableActionsForMitigation not implemented")
}
func (UnimplementedMitigationsServiceServer) testEmbeddedByValue() {}

// UnsafeMitigationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MitigationsServiceServer will
// result in compilation errors.
type UnsafeMitigationsServiceServer interface {
	mustEmbedUnimplementedMitigationsServiceServer()
}

func RegisterMitigationsServiceServer(s grpc.ServiceRegistrar, srv MitigationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMitigationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MitigationsService_ServiceDesc, srv)
}

func _MitigationsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationsServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitigationsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationsServiceServer).List(ctx, req.(*MitigationsServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitigationsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationsServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitigationsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationsServiceServer).Get(ctx, req.(*MitigationsServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitigationsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationsServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitigationsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationsServiceServer).Create(ctx, req.(*MitigationsServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitigationsService_Act_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationsServiceActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationsServiceServer).Act(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitigationsService_Act_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationsServiceServer).Act(ctx, req.(*MitigationsServiceActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitigationsService_AvailableActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationsServiceAvailableActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationsServiceServer).AvailableActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitigationsService_AvailableActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationsServiceServer).AvailableActions(ctx, req.(*MitigationsServiceAvailableActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitigationsService_AvailableActionsForMitigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationsServiceAvailableActionsForMitigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationsServiceServer).AvailableActionsForMitigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MitigationsService_AvailableActionsForMitigation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationsServiceServer).AvailableActionsForMitigation(ctx, req.(*MitigationsServiceAvailableActionsForMitigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MitigationsService_ServiceDesc is the grpc.ServiceDesc for MitigationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MitigationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.MitigationsService",
	HandlerType: (*MitigationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MitigationsService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MitigationsService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MitigationsService_Create_Handler,
		},
		{
			MethodName: "Act",
			Handler:    _MitigationsService_Act_Handler,
		},
		{
			MethodName: "AvailableActions",
			Handler:    _MitigationsService_AvailableActions_Handler,
		},
		{
			MethodName: "AvailableActionsForMitigation",
			Handler:    _MitigationsService_AvailableActionsForMitigation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/mitigation.proto",
}
