// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/alerting/public/v202505/mitigation.proto

package v202505

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v202303 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202303"
	v202506 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202506"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MitigationUserAction int32

const (
	MitigationUserAction_MITIGATION_USER_ACTION_UNSPECIFIED   MitigationUserAction = 0
	MitigationUserAction_MITIGATION_USER_ACTION_TAKE_CONTROL  MitigationUserAction = 1
	MitigationUserAction_MITIGATION_USER_ACTION_STOP          MitigationUserAction = 2
	MitigationUserAction_MITIGATION_USER_ACTION_START         MitigationUserAction = 3
	MitigationUserAction_MITIGATION_USER_ACTION_DELETE        MitigationUserAction = 4
	MitigationUserAction_MITIGATION_USER_ACTION_APPROVE_START MitigationUserAction = 5
	MitigationUserAction_MITIGATION_USER_ACTION_SKIP_WAIT     MitigationUserAction = 6
	MitigationUserAction_MITIGATION_USER_ACTION_RETRY         MitigationUserAction = 7
	MitigationUserAction_MITIGATION_USER_ACTION_ACK           MitigationUserAction = 8
)

// Enum value maps for MitigationUserAction.
var (
	MitigationUserAction_name = map[int32]string{
		0: "MITIGATION_USER_ACTION_UNSPECIFIED",
		1: "MITIGATION_USER_ACTION_TAKE_CONTROL",
		2: "MITIGATION_USER_ACTION_STOP",
		3: "MITIGATION_USER_ACTION_START",
		4: "MITIGATION_USER_ACTION_DELETE",
		5: "MITIGATION_USER_ACTION_APPROVE_START",
		6: "MITIGATION_USER_ACTION_SKIP_WAIT",
		7: "MITIGATION_USER_ACTION_RETRY",
		8: "MITIGATION_USER_ACTION_ACK",
	}
	MitigationUserAction_value = map[string]int32{
		"MITIGATION_USER_ACTION_UNSPECIFIED":   0,
		"MITIGATION_USER_ACTION_TAKE_CONTROL":  1,
		"MITIGATION_USER_ACTION_STOP":          2,
		"MITIGATION_USER_ACTION_START":         3,
		"MITIGATION_USER_ACTION_DELETE":        4,
		"MITIGATION_USER_ACTION_APPROVE_START": 5,
		"MITIGATION_USER_ACTION_SKIP_WAIT":     6,
		"MITIGATION_USER_ACTION_RETRY":         7,
		"MITIGATION_USER_ACTION_ACK":           8,
	}
)

func (x MitigationUserAction) Enum() *MitigationUserAction {
	p := new(MitigationUserAction)
	*p = x
	return p
}

func (x MitigationUserAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MitigationUserAction) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_mitigation_proto_enumTypes[0].Descriptor()
}

func (MitigationUserAction) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_mitigation_proto_enumTypes[0]
}

func (x MitigationUserAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MitigationUserAction.Descriptor instead.
func (MitigationUserAction) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{0}
}

type MitigationState int32

const (
	MitigationState_MITIGATION_STATE_UNSPECIFIED          MitigationState = 0
	MitigationState_MITIGATION_STATE_ACK_REQUIRED         MitigationState = 1
	MitigationState_MITIGATION_STATE_ARCHIVED             MitigationState = 2
	MitigationState_MITIGATION_STATE_CLEARING             MitigationState = 3
	MitigationState_MITIGATION_STATE_CLEARING_FAIL        MitigationState = 4
	MitigationState_MITIGATION_STATE_END_GRACE            MitigationState = 5
	MitigationState_MITIGATION_STATE_END_WAIT             MitigationState = 6
	MitigationState_MITIGATION_STATE_MANUAL_CLEAR         MitigationState = 7
	MitigationState_MITIGATION_STATE_MANUAL_CLEARING      MitigationState = 8
	MitigationState_MITIGATION_STATE_MANUAL_CLEARING_FAIL MitigationState = 9
	MitigationState_MITIGATION_STATE_MANUAL_MITIGATING    MitigationState = 10
	MitigationState_MITIGATION_STATE_MANUAL_STARTING      MitigationState = 11
	MitigationState_MITIGATION_STATE_MANUAL_STARTING_FAIL MitigationState = 12
	MitigationState_MITIGATION_STATE_MITIGATING           MitigationState = 13
	MitigationState_MITIGATION_STATE_STARTING             MitigationState = 14
	MitigationState_MITIGATION_STATE_STARTING_FAIL        MitigationState = 15
	MitigationState_MITIGATION_STATE_START_WAIT           MitigationState = 16
)

// Enum value maps for MitigationState.
var (
	MitigationState_name = map[int32]string{
		0:  "MITIGATION_STATE_UNSPECIFIED",
		1:  "MITIGATION_STATE_ACK_REQUIRED",
		2:  "MITIGATION_STATE_ARCHIVED",
		3:  "MITIGATION_STATE_CLEARING",
		4:  "MITIGATION_STATE_CLEARING_FAIL",
		5:  "MITIGATION_STATE_END_GRACE",
		6:  "MITIGATION_STATE_END_WAIT",
		7:  "MITIGATION_STATE_MANUAL_CLEAR",
		8:  "MITIGATION_STATE_MANUAL_CLEARING",
		9:  "MITIGATION_STATE_MANUAL_CLEARING_FAIL",
		10: "MITIGATION_STATE_MANUAL_MITIGATING",
		11: "MITIGATION_STATE_MANUAL_STARTING",
		12: "MITIGATION_STATE_MANUAL_STARTING_FAIL",
		13: "MITIGATION_STATE_MITIGATING",
		14: "MITIGATION_STATE_STARTING",
		15: "MITIGATION_STATE_STARTING_FAIL",
		16: "MITIGATION_STATE_START_WAIT",
	}
	MitigationState_value = map[string]int32{
		"MITIGATION_STATE_UNSPECIFIED":          0,
		"MITIGATION_STATE_ACK_REQUIRED":         1,
		"MITIGATION_STATE_ARCHIVED":             2,
		"MITIGATION_STATE_CLEARING":             3,
		"MITIGATION_STATE_CLEARING_FAIL":        4,
		"MITIGATION_STATE_END_GRACE":            5,
		"MITIGATION_STATE_END_WAIT":             6,
		"MITIGATION_STATE_MANUAL_CLEAR":         7,
		"MITIGATION_STATE_MANUAL_CLEARING":      8,
		"MITIGATION_STATE_MANUAL_CLEARING_FAIL": 9,
		"MITIGATION_STATE_MANUAL_MITIGATING":    10,
		"MITIGATION_STATE_MANUAL_STARTING":      11,
		"MITIGATION_STATE_MANUAL_STARTING_FAIL": 12,
		"MITIGATION_STATE_MITIGATING":           13,
		"MITIGATION_STATE_STARTING":             14,
		"MITIGATION_STATE_STARTING_FAIL":        15,
		"MITIGATION_STATE_START_WAIT":           16,
	}
)

func (x MitigationState) Enum() *MitigationState {
	p := new(MitigationState)
	*p = x
	return p
}

func (x MitigationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MitigationState) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_mitigation_proto_enumTypes[1].Descriptor()
}

func (MitigationState) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_mitigation_proto_enumTypes[1]
}

func (x MitigationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MitigationState.Descriptor instead.
func (MitigationState) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{1}
}

type MitigationEvent int32

const (
	MitigationEvent_MITIGATION_EVENT_UNSPECIFIED          MitigationEvent = 0
	MitigationEvent_MITIGATION_EVENT_USER_MANUAL_CONTROL  MitigationEvent = 1
	MitigationEvent_MITIGATION_EVENT_USER_STOP            MitigationEvent = 2
	MitigationEvent_MITIGATION_EVENT_USER_START           MitigationEvent = 3
	MitigationEvent_MITIGATION_EVENT_USER_DELETE          MitigationEvent = 4
	MitigationEvent_MITIGATION_EVENT_USER_APPROVE_START   MitigationEvent = 5
	MitigationEvent_MITIGATION_EVENT_USER_SKIP_WAIT       MitigationEvent = 6
	MitigationEvent_MITIGATION_EVENT_USER_RETRY           MitigationEvent = 7
	MitigationEvent_MITIGATION_EVENT_USER_ACK             MitigationEvent = 8
	MitigationEvent_MITIGATION_EVENT_SKIP_WAIT            MitigationEvent = 9
	MitigationEvent_MITIGATION_EVENT_DONE_WAIT            MitigationEvent = 10
	MitigationEvent_MITIGATION_EVENT_AUTO_START           MitigationEvent = 11
	MitigationEvent_MITIGATION_EVENT_AUTO_STOP            MitigationEvent = 12
	MitigationEvent_MITIGATION_EVENT_REMOTE_ADDED         MitigationEvent = 13
	MitigationEvent_MITIGATION_EVENT_REMOTE_REMOVED       MitigationEvent = 14
	MitigationEvent_MITIGATION_EVENT_REMOTE_ERROR         MitigationEvent = 15
	MitigationEvent_MITIGATION_EVENT_SYSTEM_CLEAR_DELETED MitigationEvent = 16
	MitigationEvent_MITIGATION_EVENT_TTL_EXPIRED          MitigationEvent = 17
)

// Enum value maps for MitigationEvent.
var (
	MitigationEvent_name = map[int32]string{
		0:  "MITIGATION_EVENT_UNSPECIFIED",
		1:  "MITIGATION_EVENT_USER_MANUAL_CONTROL",
		2:  "MITIGATION_EVENT_USER_STOP",
		3:  "MITIGATION_EVENT_USER_START",
		4:  "MITIGATION_EVENT_USER_DELETE",
		5:  "MITIGATION_EVENT_USER_APPROVE_START",
		6:  "MITIGATION_EVENT_USER_SKIP_WAIT",
		7:  "MITIGATION_EVENT_USER_RETRY",
		8:  "MITIGATION_EVENT_USER_ACK",
		9:  "MITIGATION_EVENT_SKIP_WAIT",
		10: "MITIGATION_EVENT_DONE_WAIT",
		11: "MITIGATION_EVENT_AUTO_START",
		12: "MITIGATION_EVENT_AUTO_STOP",
		13: "MITIGATION_EVENT_REMOTE_ADDED",
		14: "MITIGATION_EVENT_REMOTE_REMOVED",
		15: "MITIGATION_EVENT_REMOTE_ERROR",
		16: "MITIGATION_EVENT_SYSTEM_CLEAR_DELETED",
		17: "MITIGATION_EVENT_TTL_EXPIRED",
	}
	MitigationEvent_value = map[string]int32{
		"MITIGATION_EVENT_UNSPECIFIED":          0,
		"MITIGATION_EVENT_USER_MANUAL_CONTROL":  1,
		"MITIGATION_EVENT_USER_STOP":            2,
		"MITIGATION_EVENT_USER_START":           3,
		"MITIGATION_EVENT_USER_DELETE":          4,
		"MITIGATION_EVENT_USER_APPROVE_START":   5,
		"MITIGATION_EVENT_USER_SKIP_WAIT":       6,
		"MITIGATION_EVENT_USER_RETRY":           7,
		"MITIGATION_EVENT_USER_ACK":             8,
		"MITIGATION_EVENT_SKIP_WAIT":            9,
		"MITIGATION_EVENT_DONE_WAIT":            10,
		"MITIGATION_EVENT_AUTO_START":           11,
		"MITIGATION_EVENT_AUTO_STOP":            12,
		"MITIGATION_EVENT_REMOTE_ADDED":         13,
		"MITIGATION_EVENT_REMOTE_REMOVED":       14,
		"MITIGATION_EVENT_REMOTE_ERROR":         15,
		"MITIGATION_EVENT_SYSTEM_CLEAR_DELETED": 16,
		"MITIGATION_EVENT_TTL_EXPIRED":          17,
	}
)

func (x MitigationEvent) Enum() *MitigationEvent {
	p := new(MitigationEvent)
	*p = x
	return p
}

func (x MitigationEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MitigationEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_mitigation_proto_enumTypes[2].Descriptor()
}

func (MitigationEvent) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_mitigation_proto_enumTypes[2]
}

func (x MitigationEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MitigationEvent.Descriptor instead.
func (MitigationEvent) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{2}
}

type MitigationsServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v202506.PaginationConfig `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filters    *MitigationFilters        `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *MitigationsServiceListRequest) Reset() {
	*x = MitigationsServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceListRequest) ProtoMessage() {}

func (x *MitigationsServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceListRequest.ProtoReflect.Descriptor instead.
func (*MitigationsServiceListRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{0}
}

func (x *MitigationsServiceListRequest) GetPagination() *v202506.PaginationConfig {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *MitigationsServiceListRequest) GetFilters() *MitigationFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type MitigationFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt     *v202303.TimeRange `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MitigationIds []string           `protobuf:"bytes,2,rep,name=mitigation_ids,json=mitigationIds,proto3" json:"mitigation_ids,omitempty"`
	Sources       []*Source          `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	AlarmIds      []string           `protobuf:"bytes,4,rep,name=alarm_ids,json=alarmIds,proto3" json:"alarm_ids,omitempty"`
	States        []MitigationState  `protobuf:"varint,5,rep,packed,name=states,proto3,enum=kentik.alerting.public.v202505.MitigationState" json:"states,omitempty"`
	PlatformIds   []string           `protobuf:"bytes,6,rep,name=platform_ids,json=platformIds,proto3" json:"platform_ids,omitempty"`
	MethodIds     []string           `protobuf:"bytes,7,rep,name=method_ids,json=methodIds,proto3" json:"method_ids,omitempty"`
	IpCidrs       []string           `protobuf:"bytes,8,rep,name=ip_cidrs,json=ipCidrs,proto3" json:"ip_cidrs,omitempty"`
	IpCidrPattern string             `protobuf:"bytes,9,opt,name=ip_cidr_pattern,json=ipCidrPattern,proto3" json:"ip_cidr_pattern,omitempty"`
	Types         []MitigationType   `protobuf:"varint,10,rep,packed,name=types,proto3,enum=kentik.alerting.public.v202505.MitigationType" json:"types,omitempty"`
}

func (x *MitigationFilters) Reset() {
	*x = MitigationFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationFilters) ProtoMessage() {}

func (x *MitigationFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationFilters.ProtoReflect.Descriptor instead.
func (*MitigationFilters) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{1}
}

func (x *MitigationFilters) GetCreatedAt() *v202303.TimeRange {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MitigationFilters) GetMitigationIds() []string {
	if x != nil {
		return x.MitigationIds
	}
	return nil
}

func (x *MitigationFilters) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *MitigationFilters) GetAlarmIds() []string {
	if x != nil {
		return x.AlarmIds
	}
	return nil
}

func (x *MitigationFilters) GetStates() []MitigationState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *MitigationFilters) GetPlatformIds() []string {
	if x != nil {
		return x.PlatformIds
	}
	return nil
}

func (x *MitigationFilters) GetMethodIds() []string {
	if x != nil {
		return x.MethodIds
	}
	return nil
}

func (x *MitigationFilters) GetIpCidrs() []string {
	if x != nil {
		return x.IpCidrs
	}
	return nil
}

func (x *MitigationFilters) GetIpCidrPattern() string {
	if x != nil {
		return x.IpCidrPattern
	}
	return ""
}

func (x *MitigationFilters) GetTypes() []MitigationType {
	if x != nil {
		return x.Types
	}
	return nil
}

type MitigationsServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination  *v202506.PaginationInfo `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Mitigations []*Mitigation           `protobuf:"bytes,2,rep,name=mitigations,proto3" json:"mitigations,omitempty"`
}

func (x *MitigationsServiceListResponse) Reset() {
	*x = MitigationsServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceListResponse) ProtoMessage() {}

func (x *MitigationsServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceListResponse.ProtoReflect.Descriptor instead.
func (*MitigationsServiceListResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{2}
}

func (x *MitigationsServiceListResponse) GetPagination() *v202506.PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *MitigationsServiceListResponse) GetMitigations() []*Mitigation {
	if x != nil {
		return x.Mitigations
	}
	return nil
}

type MitigationsServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MitigationsServiceGetRequest) Reset() {
	*x = MitigationsServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceGetRequest) ProtoMessage() {}

func (x *MitigationsServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceGetRequest.ProtoReflect.Descriptor instead.
func (*MitigationsServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{3}
}

func (x *MitigationsServiceGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MitigationsServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mitigation *Mitigation `protobuf:"bytes,1,opt,name=mitigation,proto3" json:"mitigation,omitempty"`
}

func (x *MitigationsServiceGetResponse) Reset() {
	*x = MitigationsServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceGetResponse) ProtoMessage() {}

func (x *MitigationsServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceGetResponse.ProtoReflect.Descriptor instead.
func (*MitigationsServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{4}
}

func (x *MitigationsServiceGetResponse) GetMitigation() *Mitigation {
	if x != nil {
		return x.Mitigation
	}
	return nil
}

type MitigationsServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId  string               `protobuf:"bytes,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	MethodId    string               `protobuf:"bytes,2,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	IpCidr      string               `protobuf:"bytes,3,opt,name=ip_cidr,json=ipCidr,proto3" json:"ip_cidr,omitempty"`
	SrcPort     int64                `protobuf:"varint,4,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort     int64                `protobuf:"varint,5,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Comment     string               `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	AutoStopTtl *durationpb.Duration `protobuf:"bytes,7,opt,name=auto_stop_ttl,json=autoStopTtl,proto3" json:"auto_stop_ttl,omitempty"`
}

func (x *MitigationsServiceCreateRequest) Reset() {
	*x = MitigationsServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceCreateRequest) ProtoMessage() {}

func (x *MitigationsServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*MitigationsServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{5}
}

func (x *MitigationsServiceCreateRequest) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *MitigationsServiceCreateRequest) GetMethodId() string {
	if x != nil {
		return x.MethodId
	}
	return ""
}

func (x *MitigationsServiceCreateRequest) GetIpCidr() string {
	if x != nil {
		return x.IpCidr
	}
	return ""
}

func (x *MitigationsServiceCreateRequest) GetSrcPort() int64 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *MitigationsServiceCreateRequest) GetDstPort() int64 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *MitigationsServiceCreateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MitigationsServiceCreateRequest) GetAutoStopTtl() *durationpb.Duration {
	if x != nil {
		return x.AutoStopTtl
	}
	return nil
}

type MitigationsServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MitigationsServiceCreateResponse) Reset() {
	*x = MitigationsServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceCreateResponse) ProtoMessage() {}

func (x *MitigationsServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*MitigationsServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{6}
}

func (x *MitigationsServiceCreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MitigationsServiceActRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []string             `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Action MitigationUserAction `protobuf:"varint,2,opt,name=action,proto3,enum=kentik.alerting.public.v202505.MitigationUserAction" json:"action,omitempty"`
}

func (x *MitigationsServiceActRequest) Reset() {
	*x = MitigationsServiceActRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceActRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceActRequest) ProtoMessage() {}

func (x *MitigationsServiceActRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceActRequest.ProtoReflect.Descriptor instead.
func (*MitigationsServiceActRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{7}
}

func (x *MitigationsServiceActRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MitigationsServiceActRequest) GetAction() MitigationUserAction {
	if x != nil {
		return x.Action
	}
	return MitigationUserAction_MITIGATION_USER_ACTION_UNSPECIFIED
}

type MitigationsServiceAvailableActionsForMitigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MitigationsServiceAvailableActionsForMitigationRequest) Reset() {
	*x = MitigationsServiceAvailableActionsForMitigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceAvailableActionsForMitigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceAvailableActionsForMitigationRequest) ProtoMessage() {}

func (x *MitigationsServiceAvailableActionsForMitigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceAvailableActionsForMitigationRequest.ProtoReflect.Descriptor instead.
func (*MitigationsServiceAvailableActionsForMitigationRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{8}
}

func (x *MitigationsServiceAvailableActionsForMitigationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MitigationsServiceAvailableActionsForMitigationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableActions []string `protobuf:"bytes,1,rep,name=available_actions,json=availableActions,proto3" json:"available_actions,omitempty"`
}

func (x *MitigationsServiceAvailableActionsForMitigationResponse) Reset() {
	*x = MitigationsServiceAvailableActionsForMitigationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceAvailableActionsForMitigationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceAvailableActionsForMitigationResponse) ProtoMessage() {}

func (x *MitigationsServiceAvailableActionsForMitigationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceAvailableActionsForMitigationResponse.ProtoReflect.Descriptor instead.
func (*MitigationsServiceAvailableActionsForMitigationResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{9}
}

func (x *MitigationsServiceAvailableActionsForMitigationResponse) GetAvailableActions() []string {
	if x != nil {
		return x.AvailableActions
	}
	return nil
}

type MitigationsServiceAvailableActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MitigationsServiceAvailableActionsRequest) Reset() {
	*x = MitigationsServiceAvailableActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceAvailableActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceAvailableActionsRequest) ProtoMessage() {}

func (x *MitigationsServiceAvailableActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceAvailableActionsRequest.ProtoReflect.Descriptor instead.
func (*MitigationsServiceAvailableActionsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{10}
}

type MitigationsServiceAvailableActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transitions []*MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions `protobuf:"bytes,1,rep,name=transitions,proto3" json:"transitions,omitempty"`
}

func (x *MitigationsServiceAvailableActionsResponse) Reset() {
	*x = MitigationsServiceAvailableActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceAvailableActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceAvailableActionsResponse) ProtoMessage() {}

func (x *MitigationsServiceAvailableActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceAvailableActionsResponse.ProtoReflect.Descriptor instead.
func (*MitigationsServiceAvailableActionsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{11}
}

func (x *MitigationsServiceAvailableActionsResponse) GetTransitions() []*MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions {
	if x != nil {
		return x.Transitions
	}
	return nil
}

type MitigationActionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*MitigationActionDetail `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *MitigationActionDetails) Reset() {
	*x = MitigationActionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationActionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationActionDetails) ProtoMessage() {}

func (x *MitigationActionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationActionDetails.ProtoReflect.Descriptor instead.
func (*MitigationActionDetails) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{12}
}

func (x *MitigationActionDetails) GetActions() []*MitigationActionDetail {
	if x != nil {
		return x.Actions
	}
	return nil
}

type MitigationActionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName         string               `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Action            MitigationUserAction `protobuf:"varint,2,opt,name=action,proto3,enum=kentik.alerting.public.v202505.MitigationUserAction" json:"action,omitempty"`
	ActionDescription string               `protobuf:"bytes,3,opt,name=action_description,json=actionDescription,proto3" json:"action_description,omitempty"`
	FromState         MitigationState      `protobuf:"varint,4,opt,name=from_state,json=fromState,proto3,enum=kentik.alerting.public.v202505.MitigationState" json:"from_state,omitempty"`
	ToStates          []MitigationState    `protobuf:"varint,5,rep,packed,name=to_states,json=toStates,proto3,enum=kentik.alerting.public.v202505.MitigationState" json:"to_states,omitempty"`
	ActionPath        string               `protobuf:"bytes,6,opt,name=action_path,json=actionPath,proto3" json:"action_path,omitempty"`
}

func (x *MitigationActionDetail) Reset() {
	*x = MitigationActionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationActionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationActionDetail) ProtoMessage() {}

func (x *MitigationActionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationActionDetail.ProtoReflect.Descriptor instead.
func (*MitigationActionDetail) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{13}
}

func (x *MitigationActionDetail) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *MitigationActionDetail) GetAction() MitigationUserAction {
	if x != nil {
		return x.Action
	}
	return MitigationUserAction_MITIGATION_USER_ACTION_UNSPECIFIED
}

func (x *MitigationActionDetail) GetActionDescription() string {
	if x != nil {
		return x.ActionDescription
	}
	return ""
}

func (x *MitigationActionDetail) GetFromState() MitigationState {
	if x != nil {
		return x.FromState
	}
	return MitigationState_MITIGATION_STATE_UNSPECIFIED
}

func (x *MitigationActionDetail) GetToStates() []MitigationState {
	if x != nil {
		return x.ToStates
	}
	return nil
}

func (x *MitigationActionDetail) GetActionPath() string {
	if x != nil {
		return x.ActionPath
	}
	return ""
}

type MitigationsServiceActResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*MitigationsActResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *MitigationsServiceActResponse) Reset() {
	*x = MitigationsServiceActResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceActResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceActResponse) ProtoMessage() {}

func (x *MitigationsServiceActResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceActResponse.ProtoReflect.Descriptor instead.
func (*MitigationsServiceActResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{14}
}

func (x *MitigationsServiceActResponse) GetResults() []*MitigationsActResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type MitigationsActResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MitigationId int64  `protobuf:"varint,1,opt,name=mitigation_id,json=mitigationId,proto3" json:"mitigation_id,omitempty"`
	Success      bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message      string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MitigationsActResult) Reset() {
	*x = MitigationsActResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsActResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsActResult) ProtoMessage() {}

func (x *MitigationsActResult) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsActResult.ProtoReflect.Descriptor instead.
func (*MitigationsActResult) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{15}
}

func (x *MitigationsActResult) GetMitigationId() int64 {
	if x != nil {
		return x.MitigationId
	}
	return 0
}

func (x *MitigationsActResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MitigationsActResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Mitigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          MitigationType            `protobuf:"varint,2,opt,name=type,proto3,enum=kentik.alerting.public.v202505.MitigationType" json:"type,omitempty"`
	AlarmIds      []string                  `protobuf:"bytes,3,rep,name=alarm_ids,json=alarmIds,proto3" json:"alarm_ids,omitempty"`
	Target        *v202506.MitigationTarget `protobuf:"bytes,16,opt,name=target,proto3" json:"target,omitempty"`
	CurrentState  MitigationState           `protobuf:"varint,7,opt,name=current_state,json=currentState,proto3,enum=kentik.alerting.public.v202505.MitigationState" json:"current_state,omitempty"`
	PreviousState MitigationState           `protobuf:"varint,8,opt,name=previous_state,json=previousState,proto3,enum=kentik.alerting.public.v202505.MitigationState" json:"previous_state,omitempty"`
	PlatformId    string                    `protobuf:"bytes,9,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	MethodId      string                    `protobuf:"bytes,10,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	StartTimeAt   *timestamppb.Timestamp    `protobuf:"bytes,11,opt,name=start_time_at,json=startTimeAt,proto3" json:"start_time_at,omitempty"`
	EndTimeAt     *timestamppb.Timestamp    `protobuf:"bytes,12,opt,name=end_time_at,json=endTimeAt,proto3" json:"end_time_at,omitempty"`
	States        []*MitigationStateEntry   `protobuf:"bytes,13,rep,name=states,proto3" json:"states,omitempty"`
	AutoStopTtl   *durationpb.Duration      `protobuf:"bytes,14,opt,name=auto_stop_ttl,json=autoStopTtl,proto3" json:"auto_stop_ttl,omitempty"`
	Comment       string                    `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
	Source        *Source                   `protobuf:"bytes,17,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Mitigation) Reset() {
	*x = Mitigation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mitigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mitigation) ProtoMessage() {}

func (x *Mitigation) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mitigation.ProtoReflect.Descriptor instead.
func (*Mitigation) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{16}
}

func (x *Mitigation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Mitigation) GetType() MitigationType {
	if x != nil {
		return x.Type
	}
	return MitigationType_MITIGATION_TYPE_UNSPECIFIED
}

func (x *Mitigation) GetAlarmIds() []string {
	if x != nil {
		return x.AlarmIds
	}
	return nil
}

func (x *Mitigation) GetTarget() *v202506.MitigationTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Mitigation) GetCurrentState() MitigationState {
	if x != nil {
		return x.CurrentState
	}
	return MitigationState_MITIGATION_STATE_UNSPECIFIED
}

func (x *Mitigation) GetPreviousState() MitigationState {
	if x != nil {
		return x.PreviousState
	}
	return MitigationState_MITIGATION_STATE_UNSPECIFIED
}

func (x *Mitigation) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *Mitigation) GetMethodId() string {
	if x != nil {
		return x.MethodId
	}
	return ""
}

func (x *Mitigation) GetStartTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeAt
	}
	return nil
}

func (x *Mitigation) GetEndTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeAt
	}
	return nil
}

func (x *Mitigation) GetStates() []*MitigationStateEntry {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *Mitigation) GetAutoStopTtl() *durationpb.Duration {
	if x != nil {
		return x.AutoStopTtl
	}
	return nil
}

func (x *Mitigation) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Mitigation) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type MitigationStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	State     MitigationState        `protobuf:"varint,2,opt,name=state,proto3,enum=kentik.alerting.public.v202505.MitigationState" json:"state,omitempty"`
	Event     MitigationEvent        `protobuf:"varint,3,opt,name=event,proto3,enum=kentik.alerting.public.v202505.MitigationEvent" json:"event,omitempty"`
}

func (x *MitigationStateEntry) Reset() {
	*x = MitigationStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationStateEntry) ProtoMessage() {}

func (x *MitigationStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationStateEntry.ProtoReflect.Descriptor instead.
func (*MitigationStateEntry) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{17}
}

func (x *MitigationStateEntry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MitigationStateEntry) GetState() MitigationState {
	if x != nil {
		return x.State
	}
	return MitigationState_MITIGATION_STATE_UNSPECIFIED
}

func (x *MitigationStateEntry) GetEvent() MitigationEvent {
	if x != nil {
		return x.Event
	}
	return MitigationEvent_MITIGATION_EVENT_UNSPECIFIED
}

type MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromState        MitigationState           `protobuf:"varint,1,opt,name=from_state,json=fromState,proto3,enum=kentik.alerting.public.v202505.MitigationState" json:"from_state,omitempty"`
	AvailableActions []*MitigationActionDetail `protobuf:"bytes,2,rep,name=available_actions,json=availableActions,proto3" json:"available_actions,omitempty"`
}

func (x *MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions) Reset() {
	*x = MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions) ProtoMessage() {}

func (x *MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions.ProtoReflect.Descriptor instead.
func (*MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP(), []int{11, 0}
}

func (x *MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions) GetFromState() MitigationState {
	if x != nil {
		return x.FromState
	}
	return MitigationState_MITIGATION_STATE_UNSPECIFIED
}

func (x *MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions) GetAvailableActions() []*MitigationActionDetail {
	if x != nil {
		return x.AvailableActions
	}
	return nil
}

var File_kentik_alerting_public_v202505_mitigation_proto protoreflect.FileDescriptor

var file_kentik_alerting_public_v202505_mitigation_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x35, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x1d, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x92, 0x41,
	0x34, 0x32, 0x32, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x34, 0x92, 0x41, 0x2e, 0x32, 0x2c,
	0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc6, 0x08, 0x0a, 0x11, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x88,
	0x01, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x3f, 0x92,
	0x41, 0x39, 0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x25, 0x32, 0x23, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0d,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x82, 0x01,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x40, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x54, 0x68,
	0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x32, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x2e, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x7c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33, 0x92, 0x41,
	0x2d, 0x32, 0x2b, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x2e, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x48, 0x92, 0x41, 0x42, 0x32, 0x40, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x49, 0x44,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x40, 0x32,
	0x3e, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x2e, 0xe0,
	0x41, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a,
	0x08, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x32, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x49, 0x50, 0x2f, 0x43, 0x49, 0x44,
	0x52, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x0f,
	0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x54, 0x68, 0x65, 0x20,
	0x49, 0x50, 0x2f, 0x43, 0x49, 0x44, 0x52, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x79, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x69, 0x70,
	0x43, 0x69, 0x64, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x74, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2e, 0x92, 0x41, 0x28, 0x32,
	0x26, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x22, 0xb9, 0x02, 0x0a, 0x1e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x39, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x8b, 0x01, 0x0a, 0x0b, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x3d, 0x92, 0x41, 0x37, 0x32, 0x35, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72,
	0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x0b, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a,
	0x1c, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x22, 0x32, 0x20,
	0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x2e,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x4d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e,
	0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x38, 0x92, 0x41, 0x32, 0x32,
	0x30, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf6, 0x04, 0x0a, 0x1f, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x43, 0x32, 0x41,
	0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x49, 0x44, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x2e, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x5b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x38, 0x32, 0x36, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20,
	0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x2e,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x07, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x20, 0x32, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x49, 0x50, 0x2f, 0x43, 0x49, 0x44, 0x52,
	0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x3f,
	0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x44, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x29, 0x92, 0x41, 0x23, 0x32, 0x21, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x26, 0x32, 0x24, 0x41, 0x20, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x7a, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x3b, 0x92, 0x41, 0x35, 0x32, 0x33, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x74, 0x6f,
	0x2d, 0x6c, 0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x22, 0x5d, 0x0a, 0x20, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x23, 0x32, 0x21,
	0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65,
	0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x20, 0x6f,
	0x6e, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x7f, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x31, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x36,
	0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x3e, 0x92, 0x41, 0x38, 0x32, 0x36, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x2e, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x37, 0x4d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0x92,
	0x41, 0x2b, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x29, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xa2, 0x04, 0x0a, 0x2a, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc5,
	0x01, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x38, 0x92, 0x41, 0x32, 0x32, 0x30, 0x54, 0x68, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xab, 0x02, 0x0a, 0x1e, 0x4d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x26,
	0x92, 0x41, 0x23, 0x32, 0x21, 0x54, 0x68, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x78, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21,
	0x54, 0x68, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x05, 0x0a, 0x16, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30,
	0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x54, 0x68,
	0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x11, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x86, 0x01, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x3a, 0x92,
	0x41, 0x37, 0x32, 0x35, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x2e, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x54,
	0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x9f, 0x01, 0x0a, 0x1d, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x2e, 0x92, 0x41,
	0x28, 0x32, 0x26, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57,
	0x0a, 0x0d, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x54, 0x68, 0x65, 0x20,
	0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x52, 0x0c, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x57,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x2e, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30,
	0x32, 0x2e, 0x41, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x91, 0x0c, 0x0a, 0x0a, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x54, 0x68, 0x65, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1f, 0x92, 0x41, 0x19, 0x32, 0x17,
	0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x53, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x20, 0x49, 0x44, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x6e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x36, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x25, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54, 0x68, 0x65,
	0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2c,
	0x92, 0x41, 0x26, 0x32, 0x24, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0xe0, 0x41, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x63, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x54, 0x68,
	0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x49, 0x44, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3a, 0x32,
	0x38, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x49, 0x44, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x32, 0x25,
	0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x73, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x37, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x68, 0x65,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20,
	0x6f, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65, 0x6e, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x38, 0x92, 0x41, 0x32, 0x32, 0x30, 0x54, 0x68, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x74, 0x74, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0x92, 0x41, 0x35, 0x32, 0x33, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x6c, 0x69, 0x76, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0,
	0x41, 0x03, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x12,
	0x46, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2c, 0x92, 0x41, 0x26, 0x32, 0x24, 0x41, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x97, 0x01, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x57, 0x92, 0x41, 0x51, 0x32, 0x4f, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x49, 0x44, 0x29, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xf0, 0x02,
	0x0a, 0x14, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x6c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x54, 0x68, 0x65, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x75, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x2e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x2c, 0x92, 0x41, 0x29,
	0x32, 0x27, 0x54, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2a, 0xdf, 0x02, 0x0a, 0x14, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x49, 0x54,
	0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x4b, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49,
	0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4d,
	0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04,
	0x12, 0x28, 0x0a, 0x24, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49,
	0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x06,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59,
	0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4b,
	0x10, 0x08, 0x2a, 0xe9, 0x04, 0x0a, 0x0f, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x54, 0x49,
	0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49,
	0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x54,
	0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x07, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x09,
	0x12, 0x26, 0x0a, 0x22, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x54, 0x49,
	0x47, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x54, 0x49,
	0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x54,
	0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49,
	0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49,
	0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x54,
	0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0f, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x10, 0x2a, 0x87,
	0x05, 0x0a, 0x0f, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49,
	0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x06, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x08, 0x12,
	0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x09, 0x12,
	0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x0a, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0b,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x0c,
	0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x45,
	0x44, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x54, 0x49,
	0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x4d,
	0x49, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x54, 0x49, 0x47, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x11, 0x32, 0xe8, 0x0d, 0x0a, 0x12, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xed, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x92, 0x41, 0x38, 0x12, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xe3, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x3c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x92, 0x41, 0x2c, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x4d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x2a, 0x03, 0x47, 0x65, 0x74, 0xf2, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x12, 0x11, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xfc, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6f, 0x92, 0x41, 0x3d, 0x12, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x02, 0x0a, 0x03, 0x41, 0x63, 0x74, 0x12, 0x3c, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x92, 0x41, 0x48, 0x12,
	0x11, 0x41, 0x63, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20, 0x61, 0x6e, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x2a, 0x03, 0x41, 0x63, 0x74, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12,
	0xb7, 0x02, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x92, 0x41,
	0x55, 0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xf2, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x89, 0x03, 0x0a, 0x1d, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f,
	0x72, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01, 0x92,
	0x41, 0x7b, 0x12, 0x24, 0x47, 0x65, 0x74, 0x20, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x1d,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xd7, 0x02,
	0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2c, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x90,
	0xd8, 0x02, 0x03, 0x42, 0xfe, 0x04, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x35, 0x92, 0x41, 0xaf, 0x04, 0x12, 0xe3, 0x02, 0x0a, 0x1c, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x41, 0x50, 0x49, 0x12, 0xf2, 0x01, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x4b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x27, 0x73, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x22, 0x45, 0x0a, 0x16, 0x4b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x32, 0x07, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2a, 0x01, 0x02, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08,
	0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08,
	0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49,
	0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00,
	0x72, 0x42, 0x0a, 0x1b, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_alerting_public_v202505_mitigation_proto_rawDescOnce sync.Once
	file_kentik_alerting_public_v202505_mitigation_proto_rawDescData = file_kentik_alerting_public_v202505_mitigation_proto_rawDesc
)

func file_kentik_alerting_public_v202505_mitigation_proto_rawDescGZIP() []byte {
	file_kentik_alerting_public_v202505_mitigation_proto_rawDescOnce.Do(func() {
		file_kentik_alerting_public_v202505_mitigation_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_alerting_public_v202505_mitigation_proto_rawDescData)
	})
	return file_kentik_alerting_public_v202505_mitigation_proto_rawDescData
}

var file_kentik_alerting_public_v202505_mitigation_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kentik_alerting_public_v202505_mitigation_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_kentik_alerting_public_v202505_mitigation_proto_goTypes = []interface{}{
	(MitigationUserAction)(0),                                                         // 0: kentik.alerting.public.v202505.MitigationUserAction
	(MitigationState)(0),                                                              // 1: kentik.alerting.public.v202505.MitigationState
	(MitigationEvent)(0),                                                              // 2: kentik.alerting.public.v202505.MitigationEvent
	(*MitigationsServiceListRequest)(nil),                                             // 3: kentik.alerting.public.v202505.MitigationsServiceListRequest
	(*MitigationFilters)(nil),                                                         // 4: kentik.alerting.public.v202505.MitigationFilters
	(*MitigationsServiceListResponse)(nil),                                            // 5: kentik.alerting.public.v202505.MitigationsServiceListResponse
	(*MitigationsServiceGetRequest)(nil),                                              // 6: kentik.alerting.public.v202505.MitigationsServiceGetRequest
	(*MitigationsServiceGetResponse)(nil),                                             // 7: kentik.alerting.public.v202505.MitigationsServiceGetResponse
	(*MitigationsServiceCreateRequest)(nil),                                           // 8: kentik.alerting.public.v202505.MitigationsServiceCreateRequest
	(*MitigationsServiceCreateResponse)(nil),                                          // 9: kentik.alerting.public.v202505.MitigationsServiceCreateResponse
	(*MitigationsServiceActRequest)(nil),                                              // 10: kentik.alerting.public.v202505.MitigationsServiceActRequest
	(*MitigationsServiceAvailableActionsForMitigationRequest)(nil),                    // 11: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsForMitigationRequest
	(*MitigationsServiceAvailableActionsForMitigationResponse)(nil),                   // 12: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsForMitigationResponse
	(*MitigationsServiceAvailableActionsRequest)(nil),                                 // 13: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsRequest
	(*MitigationsServiceAvailableActionsResponse)(nil),                                // 14: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsResponse
	(*MitigationActionDetails)(nil),                                                   // 15: kentik.alerting.public.v202505.MitigationActionDetails
	(*MitigationActionDetail)(nil),                                                    // 16: kentik.alerting.public.v202505.MitigationActionDetail
	(*MitigationsServiceActResponse)(nil),                                             // 17: kentik.alerting.public.v202505.MitigationsServiceActResponse
	(*MitigationsActResult)(nil),                                                      // 18: kentik.alerting.public.v202505.MitigationsActResult
	(*Mitigation)(nil),                                                                // 19: kentik.alerting.public.v202505.Mitigation
	(*MitigationStateEntry)(nil),                                                      // 20: kentik.alerting.public.v202505.MitigationStateEntry
	(*MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions)(nil), // 21: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsResponse.MitigationAvailableTransitions
	(*v202506.PaginationConfig)(nil),                                                  // 22: kentik.alerting.types.v202506.PaginationConfig
	(*v202303.TimeRange)(nil),                                                         // 23: kentik.alerting.types.v202303.TimeRange
	(*Source)(nil),                                                                    // 24: kentik.alerting.public.v202505.Source
	(MitigationType)(0),                                                               // 25: kentik.alerting.public.v202505.MitigationType
	(*v202506.PaginationInfo)(nil),                                                    // 26: kentik.alerting.types.v202506.PaginationInfo
	(*durationpb.Duration)(nil),                                                       // 27: google.protobuf.Duration
	(*v202506.MitigationTarget)(nil),                                                  // 28: kentik.alerting.types.v202506.MitigationTarget
	(*timestamppb.Timestamp)(nil),                                                     // 29: google.protobuf.Timestamp
}
var file_kentik_alerting_public_v202505_mitigation_proto_depIdxs = []int32{
	22, // 0: kentik.alerting.public.v202505.MitigationsServiceListRequest.pagination:type_name -> kentik.alerting.types.v202506.PaginationConfig
	4,  // 1: kentik.alerting.public.v202505.MitigationsServiceListRequest.filters:type_name -> kentik.alerting.public.v202505.MitigationFilters
	23, // 2: kentik.alerting.public.v202505.MitigationFilters.created_at:type_name -> kentik.alerting.types.v202303.TimeRange
	24, // 3: kentik.alerting.public.v202505.MitigationFilters.sources:type_name -> kentik.alerting.public.v202505.Source
	1,  // 4: kentik.alerting.public.v202505.MitigationFilters.states:type_name -> kentik.alerting.public.v202505.MitigationState
	25, // 5: kentik.alerting.public.v202505.MitigationFilters.types:type_name -> kentik.alerting.public.v202505.MitigationType
	26, // 6: kentik.alerting.public.v202505.MitigationsServiceListResponse.pagination:type_name -> kentik.alerting.types.v202506.PaginationInfo
	19, // 7: kentik.alerting.public.v202505.MitigationsServiceListResponse.mitigations:type_name -> kentik.alerting.public.v202505.Mitigation
	19, // 8: kentik.alerting.public.v202505.MitigationsServiceGetResponse.mitigation:type_name -> kentik.alerting.public.v202505.Mitigation
	27, // 9: kentik.alerting.public.v202505.MitigationsServiceCreateRequest.auto_stop_ttl:type_name -> google.protobuf.Duration
	0,  // 10: kentik.alerting.public.v202505.MitigationsServiceActRequest.action:type_name -> kentik.alerting.public.v202505.MitigationUserAction
	21, // 11: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsResponse.transitions:type_name -> kentik.alerting.public.v202505.MitigationsServiceAvailableActionsResponse.MitigationAvailableTransitions
	16, // 12: kentik.alerting.public.v202505.MitigationActionDetails.actions:type_name -> kentik.alerting.public.v202505.MitigationActionDetail
	0,  // 13: kentik.alerting.public.v202505.MitigationActionDetail.action:type_name -> kentik.alerting.public.v202505.MitigationUserAction
	1,  // 14: kentik.alerting.public.v202505.MitigationActionDetail.from_state:type_name -> kentik.alerting.public.v202505.MitigationState
	1,  // 15: kentik.alerting.public.v202505.MitigationActionDetail.to_states:type_name -> kentik.alerting.public.v202505.MitigationState
	18, // 16: kentik.alerting.public.v202505.MitigationsServiceActResponse.results:type_name -> kentik.alerting.public.v202505.MitigationsActResult
	25, // 17: kentik.alerting.public.v202505.Mitigation.type:type_name -> kentik.alerting.public.v202505.MitigationType
	28, // 18: kentik.alerting.public.v202505.Mitigation.target:type_name -> kentik.alerting.types.v202506.MitigationTarget
	1,  // 19: kentik.alerting.public.v202505.Mitigation.current_state:type_name -> kentik.alerting.public.v202505.MitigationState
	1,  // 20: kentik.alerting.public.v202505.Mitigation.previous_state:type_name -> kentik.alerting.public.v202505.MitigationState
	29, // 21: kentik.alerting.public.v202505.Mitigation.start_time_at:type_name -> google.protobuf.Timestamp
	29, // 22: kentik.alerting.public.v202505.Mitigation.end_time_at:type_name -> google.protobuf.Timestamp
	20, // 23: kentik.alerting.public.v202505.Mitigation.states:type_name -> kentik.alerting.public.v202505.MitigationStateEntry
	27, // 24: kentik.alerting.public.v202505.Mitigation.auto_stop_ttl:type_name -> google.protobuf.Duration
	24, // 25: kentik.alerting.public.v202505.Mitigation.source:type_name -> kentik.alerting.public.v202505.Source
	29, // 26: kentik.alerting.public.v202505.MitigationStateEntry.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 27: kentik.alerting.public.v202505.MitigationStateEntry.state:type_name -> kentik.alerting.public.v202505.MitigationState
	2,  // 28: kentik.alerting.public.v202505.MitigationStateEntry.event:type_name -> kentik.alerting.public.v202505.MitigationEvent
	1,  // 29: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsResponse.MitigationAvailableTransitions.from_state:type_name -> kentik.alerting.public.v202505.MitigationState
	16, // 30: kentik.alerting.public.v202505.MitigationsServiceAvailableActionsResponse.MitigationAvailableTransitions.available_actions:type_name -> kentik.alerting.public.v202505.MitigationActionDetail
	3,  // 31: kentik.alerting.public.v202505.MitigationsService.List:input_type -> kentik.alerting.public.v202505.MitigationsServiceListRequest
	6,  // 32: kentik.alerting.public.v202505.MitigationsService.Get:input_type -> kentik.alerting.public.v202505.MitigationsServiceGetRequest
	8,  // 33: kentik.alerting.public.v202505.MitigationsService.Create:input_type -> kentik.alerting.public.v202505.MitigationsServiceCreateRequest
	10, // 34: kentik.alerting.public.v202505.MitigationsService.Act:input_type -> kentik.alerting.public.v202505.MitigationsServiceActRequest
	13, // 35: kentik.alerting.public.v202505.MitigationsService.AvailableActions:input_type -> kentik.alerting.public.v202505.MitigationsServiceAvailableActionsRequest
	11, // 36: kentik.alerting.public.v202505.MitigationsService.AvailableActionsForMitigation:input_type -> kentik.alerting.public.v202505.MitigationsServiceAvailableActionsForMitigationRequest
	5,  // 37: kentik.alerting.public.v202505.MitigationsService.List:output_type -> kentik.alerting.public.v202505.MitigationsServiceListResponse
	7,  // 38: kentik.alerting.public.v202505.MitigationsService.Get:output_type -> kentik.alerting.public.v202505.MitigationsServiceGetResponse
	9,  // 39: kentik.alerting.public.v202505.MitigationsService.Create:output_type -> kentik.alerting.public.v202505.MitigationsServiceCreateResponse
	17, // 40: kentik.alerting.public.v202505.MitigationsService.Act:output_type -> kentik.alerting.public.v202505.MitigationsServiceActResponse
	14, // 41: kentik.alerting.public.v202505.MitigationsService.AvailableActions:output_type -> kentik.alerting.public.v202505.MitigationsServiceAvailableActionsResponse
	12, // 42: kentik.alerting.public.v202505.MitigationsService.AvailableActionsForMitigation:output_type -> kentik.alerting.public.v202505.MitigationsServiceAvailableActionsForMitigationResponse
	37, // [37:43] is the sub-list for method output_type
	31, // [31:37] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_kentik_alerting_public_v202505_mitigation_proto_init() }
func file_kentik_alerting_public_v202505_mitigation_proto_init() {
	if File_kentik_alerting_public_v202505_mitigation_proto != nil {
		return
	}
	file_kentik_alerting_public_v202505_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceActRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceAvailableActionsForMitigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceAvailableActionsForMitigationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceAvailableActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceAvailableActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationActionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationActionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceActResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsActResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mitigation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationsServiceAvailableActionsResponse_MitigationAvailableTransitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_alerting_public_v202505_mitigation_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_alerting_public_v202505_mitigation_proto_goTypes,
		DependencyIndexes: file_kentik_alerting_public_v202505_mitigation_proto_depIdxs,
		EnumInfos:         file_kentik_alerting_public_v202505_mitigation_proto_enumTypes,
		MessageInfos:      file_kentik_alerting_public_v202505_mitigation_proto_msgTypes,
	}.Build()
	File_kentik_alerting_public_v202505_mitigation_proto = out.File
	file_kentik_alerting_public_v202505_mitigation_proto_rawDesc = nil
	file_kentik_alerting_public_v202505_mitigation_proto_goTypes = nil
	file_kentik_alerting_public_v202505_mitigation_proto_depIdxs = nil
}
