// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/alerting/public/v202505/alert.proto

package v202505

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v202303 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202303"
	v202506 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202506"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AlertState int32

const (
	AlertState_ALERT_STATE_UNSPECIFIED AlertState = 0
	// alert is cleared, no longer active
	AlertState_ALERT_STATE_CLEAR AlertState = 1
	// alert is active
	AlertState_ALERT_STATE_ACTIVE AlertState = 2
)

// Enum value maps for AlertState.
var (
	AlertState_name = map[int32]string{
		0: "ALERT_STATE_UNSPECIFIED",
		1: "ALERT_STATE_CLEAR",
		2: "ALERT_STATE_ACTIVE",
	}
	AlertState_value = map[string]int32{
		"ALERT_STATE_UNSPECIFIED": 0,
		"ALERT_STATE_CLEAR":       1,
		"ALERT_STATE_ACTIVE":      2,
	}
)

func (x AlertState) Enum() *AlertState {
	p := new(AlertState)
	*p = x
	return p
}

func (x AlertState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertState) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_alert_proto_enumTypes[0].Descriptor()
}

func (AlertState) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_alert_proto_enumTypes[0]
}

func (x AlertState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertState.Descriptor instead.
func (AlertState) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{0}
}

type AlertAcknowledgement int32

const (
	AlertAcknowledgement_ALERT_ACKNOWLEDGEMENT_UNSPECIFIED AlertAcknowledgement = 0
	// alert acknowledgement is required (by the policy configuration)
	AlertAcknowledgement_ALERT_ACKNOWLEDGEMENT_REQUIRED AlertAcknowledgement = 1
	// alert acknowledgement is done (either manually or automatically)
	AlertAcknowledgement_ALERT_ACKNOWLEDGEMENT_DONE AlertAcknowledgement = 2
	// alert acknowledgement is not done (no matter if it's required or not)
	AlertAcknowledgement_ALERT_ACKNOWLEDGEMENT_NOT_ACKED AlertAcknowledgement = 3
)

// Enum value maps for AlertAcknowledgement.
var (
	AlertAcknowledgement_name = map[int32]string{
		0: "ALERT_ACKNOWLEDGEMENT_UNSPECIFIED",
		1: "ALERT_ACKNOWLEDGEMENT_REQUIRED",
		2: "ALERT_ACKNOWLEDGEMENT_DONE",
		3: "ALERT_ACKNOWLEDGEMENT_NOT_ACKED",
	}
	AlertAcknowledgement_value = map[string]int32{
		"ALERT_ACKNOWLEDGEMENT_UNSPECIFIED": 0,
		"ALERT_ACKNOWLEDGEMENT_REQUIRED":    1,
		"ALERT_ACKNOWLEDGEMENT_DONE":        2,
		"ALERT_ACKNOWLEDGEMENT_NOT_ACKED":   3,
	}
)

func (x AlertAcknowledgement) Enum() *AlertAcknowledgement {
	p := new(AlertAcknowledgement)
	*p = x
	return p
}

func (x AlertAcknowledgement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertAcknowledgement) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_alert_proto_enumTypes[1].Descriptor()
}

func (AlertAcknowledgement) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_alert_proto_enumTypes[1]
}

func (x AlertAcknowledgement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertAcknowledgement.Descriptor instead.
func (AlertAcknowledgement) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{1}
}

type FlowContext_ActivationStatus int32

const (
	FlowContext_ACTIVATION_STATUS_UNSPECIFIED FlowContext_ActivationStatus = 0
	// baseline for this alert key was not used (e.g. policy configuration is not using baseline)
	FlowContext_ACTIVATION_STATUS_NOT_USED_BASELINE FlowContext_ActivationStatus = 1
	// baseline for this alert key was missing, and the fallback is to just skip
	FlowContext_ACTIVATION_STATUS_BASELINE_MISSING_SKIP FlowContext_ActivationStatus = 2
	// baseline for this alert key was missing, and the fallback is to trigger the alert
	FlowContext_ACTIVATION_STATUS_BASELINE_MISSING_TRIGGER FlowContext_ActivationStatus = 3
	// baseline for this alert key was valid and hence used
	FlowContext_ACTIVATION_STATUS_BASELINE_USED_FOUND FlowContext_ActivationStatus = 4
	// baseline for this alert key was missing and default value was used
	FlowContext_ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT FlowContext_ActivationStatus = 5
	// baseline for this alert key was missing and lowest baseline value was used
	FlowContext_ACTIVATION_STATUS_BASELINE_MISSING_LOWEST FlowContext_ActivationStatus = 6
	// baseline for this alert key was missing and highest baseline value was used
	FlowContext_ACTIVATION_STATUS_BASELINE_MISSING_HIGHEST FlowContext_ActivationStatus = 7
	// baseline for this alert key was missing and this policy wants to trigger the alert in such case
	FlowContext_ACTIVATION_STATUS_BASELINE_NOT_FOUND_EXISTS FlowContext_ActivationStatus = 8
	// current value for this alert key was missing, and the fallback is to just skip
	FlowContext_ACTIVATION_STATUS_CURRENT_MISSING_SKIP FlowContext_ActivationStatus = 9
	// current value for this alert key was missing, and the fallback is to trigger the alert
	FlowContext_ACTIVATION_STATUS_CURRENT_MISSING_TRIGGER FlowContext_ActivationStatus = 10
	// current value for this alert key was valid and hence used
	FlowContext_ACTIVATION_STATUS_CURRENT_USED_FOUND FlowContext_ActivationStatus = 11
	// current value for this alert key was missing and default value was used
	FlowContext_ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT FlowContext_ActivationStatus = 12
	// current value for this alert key was missing and lowest current traffic value was used
	FlowContext_ACTIVATION_STATUS_CURRENT_MISSING_LOWEST FlowContext_ActivationStatus = 13
	// current value for this alert key was missing and highest current traffic value was used
	FlowContext_ACTIVATION_STATUS_CURRENT_MISSING_HIGHEST FlowContext_ActivationStatus = 14
	// current value for this alert key was missing and this policy wants to trigger the alert in such case
	FlowContext_ACTIVATION_STATUS_CURRENT_NOT_FOUND_EXISTS FlowContext_ActivationStatus = 15
	// baseline for this alert key was missing and no other value was found, so default value was used instead of lowest baseline value
	FlowContext_ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT_INSTEAD_OF_LOWEST FlowContext_ActivationStatus = 16
	// baseline for this alert key was missing and no other value was found, so default value was used instead of highest baseline value
	FlowContext_ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT_INSTEAD_OF_HIGHEST FlowContext_ActivationStatus = 17
	// current value for this alert key was missing and no other value was found, so default value was used instead of lowest current traffic value
	FlowContext_ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT_INSTEAD_OF_LOWEST FlowContext_ActivationStatus = 18
	// current value for this alert key was missing and no other value was found, so default value was used instead of highest current traffic value
	FlowContext_ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT_INSTEAD_OF_HIGHEST FlowContext_ActivationStatus = 19
)

// Enum value maps for FlowContext_ActivationStatus.
var (
	FlowContext_ActivationStatus_name = map[int32]string{
		0:  "ACTIVATION_STATUS_UNSPECIFIED",
		1:  "ACTIVATION_STATUS_NOT_USED_BASELINE",
		2:  "ACTIVATION_STATUS_BASELINE_MISSING_SKIP",
		3:  "ACTIVATION_STATUS_BASELINE_MISSING_TRIGGER",
		4:  "ACTIVATION_STATUS_BASELINE_USED_FOUND",
		5:  "ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT",
		6:  "ACTIVATION_STATUS_BASELINE_MISSING_LOWEST",
		7:  "ACTIVATION_STATUS_BASELINE_MISSING_HIGHEST",
		8:  "ACTIVATION_STATUS_BASELINE_NOT_FOUND_EXISTS",
		9:  "ACTIVATION_STATUS_CURRENT_MISSING_SKIP",
		10: "ACTIVATION_STATUS_CURRENT_MISSING_TRIGGER",
		11: "ACTIVATION_STATUS_CURRENT_USED_FOUND",
		12: "ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT",
		13: "ACTIVATION_STATUS_CURRENT_MISSING_LOWEST",
		14: "ACTIVATION_STATUS_CURRENT_MISSING_HIGHEST",
		15: "ACTIVATION_STATUS_CURRENT_NOT_FOUND_EXISTS",
		16: "ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT_INSTEAD_OF_LOWEST",
		17: "ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT_INSTEAD_OF_HIGHEST",
		18: "ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT_INSTEAD_OF_LOWEST",
		19: "ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT_INSTEAD_OF_HIGHEST",
	}
	FlowContext_ActivationStatus_value = map[string]int32{
		"ACTIVATION_STATUS_UNSPECIFIED":                                 0,
		"ACTIVATION_STATUS_NOT_USED_BASELINE":                           1,
		"ACTIVATION_STATUS_BASELINE_MISSING_SKIP":                       2,
		"ACTIVATION_STATUS_BASELINE_MISSING_TRIGGER":                    3,
		"ACTIVATION_STATUS_BASELINE_USED_FOUND":                         4,
		"ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT":                    5,
		"ACTIVATION_STATUS_BASELINE_MISSING_LOWEST":                     6,
		"ACTIVATION_STATUS_BASELINE_MISSING_HIGHEST":                    7,
		"ACTIVATION_STATUS_BASELINE_NOT_FOUND_EXISTS":                   8,
		"ACTIVATION_STATUS_CURRENT_MISSING_SKIP":                        9,
		"ACTIVATION_STATUS_CURRENT_MISSING_TRIGGER":                     10,
		"ACTIVATION_STATUS_CURRENT_USED_FOUND":                          11,
		"ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT":                     12,
		"ACTIVATION_STATUS_CURRENT_MISSING_LOWEST":                      13,
		"ACTIVATION_STATUS_CURRENT_MISSING_HIGHEST":                     14,
		"ACTIVATION_STATUS_CURRENT_NOT_FOUND_EXISTS":                    15,
		"ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT_INSTEAD_OF_LOWEST":  16,
		"ACTIVATION_STATUS_BASELINE_MISSING_DEFAULT_INSTEAD_OF_HIGHEST": 17,
		"ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT_INSTEAD_OF_LOWEST":   18,
		"ACTIVATION_STATUS_CURRENT_MISSING_DEFAULT_INSTEAD_OF_HIGHEST":  19,
	}
)

func (x FlowContext_ActivationStatus) Enum() *FlowContext_ActivationStatus {
	p := new(FlowContext_ActivationStatus)
	*p = x
	return p
}

func (x FlowContext_ActivationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowContext_ActivationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_alert_proto_enumTypes[2].Descriptor()
}

func (FlowContext_ActivationStatus) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_alert_proto_enumTypes[2]
}

func (x FlowContext_ActivationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowContext_ActivationStatus.Descriptor instead.
func (FlowContext_ActivationStatus) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{13, 0}
}

type AlertServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AlertServiceGetRequest) Reset() {
	*x = AlertServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceGetRequest) ProtoMessage() {}

func (x *AlertServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceGetRequest.ProtoReflect.Descriptor instead.
func (*AlertServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{0}
}

func (x *AlertServiceGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AlertServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert   *Alert        `protobuf:"bytes,1,opt,name=alert,proto3" json:"alert,omitempty"`
	History []*AlertPhase `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *AlertServiceGetResponse) Reset() {
	*x = AlertServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceGetResponse) ProtoMessage() {}

func (x *AlertServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceGetResponse.ProtoReflect.Descriptor instead.
func (*AlertServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{1}
}

func (x *AlertServiceGetResponse) GetAlert() *Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

func (x *AlertServiceGetResponse) GetHistory() []*AlertPhase {
	if x != nil {
		return x.History
	}
	return nil
}

type AlertPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity    v202303.Severity       `protobuf:"varint,1,opt,name=severity,proto3,enum=kentik.alerting.types.v202303.Severity" json:"severity,omitempty"`
	StartTimeAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time_at,json=startTimeAt,proto3" json:"start_time_at,omitempty"`
	EndTimeAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time_at,json=endTimeAt,proto3" json:"end_time_at,omitempty"`
	// Types that are assignable to Context:
	//
	//	*AlertPhase_Flow
	//	*AlertPhase_Nms
	Context isAlertPhase_Context `protobuf_oneof:"context"`
}

func (x *AlertPhase) Reset() {
	*x = AlertPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertPhase) ProtoMessage() {}

func (x *AlertPhase) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertPhase.ProtoReflect.Descriptor instead.
func (*AlertPhase) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{2}
}

func (x *AlertPhase) GetSeverity() v202303.Severity {
	if x != nil {
		return x.Severity
	}
	return v202303.Severity_SEVERITY_UNSPECIFIED
}

func (x *AlertPhase) GetStartTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeAt
	}
	return nil
}

func (x *AlertPhase) GetEndTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeAt
	}
	return nil
}

func (m *AlertPhase) GetContext() isAlertPhase_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *AlertPhase) GetFlow() *FlowContext {
	if x, ok := x.GetContext().(*AlertPhase_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *AlertPhase) GetNms() *NmsContext {
	if x, ok := x.GetContext().(*AlertPhase_Nms); ok {
		return x.Nms
	}
	return nil
}

type isAlertPhase_Context interface {
	isAlertPhase_Context()
}

type AlertPhase_Flow struct {
	Flow *FlowContext `protobuf:"bytes,4,opt,name=flow,proto3,oneof"`
}

type AlertPhase_Nms struct {
	Nms *NmsContext `protobuf:"bytes,5,opt,name=nms,proto3,oneof"`
}

func (*AlertPhase_Flow) isAlertPhase_Context() {}

func (*AlertPhase_Nms) isAlertPhase_Context() {}

type AlertServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v202506.PaginationConfig `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sorting    *v202506.SortingConfig    `protobuf:"bytes,2,opt,name=sorting,proto3" json:"sorting,omitempty"`
	Filters    *AlertFilters             `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *AlertServiceListRequest) Reset() {
	*x = AlertServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceListRequest) ProtoMessage() {}

func (x *AlertServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceListRequest.ProtoReflect.Descriptor instead.
func (*AlertServiceListRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{3}
}

func (x *AlertServiceListRequest) GetPagination() *v202506.PaginationConfig {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AlertServiceListRequest) GetSorting() *v202506.SortingConfig {
	if x != nil {
		return x.Sorting
	}
	return nil
}

func (x *AlertServiceListRequest) GetFilters() *AlertFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type AlertFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severities             []v202303.Severity            `protobuf:"varint,1,rep,packed,name=severities,proto3,enum=kentik.alerting.types.v202303.Severity" json:"severities,omitempty"`
	AlertIds               []string                      `protobuf:"bytes,2,rep,name=alert_ids,json=alertIds,proto3" json:"alert_ids,omitempty"`
	Sources                []*Source                     `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`
	Keys                   *v202303.MultiAttributeFilter `protobuf:"bytes,5,opt,name=keys,proto3" json:"keys,omitempty"`
	States                 []AlertState                  `protobuf:"varint,6,rep,packed,name=states,proto3,enum=kentik.alerting.public.v202505.AlertState" json:"states,omitempty"`
	StartedAt              *v202303.TimeRange            `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt                *v202303.TimeRange            `protobuf:"bytes,8,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	HighestSeverities      []v202303.Severity            `protobuf:"varint,9,rep,packed,name=highest_severities,json=highestSeverities,proto3,enum=kentik.alerting.types.v202303.Severity" json:"highest_severities,omitempty"`
	RecentSeverities       []v202303.Severity            `protobuf:"varint,10,rep,packed,name=recent_severities,json=recentSeverities,proto3,enum=kentik.alerting.types.v202303.Severity" json:"recent_severities,omitempty"`
	AckStates              []AlertAcknowledgement        `protobuf:"varint,11,rep,packed,name=ack_states,json=ackStates,proto3,enum=kentik.alerting.public.v202505.AlertAcknowledgement" json:"ack_states,omitempty"`
	ActiveAt               *v202303.TimeRange            `protobuf:"bytes,12,opt,name=active_at,json=activeAt,proto3" json:"active_at,omitempty"`
	AckedByUserIds         []string                      `protobuf:"bytes,13,rep,name=acked_by_user_ids,json=ackedByUserIds,proto3" json:"acked_by_user_ids,omitempty"`
	IncludeRemovedPolicies bool                          `protobuf:"varint,14,opt,name=include_removed_policies,json=includeRemovedPolicies,proto3" json:"include_removed_policies,omitempty"`
	ContextSearch          []string                      `protobuf:"bytes,15,rep,name=context_search,json=contextSearch,proto3" json:"context_search,omitempty"`
}

func (x *AlertFilters) Reset() {
	*x = AlertFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertFilters) ProtoMessage() {}

func (x *AlertFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertFilters.ProtoReflect.Descriptor instead.
func (*AlertFilters) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{4}
}

func (x *AlertFilters) GetSeverities() []v202303.Severity {
	if x != nil {
		return x.Severities
	}
	return nil
}

func (x *AlertFilters) GetAlertIds() []string {
	if x != nil {
		return x.AlertIds
	}
	return nil
}

func (x *AlertFilters) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *AlertFilters) GetKeys() *v202303.MultiAttributeFilter {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AlertFilters) GetStates() []AlertState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *AlertFilters) GetStartedAt() *v202303.TimeRange {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *AlertFilters) GetEndedAt() *v202303.TimeRange {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *AlertFilters) GetHighestSeverities() []v202303.Severity {
	if x != nil {
		return x.HighestSeverities
	}
	return nil
}

func (x *AlertFilters) GetRecentSeverities() []v202303.Severity {
	if x != nil {
		return x.RecentSeverities
	}
	return nil
}

func (x *AlertFilters) GetAckStates() []AlertAcknowledgement {
	if x != nil {
		return x.AckStates
	}
	return nil
}

func (x *AlertFilters) GetActiveAt() *v202303.TimeRange {
	if x != nil {
		return x.ActiveAt
	}
	return nil
}

func (x *AlertFilters) GetAckedByUserIds() []string {
	if x != nil {
		return x.AckedByUserIds
	}
	return nil
}

func (x *AlertFilters) GetIncludeRemovedPolicies() bool {
	if x != nil {
		return x.IncludeRemovedPolicies
	}
	return false
}

func (x *AlertFilters) GetContextSearch() []string {
	if x != nil {
		return x.ContextSearch
	}
	return nil
}

type AlertServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v202506.PaginationInfo `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Alerts     []*Alert                `protobuf:"bytes,2,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *AlertServiceListResponse) Reset() {
	*x = AlertServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceListResponse) ProtoMessage() {}

func (x *AlertServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceListResponse.ProtoReflect.Descriptor instead.
func (*AlertServiceListResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{5}
}

func (x *AlertServiceListResponse) GetPagination() *v202506.PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AlertServiceListResponse) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

type AlertServiceAckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *AlertServiceAckRequest) Reset() {
	*x = AlertServiceAckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceAckRequest) ProtoMessage() {}

func (x *AlertServiceAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceAckRequest.ProtoReflect.Descriptor instead.
func (*AlertServiceAckRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{6}
}

func (x *AlertServiceAckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlertServiceAckRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type AlertServiceAckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert *Alert `protobuf:"bytes,1,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *AlertServiceAckResponse) Reset() {
	*x = AlertServiceAckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceAckResponse) ProtoMessage() {}

func (x *AlertServiceAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceAckResponse.ProtoReflect.Descriptor instead.
func (*AlertServiceAckResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{7}
}

func (x *AlertServiceAckResponse) GetAlert() *Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type AlertServiceUnAckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AlertServiceUnAckRequest) Reset() {
	*x = AlertServiceUnAckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceUnAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceUnAckRequest) ProtoMessage() {}

func (x *AlertServiceUnAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceUnAckRequest.ProtoReflect.Descriptor instead.
func (*AlertServiceUnAckRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{8}
}

func (x *AlertServiceUnAckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AlertServiceUnAckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alert *Alert `protobuf:"bytes,1,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *AlertServiceUnAckResponse) Reset() {
	*x = AlertServiceUnAckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceUnAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceUnAckResponse) ProtoMessage() {}

func (x *AlertServiceUnAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceUnAckResponse.ProtoReflect.Descriptor instead.
func (*AlertServiceUnAckResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{9}
}

func (x *AlertServiceUnAckResponse) GetAlert() *Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type AlertServiceClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertIds []string `protobuf:"bytes,1,rep,name=alert_ids,json=alertIds,proto3" json:"alert_ids,omitempty"`
}

func (x *AlertServiceClearRequest) Reset() {
	*x = AlertServiceClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceClearRequest) ProtoMessage() {}

func (x *AlertServiceClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceClearRequest.ProtoReflect.Descriptor instead.
func (*AlertServiceClearRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{10}
}

func (x *AlertServiceClearRequest) GetAlertIds() []string {
	if x != nil {
		return x.AlertIds
	}
	return nil
}

type AlertServiceClearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClearedAlertIds []string `protobuf:"bytes,1,rep,name=cleared_alert_ids,json=clearedAlertIds,proto3" json:"cleared_alert_ids,omitempty"`
}

func (x *AlertServiceClearResponse) Reset() {
	*x = AlertServiceClearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertServiceClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertServiceClearResponse) ProtoMessage() {}

func (x *AlertServiceClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertServiceClearResponse.ProtoReflect.Descriptor instead.
func (*AlertServiceClearResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{11}
}

func (x *AlertServiceClearResponse) GetClearedAlertIds() []string {
	if x != nil {
		return x.ClearedAlertIds
	}
	return nil
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source           *Source                `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	StartTimeAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time_at,json=startTimeAt,proto3" json:"start_time_at,omitempty"`
	EndTimeAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time_at,json=endTimeAt,proto3" json:"end_time_at,omitempty"`
	State            AlertState             `protobuf:"varint,6,opt,name=state,proto3,enum=kentik.alerting.public.v202505.AlertState" json:"state,omitempty"`
	Severity         v202303.Severity       `protobuf:"varint,7,opt,name=severity,proto3,enum=kentik.alerting.types.v202303.Severity" json:"severity,omitempty"`
	HighestSeverity  v202303.Severity       `protobuf:"varint,8,opt,name=highest_severity,json=highestSeverity,proto3,enum=kentik.alerting.types.v202303.Severity" json:"highest_severity,omitempty"`
	Acknowledgement  *Alert_Acknowledgement `protobuf:"bytes,9,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
	EventStartTimeAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=event_start_time_at,json=eventStartTimeAt,proto3" json:"event_start_time_at,omitempty"`
	// Types that are assignable to Context:
	//
	//	*Alert_Flow
	//	*Alert_Nms
	Context isAlert_Context `protobuf_oneof:"context"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{12}
}

func (x *Alert) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Alert) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Alert) GetStartTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeAt
	}
	return nil
}

func (x *Alert) GetEndTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeAt
	}
	return nil
}

func (x *Alert) GetState() AlertState {
	if x != nil {
		return x.State
	}
	return AlertState_ALERT_STATE_UNSPECIFIED
}

func (x *Alert) GetSeverity() v202303.Severity {
	if x != nil {
		return x.Severity
	}
	return v202303.Severity_SEVERITY_UNSPECIFIED
}

func (x *Alert) GetHighestSeverity() v202303.Severity {
	if x != nil {
		return x.HighestSeverity
	}
	return v202303.Severity_SEVERITY_UNSPECIFIED
}

func (x *Alert) GetAcknowledgement() *Alert_Acknowledgement {
	if x != nil {
		return x.Acknowledgement
	}
	return nil
}

func (x *Alert) GetEventStartTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EventStartTimeAt
	}
	return nil
}

func (m *Alert) GetContext() isAlert_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *Alert) GetFlow() *FlowContext {
	if x, ok := x.GetContext().(*Alert_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *Alert) GetNms() *NmsContext {
	if x, ok := x.GetContext().(*Alert_Nms); ok {
		return x.Nms
	}
	return nil
}

type isAlert_Context interface {
	isAlert_Context()
}

type Alert_Flow struct {
	Flow *FlowContext `protobuf:"bytes,11,opt,name=flow,proto3,oneof"`
}

type Alert_Nms struct {
	Nms *NmsContext `protobuf:"bytes,12,opt,name=nms,proto3,oneof"`
}

func (*Alert_Flow) isAlert_Context() {}

func (*Alert_Nms) isAlert_Context() {}

type FlowContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricValues     []*FlowContext_MetricValue              `protobuf:"bytes,1,rep,name=metric_values,json=metricValues,proto3" json:"metric_values,omitempty"`
	ActivationStatus FlowContext_ActivationStatus            `protobuf:"varint,2,opt,name=activation_status,json=activationStatus,proto3,enum=kentik.alerting.public.v202505.FlowContext_ActivationStatus" json:"activation_status,omitempty"`
	BaselineValue    float64                                 `protobuf:"fixed64,3,opt,name=baseline_value,json=baselineValue,proto3" json:"baseline_value,omitempty"`
	AlertKeyDetails  map[string]*FlowContext_AlertKeyDetails `protobuf:"bytes,4,rep,name=alert_key_details,json=alertKeyDetails,proto3" json:"alert_key_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FlowContext) Reset() {
	*x = FlowContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContext) ProtoMessage() {}

func (x *FlowContext) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContext.ProtoReflect.Descriptor instead.
func (*FlowContext) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{13}
}

func (x *FlowContext) GetMetricValues() []*FlowContext_MetricValue {
	if x != nil {
		return x.MetricValues
	}
	return nil
}

func (x *FlowContext) GetActivationStatus() FlowContext_ActivationStatus {
	if x != nil {
		return x.ActivationStatus
	}
	return FlowContext_ACTIVATION_STATUS_UNSPECIFIED
}

func (x *FlowContext) GetBaselineValue() float64 {
	if x != nil {
		return x.BaselineValue
	}
	return 0
}

func (x *FlowContext) GetAlertKeyDetails() map[string]*FlowContext_AlertKeyDetails {
	if x != nil {
		return x.AlertKeyDetails
	}
	return nil
}

// in the comments are evm equivalents
type NmsContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivationInfo       *NmsContext_ActivationInfo            `protobuf:"bytes,1,opt,name=activation_info,json=activationInfo,proto3" json:"activation_info,omitempty"`                                                                                                             // AlarmPolicyThreshold
	DatasetInfo          *NmsContext_DatasetInfo               `protobuf:"bytes,2,opt,name=dataset_info,json=datasetInfo,proto3" json:"dataset_info,omitempty"`                                                                                                                      // AlarmPolicyTarget
	Targets              map[string]*NmsContext_AlarmTarget    `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                                         // AlarmTargets
	MetricValues         map[string]*NmsContext_AlarmMetricMap `protobuf:"bytes,4,rep,name=metric_values,json=metricValues,proto3" json:"metric_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                           // AlarmMetrics
	PreviousMetricValues map[string]*NmsContext_AlarmMetricMap `protobuf:"bytes,5,rep,name=previous_metric_values,json=previousMetricValues,proto3" json:"previous_metric_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // AlarmPreviousStatus
	Device               map[string]string                     `protobuf:"bytes,6,rep,name=device,proto3" json:"device,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                                           // AlarmDevice
	// AlarmGroupKey - for example: {device_id: 123, ifindex: 42} for an interface alarm OR {agent_id: 12} for an agent alarm
	// sub-set of dimensions which all matches should include
	GroupKey map[string]string `protobuf:"bytes,7,rep,name=group_key,json=groupKey,proto3" json:"group_key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NmsContext) Reset() {
	*x = NmsContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmsContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmsContext) ProtoMessage() {}

func (x *NmsContext) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmsContext.ProtoReflect.Descriptor instead.
func (*NmsContext) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{14}
}

func (x *NmsContext) GetActivationInfo() *NmsContext_ActivationInfo {
	if x != nil {
		return x.ActivationInfo
	}
	return nil
}

func (x *NmsContext) GetDatasetInfo() *NmsContext_DatasetInfo {
	if x != nil {
		return x.DatasetInfo
	}
	return nil
}

func (x *NmsContext) GetTargets() map[string]*NmsContext_AlarmTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *NmsContext) GetMetricValues() map[string]*NmsContext_AlarmMetricMap {
	if x != nil {
		return x.MetricValues
	}
	return nil
}

func (x *NmsContext) GetPreviousMetricValues() map[string]*NmsContext_AlarmMetricMap {
	if x != nil {
		return x.PreviousMetricValues
	}
	return nil
}

func (x *NmsContext) GetDevice() map[string]string {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *NmsContext) GetGroupKey() map[string]string {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

type Alert_Acknowledgement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State       AlertAcknowledgement   `protobuf:"varint,1,opt,name=state,proto3,enum=kentik.alerting.public.v202505.AlertAcknowledgement" json:"state,omitempty"`
	AckedByUser string                 `protobuf:"bytes,2,opt,name=acked_by_user,json=ackedByUser,proto3" json:"acked_by_user,omitempty"`
	AutoAckId   string                 `protobuf:"bytes,3,opt,name=auto_ack_id,json=autoAckId,proto3" json:"auto_ack_id,omitempty"`
	AckedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=acked_at,json=ackedAt,proto3" json:"acked_at,omitempty"`
}

func (x *Alert_Acknowledgement) Reset() {
	*x = Alert_Acknowledgement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert_Acknowledgement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert_Acknowledgement) ProtoMessage() {}

func (x *Alert_Acknowledgement) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert_Acknowledgement.ProtoReflect.Descriptor instead.
func (*Alert_Acknowledgement) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Alert_Acknowledgement) GetState() AlertAcknowledgement {
	if x != nil {
		return x.State
	}
	return AlertAcknowledgement_ALERT_ACKNOWLEDGEMENT_UNSPECIFIED
}

func (x *Alert_Acknowledgement) GetAckedByUser() string {
	if x != nil {
		return x.AckedByUser
	}
	return ""
}

func (x *Alert_Acknowledgement) GetAutoAckId() string {
	if x != nil {
		return x.AutoAckId
	}
	return ""
}

func (x *Alert_Acknowledgement) GetAckedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AckedAt
	}
	return nil
}

type FlowContext_MetricValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FlowContext_MetricValue) Reset() {
	*x = FlowContext_MetricValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContext_MetricValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContext_MetricValue) ProtoMessage() {}

func (x *FlowContext_MetricValue) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContext_MetricValue.ProtoReflect.Descriptor instead.
func (*FlowContext_MetricValue) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{13, 1}
}

func (x *FlowContext_MetricValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowContext_MetricValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FlowContext_AlertKeyDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device        *FlowContext_DeviceDetails    `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Interface     *FlowContext_InterfaceDetails `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	Site          *FlowContext_SiteDetails      `protobuf:"bytes,3,opt,name=site,proto3" json:"site,omitempty"`
	ExtendedValue string                        `protobuf:"bytes,4,opt,name=extended_value,json=extendedValue,proto3" json:"extended_value,omitempty"`
}

func (x *FlowContext_AlertKeyDetails) Reset() {
	*x = FlowContext_AlertKeyDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContext_AlertKeyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContext_AlertKeyDetails) ProtoMessage() {}

func (x *FlowContext_AlertKeyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContext_AlertKeyDetails.ProtoReflect.Descriptor instead.
func (*FlowContext_AlertKeyDetails) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{13, 2}
}

func (x *FlowContext_AlertKeyDetails) GetDevice() *FlowContext_DeviceDetails {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *FlowContext_AlertKeyDetails) GetInterface() *FlowContext_InterfaceDetails {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *FlowContext_AlertKeyDetails) GetSite() *FlowContext_SiteDetails {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *FlowContext_AlertKeyDetails) GetExtendedValue() string {
	if x != nil {
		return x.ExtendedValue
	}
	return ""
}

type FlowContext_DeviceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type   string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Labels []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *FlowContext_DeviceDetails) Reset() {
	*x = FlowContext_DeviceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContext_DeviceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContext_DeviceDetails) ProtoMessage() {}

func (x *FlowContext_DeviceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContext_DeviceDetails.ProtoReflect.Descriptor instead.
func (*FlowContext_DeviceDetails) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{13, 3}
}

func (x *FlowContext_DeviceDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowContext_DeviceDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowContext_DeviceDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FlowContext_DeviceDetails) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type FlowContext_InterfaceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnmpId        string `protobuf:"bytes,1,opt,name=snmp_id,json=snmpId,proto3" json:"snmp_id,omitempty"`
	SnmpAlias     string `protobuf:"bytes,2,opt,name=snmp_alias,json=snmpAlias,proto3" json:"snmp_alias,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SnmpSpeedMbps int64  `protobuf:"varint,4,opt,name=snmp_speed_mbps,json=snmpSpeedMbps,proto3" json:"snmp_speed_mbps,omitempty"`
}

func (x *FlowContext_InterfaceDetails) Reset() {
	*x = FlowContext_InterfaceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContext_InterfaceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContext_InterfaceDetails) ProtoMessage() {}

func (x *FlowContext_InterfaceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContext_InterfaceDetails.ProtoReflect.Descriptor instead.
func (*FlowContext_InterfaceDetails) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{13, 4}
}

func (x *FlowContext_InterfaceDetails) GetSnmpId() string {
	if x != nil {
		return x.SnmpId
	}
	return ""
}

func (x *FlowContext_InterfaceDetails) GetSnmpAlias() string {
	if x != nil {
		return x.SnmpAlias
	}
	return ""
}

func (x *FlowContext_InterfaceDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FlowContext_InterfaceDetails) GetSnmpSpeedMbps() int64 {
	if x != nil {
		return x.SnmpSpeedMbps
	}
	return 0
}

type FlowContext_SiteDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Latitude  string `protobuf:"bytes,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude string `protobuf:"bytes,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Location  string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Country   string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *FlowContext_SiteDetails) Reset() {
	*x = FlowContext_SiteDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContext_SiteDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContext_SiteDetails) ProtoMessage() {}

func (x *FlowContext_SiteDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContext_SiteDetails.ProtoReflect.Descriptor instead.
func (*FlowContext_SiteDetails) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{13, 5}
}

func (x *FlowContext_SiteDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowContext_SiteDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowContext_SiteDetails) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *FlowContext_SiteDetails) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *FlowContext_SiteDetails) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *FlowContext_SiteDetails) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type NmsContext_ActivationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activate *NmsActivateOrClearConditions `protobuf:"bytes,1,opt,name=activate,proto3" json:"activate,omitempty"`
	Severity string                        `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	// Types that are assignable to ClearType:
	//
	//	*NmsContext_ActivationInfo_ClearManual
	//	*NmsContext_ActivationInfo_ClearUnlessActivated
	ClearType isNmsContext_ActivationInfo_ClearType `protobuf_oneof:"clear_type"`
}

func (x *NmsContext_ActivationInfo) Reset() {
	*x = NmsContext_ActivationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmsContext_ActivationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmsContext_ActivationInfo) ProtoMessage() {}

func (x *NmsContext_ActivationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmsContext_ActivationInfo.ProtoReflect.Descriptor instead.
func (*NmsContext_ActivationInfo) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{14, 5}
}

func (x *NmsContext_ActivationInfo) GetActivate() *NmsActivateOrClearConditions {
	if x != nil {
		return x.Activate
	}
	return nil
}

func (x *NmsContext_ActivationInfo) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (m *NmsContext_ActivationInfo) GetClearType() isNmsContext_ActivationInfo_ClearType {
	if m != nil {
		return m.ClearType
	}
	return nil
}

func (x *NmsContext_ActivationInfo) GetClearManual() bool {
	if x, ok := x.GetClearType().(*NmsContext_ActivationInfo_ClearManual); ok {
		return x.ClearManual
	}
	return false
}

func (x *NmsContext_ActivationInfo) GetClearUnlessActivated() bool {
	if x, ok := x.GetClearType().(*NmsContext_ActivationInfo_ClearUnlessActivated); ok {
		return x.ClearUnlessActivated
	}
	return false
}

type isNmsContext_ActivationInfo_ClearType interface {
	isNmsContext_ActivationInfo_ClearType()
}

type NmsContext_ActivationInfo_ClearManual struct {
	ClearManual bool `protobuf:"varint,3,opt,name=clear_manual,json=clearManual,proto3,oneof"`
}

type NmsContext_ActivationInfo_ClearUnlessActivated struct {
	ClearUnlessActivated bool `protobuf:"varint,4,opt,name=clear_unless_activated,json=clearUnlessActivated,proto3,oneof"`
}

func (*NmsContext_ActivationInfo_ClearManual) isNmsContext_ActivationInfo_ClearType() {}

func (*NmsContext_ActivationInfo_ClearUnlessActivated) isNmsContext_ActivationInfo_ClearType() {}

type NmsContext_DatasetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomType   bool     `protobuf:"varint,1,opt,name=custom_type,json=customType,proto3" json:"custom_type,omitempty"`
	Dimensions   []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	EntityType   string   `protobuf:"bytes,3,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	Measurements []string `protobuf:"bytes,4,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *NmsContext_DatasetInfo) Reset() {
	*x = NmsContext_DatasetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmsContext_DatasetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmsContext_DatasetInfo) ProtoMessage() {}

func (x *NmsContext_DatasetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmsContext_DatasetInfo.ProtoReflect.Descriptor instead.
func (*NmsContext_DatasetInfo) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{14, 6}
}

func (x *NmsContext_DatasetInfo) GetCustomType() bool {
	if x != nil {
		return x.CustomType
	}
	return false
}

func (x *NmsContext_DatasetInfo) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *NmsContext_DatasetInfo) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *NmsContext_DatasetInfo) GetMeasurements() []string {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type NmsContext_AlarmTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]float64 `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Tags   map[string]string  `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NmsContext_AlarmTarget) Reset() {
	*x = NmsContext_AlarmTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmsContext_AlarmTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmsContext_AlarmTarget) ProtoMessage() {}

func (x *NmsContext_AlarmTarget) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmsContext_AlarmTarget.ProtoReflect.Descriptor instead.
func (*NmsContext_AlarmTarget) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{14, 7}
}

func (x *NmsContext_AlarmTarget) GetFields() map[string]float64 {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *NmsContext_AlarmTarget) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type NmsContext_AlarmMetricMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics map[string]float64 `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *NmsContext_AlarmMetricMap) Reset() {
	*x = NmsContext_AlarmMetricMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmsContext_AlarmMetricMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmsContext_AlarmMetricMap) ProtoMessage() {}

func (x *NmsContext_AlarmMetricMap) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_alert_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmsContext_AlarmMetricMap.ProtoReflect.Descriptor instead.
func (*NmsContext_AlarmMetricMap) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP(), []int{14, 8}
}

func (x *NmsContext_AlarmMetricMap) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_kentik_alerting_public_v202505_alert_proto protoreflect.FileDescriptor

var file_kentik_alerting_public_v202505_alert_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x36, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x36, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f,
	0x6e, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x4d, 0x0a, 0x16, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x54, 0x68, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x8f, 0x02, 0x0a, 0x17, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x42, 0x4d, 0x92, 0x41, 0x47, 0x32, 0x45, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41,
	0x03, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x67, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x54, 0x68, 0x65, 0x20,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0xcc, 0x04, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x6d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x30, 0x33, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x28, 0x92, 0x41, 0x22,
	0x32, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x6a, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x70, 0x68, 0x61, 0x73, 0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x64, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x28, 0x92, 0x41,
	0x22, 0x32, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x74, 0x12, 0x7a, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x37, 0x92, 0x41,
	0x31, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2e, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x76, 0x0a,
	0x03, 0x6e, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x70, 0x68, 0x61, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x4e, 0x4d, 0x53, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0xe0, 0x41, 0x03, 0x48, 0x00,
	0x52, 0x03, 0x6e, 0x6d, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xe9, 0x04, 0x0a, 0x17, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xc4, 0x01, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x36, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x73, 0x92, 0x41, 0x6d, 0x32, 0x30, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x39, 0x7b, 0x22, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x22, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x7d, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xc1, 0x01, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x36, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x79, 0x92, 0x41, 0x73, 0x32, 0x2d, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x42, 0x7b, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x62, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x22, 0x2c, 0x20, 0x22, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x22, 0x7d, 0x5d, 0x7d, 0xe0, 0x41, 0x01, 0x52, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0xc2, 0x01, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x7a, 0x92, 0x41, 0x74, 0x32, 0x6e, 0x54, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x41,
	0x4e, 0x44, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x3a, 0x02, 0x7b, 0x7d,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb9, 0x0f, 0x0a,
	0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7a, 0x0a,
	0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x33, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32,
	0x25, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02, 0x5b, 0x5d, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x24, 0x32, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x3a, 0x02, 0x5b, 0x5d, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x78, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x36, 0x92, 0x41, 0x30,
	0x32, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02, 0x5b, 0x5d,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x33, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02, 0x7b,
	0x7d, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x71, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x32, 0x21, 0x54, 0x68, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02,
	0x5b, 0x5d, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x30, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x45, 0x92, 0x41,
	0x3f, 0x32, 0x39, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02, 0x7b, 0x7d,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x88,
	0x01, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x43, 0x92, 0x41, 0x3d,
	0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02, 0x7b, 0x7d, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42,
	0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x3a, 0x02, 0x5b, 0x5d, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0xba,
	0x01, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x64, 0x92, 0x41, 0x5e, 0x32, 0x58, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x6f, 0x73, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x73, 0x29, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x20, 0x6f, 0x6e, 0x65, 0x73, 0x29, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x3a, 0x02, 0x5b, 0x5d, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x0a,
	0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x3d, 0x92, 0x41, 0x37, 0x32, 0x31, 0x54, 0x68, 0x65,
	0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02,
	0x5b, 0x5d, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x8d, 0x01, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x30, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x46,
	0x92, 0x41, 0x40, 0x32, 0x3a, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a,
	0x02, 0x7b, 0x7d, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74,
	0x12, 0x70, 0x0a, 0x11, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x3f,
	0x32, 0x39, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02, 0x5b, 0x5d, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x92, 0x01, 0x92, 0x41, 0x8b, 0x01, 0x32, 0x81, 0x01, 0x57,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68,
	0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x2e,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x76, 0x92, 0x41, 0x70,
	0x32, 0x6a, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x73, 0x69,
	0x74, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20,
	0x65, 0x74, 0x63, 0x2e, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x3a, 0x02, 0x5b, 0x5d,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e,
	0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a,
	0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x32, 0x16, 0x54, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x73, 0x65, 0x74,
	0x2e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0xa3, 0x01, 0x0a,
	0x16, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x25, 0x32, 0x23, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x54, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x17, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6,
	0x01, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x69, 0x92, 0x41, 0x63, 0x32, 0x61, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x20,
	0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x18, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3f, 0x92, 0x41, 0x39, 0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x2e, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x6b, 0x92, 0x41, 0x65, 0x32, 0x63,
	0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62,
	0x65, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x60, 0x0a,
	0x18, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41,
	0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x7e, 0x0a, 0x19, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x11,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x54, 0x68,
	0x65, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65,
	0x65, 0x6e, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22,
	0xaf, 0x0e, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20,
	0x49, 0x44, 0x20, 0x28, 0x55, 0x55, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x27, 0x92,
	0x41, 0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x64,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x54, 0x68, 0x65, 0x20,
	0x65, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x41, 0x74, 0x12, 0x69, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x27, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x6f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30,
	0x33, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32,
	0x22, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x86, 0x01, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x42, 0x32, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x32,
	0x27, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xa8, 0x01, 0x0a,
	0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x5d, 0x92, 0x41, 0x57, 0x32, 0x55, 0x54, 0x68, 0x65,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x74, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2e, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x70, 0x0a,
	0x03, 0x6e, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x30, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x54, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e, 0x4d, 0x53, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2e, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6d, 0x73, 0x1a,
	0xa4, 0x04, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x32, 0x27, 0x54,
	0x68, 0x65, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x99, 0x01, 0x0a, 0x0d, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x75, 0x92, 0x41, 0x6f, 0x32, 0x6d, 0x54,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x68, 0x61, 0x73,
	0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2e, 0xe0, 0x41, 0x03, 0x52,
	0x0b, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x71, 0x92, 0x41, 0x6b, 0x32, 0x69, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x61, 0x63, 0x6b, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x20, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	0x61, 0x75, 0x74, 0x6f, 0x2d, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x64, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2d,
	0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xe5, 0x1b, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x4e, 0x92, 0x41, 0x48, 0x32, 0x46, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0,
	0x41, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0xc4, 0x01, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x59, 0x92, 0x41, 0x53, 0x32,
	0x51, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x3a, 0x92, 0x41, 0x34, 0x32, 0x32, 0x54, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x11, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x5d, 0x92, 0x41, 0x57, 0x32, 0x55, 0x54,
	0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x3a, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6d, 0x69, 0x67, 0x68,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x74, 0x6f, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x7f, 0x0a, 0x14, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc8, 0x01, 0x0a, 0x0b, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x7b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x61, 0x32, 0x5f, 0x54, 0x68,
	0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e,
	0x20, 0x27, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x27, 0x2c, 0x20, 0x27, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x27, 0x2c, 0x20, 0x27, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x27, 0x2c, 0x20, 0x27, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x27, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x54, 0x68, 0x65, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xee, 0x03, 0x0a, 0x0f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x7f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x2c, 0x92, 0x41, 0x26, 0x32, 0x24, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0xe0, 0x41,
	0x03, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x2f, 0x92, 0x41, 0x29,
	0x32, 0x27, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x2a,
	0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x53, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x26, 0x32, 0x24, 0x54,
	0x68, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6b,
	0x65, 0x79, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x80, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0xe0,
	0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x19, 0x32, 0x17, 0x54, 0x68, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x29, 0x32, 0x27,
	0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x27, 0x29, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x2e, 0x92, 0x41, 0x28, 0x32, 0x26, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xd0, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a,
	0x07, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x6e, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x0a, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x68, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50,
	0x20, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x65,
	0x74, 0x68, 0x30, 0x27, 0x29, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73, 0x6e, 0x6d, 0x70, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x23, 0x32, 0x21,
	0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x6d, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x30, 0x92, 0x41, 0x2a, 0x32,
	0x28, 0x54, 0x68, 0x65, 0x20, 0x53, 0x4e, 0x4d, 0x50, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x20, 0x69, 0x6e, 0x20, 0x4d, 0x62, 0x70, 0x73, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x73, 0x6e,
	0x6d, 0x70, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x1a, 0xa9, 0x03, 0x0a, 0x0b,
	0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x15, 0x32, 0x13, 0x54, 0x68,
	0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x54, 0x68, 0x65,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74,
	0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92,
	0x41, 0x26, 0x32, 0x24, 0x54, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x20, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20,
	0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x53, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x37, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65,
	0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b,
	0x2c, 0x20, 0x4e, 0x59, 0x27, 0x29, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x69, 0x74, 0x65, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x55, 0x6e, 0x69, 0x74, 0x65,
	0x64, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x27, 0x29, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xef, 0x07, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x4b, 0x49, 0x50, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04,
	0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x05,
	0x12, 0x2d, 0x0a, 0x29, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12,
	0x2e, 0x0a, 0x2a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12,
	0x2f, 0x0a, 0x2b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x08,
	0x12, 0x2a, 0x0a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54,
	0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x10,
	0x0e, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x0f, 0x12, 0x40, 0x0a, 0x3c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x53,
	0x54, 0x10, 0x10, 0x12, 0x41, 0x0a, 0x3d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x45, 0x53, 0x54, 0x10, 0x11, 0x12, 0x3f, 0x0a, 0x3b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x4c,
	0x4f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x12, 0x12, 0x40, 0x0a, 0x3c, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x46, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x10, 0x13, 0x22, 0x82, 0x10, 0x0a, 0x0a, 0x4e, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x62, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x7a, 0x0a,
	0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x1a, 0x72, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x82, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xf1, 0x01,
	0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x58, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb3, 0x02, 0x0a, 0x0b, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xae, 0x01,
	0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70,
	0x12, 0x60, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x4e, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x58,
	0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0xa6, 0x01, 0x0a, 0x14, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f,
	0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x03, 0x32, 0xb7, 0x0a, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x8d, 0x02, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x92, 0x41,
	0x5e, 0x12, 0x09, 0x47, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x1a, 0x4c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x2a, 0x03, 0x47, 0x65, 0x74, 0xf2,
	0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x98, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c,
	0x01, 0x92, 0x41, 0x68, 0x12, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x1a, 0x53, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x2a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x13,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0xde, 0x01,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x92, 0x41, 0x28, 0x12, 0x09, 0x41, 0x63, 0x6b,
	0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x1a, 0x16, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x2a, 0x03,
	0x41, 0x63, 0x6b, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x6b, 0x12, 0x8b,
	0x02, 0x0a, 0x05, 0x55, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x6e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01,
	0x92, 0x41, 0x4c, 0x12, 0x0b, 0x55, 0x6e, 0x41, 0x63, 0x6b, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x1a, 0x36, 0x55, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x28, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x29, 0x2e, 0x2a, 0x05, 0x55, 0x6e, 0x41, 0x63, 0x6b, 0xf2,
	0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x22, 0x1a, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x12, 0xde, 0x01, 0x0a,
	0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x92, 0x41, 0x25,
	0x12, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x1a, 0x0e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x2a, 0x05,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x1a, 0x2c, 0xca,
	0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x90, 0xd8, 0x02, 0x03, 0x42, 0x8b, 0x04, 0x5a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x92, 0x41, 0xbc, 0x03, 0x12, 0xf0, 0x01,
	0x0a, 0x12, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x41, 0x50, 0x49, 0x12, 0x89, 0x01, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x27, 0x73, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e,
	0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74,
	0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74,
	0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a,
	0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x42, 0x0a, 0x1b, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kentik_alerting_public_v202505_alert_proto_rawDescOnce sync.Once
	file_kentik_alerting_public_v202505_alert_proto_rawDescData = file_kentik_alerting_public_v202505_alert_proto_rawDesc
)

func file_kentik_alerting_public_v202505_alert_proto_rawDescGZIP() []byte {
	file_kentik_alerting_public_v202505_alert_proto_rawDescOnce.Do(func() {
		file_kentik_alerting_public_v202505_alert_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_alerting_public_v202505_alert_proto_rawDescData)
	})
	return file_kentik_alerting_public_v202505_alert_proto_rawDescData
}

var file_kentik_alerting_public_v202505_alert_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kentik_alerting_public_v202505_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_kentik_alerting_public_v202505_alert_proto_goTypes = []interface{}{
	(AlertState)(0),                      // 0: kentik.alerting.public.v202505.AlertState
	(AlertAcknowledgement)(0),            // 1: kentik.alerting.public.v202505.AlertAcknowledgement
	(FlowContext_ActivationStatus)(0),    // 2: kentik.alerting.public.v202505.FlowContext.ActivationStatus
	(*AlertServiceGetRequest)(nil),       // 3: kentik.alerting.public.v202505.AlertServiceGetRequest
	(*AlertServiceGetResponse)(nil),      // 4: kentik.alerting.public.v202505.AlertServiceGetResponse
	(*AlertPhase)(nil),                   // 5: kentik.alerting.public.v202505.AlertPhase
	(*AlertServiceListRequest)(nil),      // 6: kentik.alerting.public.v202505.AlertServiceListRequest
	(*AlertFilters)(nil),                 // 7: kentik.alerting.public.v202505.AlertFilters
	(*AlertServiceListResponse)(nil),     // 8: kentik.alerting.public.v202505.AlertServiceListResponse
	(*AlertServiceAckRequest)(nil),       // 9: kentik.alerting.public.v202505.AlertServiceAckRequest
	(*AlertServiceAckResponse)(nil),      // 10: kentik.alerting.public.v202505.AlertServiceAckResponse
	(*AlertServiceUnAckRequest)(nil),     // 11: kentik.alerting.public.v202505.AlertServiceUnAckRequest
	(*AlertServiceUnAckResponse)(nil),    // 12: kentik.alerting.public.v202505.AlertServiceUnAckResponse
	(*AlertServiceClearRequest)(nil),     // 13: kentik.alerting.public.v202505.AlertServiceClearRequest
	(*AlertServiceClearResponse)(nil),    // 14: kentik.alerting.public.v202505.AlertServiceClearResponse
	(*Alert)(nil),                        // 15: kentik.alerting.public.v202505.Alert
	(*FlowContext)(nil),                  // 16: kentik.alerting.public.v202505.FlowContext
	(*NmsContext)(nil),                   // 17: kentik.alerting.public.v202505.NmsContext
	(*Alert_Acknowledgement)(nil),        // 18: kentik.alerting.public.v202505.Alert.Acknowledgement
	nil,                                  // 19: kentik.alerting.public.v202505.FlowContext.AlertKeyDetailsEntry
	(*FlowContext_MetricValue)(nil),      // 20: kentik.alerting.public.v202505.FlowContext.MetricValue
	(*FlowContext_AlertKeyDetails)(nil),  // 21: kentik.alerting.public.v202505.FlowContext.AlertKeyDetails
	(*FlowContext_DeviceDetails)(nil),    // 22: kentik.alerting.public.v202505.FlowContext.DeviceDetails
	(*FlowContext_InterfaceDetails)(nil), // 23: kentik.alerting.public.v202505.FlowContext.InterfaceDetails
	(*FlowContext_SiteDetails)(nil),      // 24: kentik.alerting.public.v202505.FlowContext.SiteDetails
	nil,                                  // 25: kentik.alerting.public.v202505.NmsContext.TargetsEntry
	nil,                                  // 26: kentik.alerting.public.v202505.NmsContext.MetricValuesEntry
	nil,                                  // 27: kentik.alerting.public.v202505.NmsContext.PreviousMetricValuesEntry
	nil,                                  // 28: kentik.alerting.public.v202505.NmsContext.DeviceEntry
	nil,                                  // 29: kentik.alerting.public.v202505.NmsContext.GroupKeyEntry
	(*NmsContext_ActivationInfo)(nil),    // 30: kentik.alerting.public.v202505.NmsContext.ActivationInfo
	(*NmsContext_DatasetInfo)(nil),       // 31: kentik.alerting.public.v202505.NmsContext.DatasetInfo
	(*NmsContext_AlarmTarget)(nil),       // 32: kentik.alerting.public.v202505.NmsContext.AlarmTarget
	(*NmsContext_AlarmMetricMap)(nil),    // 33: kentik.alerting.public.v202505.NmsContext.AlarmMetricMap
	nil,                                  // 34: kentik.alerting.public.v202505.NmsContext.AlarmTarget.FieldsEntry
	nil,                                  // 35: kentik.alerting.public.v202505.NmsContext.AlarmTarget.TagsEntry
	nil,                                  // 36: kentik.alerting.public.v202505.NmsContext.AlarmMetricMap.MetricsEntry
	(v202303.Severity)(0),                // 37: kentik.alerting.types.v202303.Severity
	(*timestamppb.Timestamp)(nil),        // 38: google.protobuf.Timestamp
	(*v202506.PaginationConfig)(nil),     // 39: kentik.alerting.types.v202506.PaginationConfig
	(*v202506.SortingConfig)(nil),        // 40: kentik.alerting.types.v202506.SortingConfig
	(*Source)(nil),                       // 41: kentik.alerting.public.v202505.Source
	(*v202303.MultiAttributeFilter)(nil), // 42: kentik.alerting.types.v202303.MultiAttributeFilter
	(*v202303.TimeRange)(nil),            // 43: kentik.alerting.types.v202303.TimeRange
	(*v202506.PaginationInfo)(nil),       // 44: kentik.alerting.types.v202506.PaginationInfo
	(*NmsActivateOrClearConditions)(nil), // 45: kentik.alerting.public.v202505.NmsActivateOrClearConditions
}
var file_kentik_alerting_public_v202505_alert_proto_depIdxs = []int32{
	15, // 0: kentik.alerting.public.v202505.AlertServiceGetResponse.alert:type_name -> kentik.alerting.public.v202505.Alert
	5,  // 1: kentik.alerting.public.v202505.AlertServiceGetResponse.history:type_name -> kentik.alerting.public.v202505.AlertPhase
	37, // 2: kentik.alerting.public.v202505.AlertPhase.severity:type_name -> kentik.alerting.types.v202303.Severity
	38, // 3: kentik.alerting.public.v202505.AlertPhase.start_time_at:type_name -> google.protobuf.Timestamp
	38, // 4: kentik.alerting.public.v202505.AlertPhase.end_time_at:type_name -> google.protobuf.Timestamp
	16, // 5: kentik.alerting.public.v202505.AlertPhase.flow:type_name -> kentik.alerting.public.v202505.FlowContext
	17, // 6: kentik.alerting.public.v202505.AlertPhase.nms:type_name -> kentik.alerting.public.v202505.NmsContext
	39, // 7: kentik.alerting.public.v202505.AlertServiceListRequest.pagination:type_name -> kentik.alerting.types.v202506.PaginationConfig
	40, // 8: kentik.alerting.public.v202505.AlertServiceListRequest.sorting:type_name -> kentik.alerting.types.v202506.SortingConfig
	7,  // 9: kentik.alerting.public.v202505.AlertServiceListRequest.filters:type_name -> kentik.alerting.public.v202505.AlertFilters
	37, // 10: kentik.alerting.public.v202505.AlertFilters.severities:type_name -> kentik.alerting.types.v202303.Severity
	41, // 11: kentik.alerting.public.v202505.AlertFilters.sources:type_name -> kentik.alerting.public.v202505.Source
	42, // 12: kentik.alerting.public.v202505.AlertFilters.keys:type_name -> kentik.alerting.types.v202303.MultiAttributeFilter
	0,  // 13: kentik.alerting.public.v202505.AlertFilters.states:type_name -> kentik.alerting.public.v202505.AlertState
	43, // 14: kentik.alerting.public.v202505.AlertFilters.started_at:type_name -> kentik.alerting.types.v202303.TimeRange
	43, // 15: kentik.alerting.public.v202505.AlertFilters.ended_at:type_name -> kentik.alerting.types.v202303.TimeRange
	37, // 16: kentik.alerting.public.v202505.AlertFilters.highest_severities:type_name -> kentik.alerting.types.v202303.Severity
	37, // 17: kentik.alerting.public.v202505.AlertFilters.recent_severities:type_name -> kentik.alerting.types.v202303.Severity
	1,  // 18: kentik.alerting.public.v202505.AlertFilters.ack_states:type_name -> kentik.alerting.public.v202505.AlertAcknowledgement
	43, // 19: kentik.alerting.public.v202505.AlertFilters.active_at:type_name -> kentik.alerting.types.v202303.TimeRange
	44, // 20: kentik.alerting.public.v202505.AlertServiceListResponse.pagination:type_name -> kentik.alerting.types.v202506.PaginationInfo
	15, // 21: kentik.alerting.public.v202505.AlertServiceListResponse.alerts:type_name -> kentik.alerting.public.v202505.Alert
	15, // 22: kentik.alerting.public.v202505.AlertServiceAckResponse.alert:type_name -> kentik.alerting.public.v202505.Alert
	15, // 23: kentik.alerting.public.v202505.AlertServiceUnAckResponse.alert:type_name -> kentik.alerting.public.v202505.Alert
	41, // 24: kentik.alerting.public.v202505.Alert.source:type_name -> kentik.alerting.public.v202505.Source
	38, // 25: kentik.alerting.public.v202505.Alert.start_time_at:type_name -> google.protobuf.Timestamp
	38, // 26: kentik.alerting.public.v202505.Alert.end_time_at:type_name -> google.protobuf.Timestamp
	0,  // 27: kentik.alerting.public.v202505.Alert.state:type_name -> kentik.alerting.public.v202505.AlertState
	37, // 28: kentik.alerting.public.v202505.Alert.severity:type_name -> kentik.alerting.types.v202303.Severity
	37, // 29: kentik.alerting.public.v202505.Alert.highest_severity:type_name -> kentik.alerting.types.v202303.Severity
	18, // 30: kentik.alerting.public.v202505.Alert.acknowledgement:type_name -> kentik.alerting.public.v202505.Alert.Acknowledgement
	38, // 31: kentik.alerting.public.v202505.Alert.event_start_time_at:type_name -> google.protobuf.Timestamp
	16, // 32: kentik.alerting.public.v202505.Alert.flow:type_name -> kentik.alerting.public.v202505.FlowContext
	17, // 33: kentik.alerting.public.v202505.Alert.nms:type_name -> kentik.alerting.public.v202505.NmsContext
	20, // 34: kentik.alerting.public.v202505.FlowContext.metric_values:type_name -> kentik.alerting.public.v202505.FlowContext.MetricValue
	2,  // 35: kentik.alerting.public.v202505.FlowContext.activation_status:type_name -> kentik.alerting.public.v202505.FlowContext.ActivationStatus
	19, // 36: kentik.alerting.public.v202505.FlowContext.alert_key_details:type_name -> kentik.alerting.public.v202505.FlowContext.AlertKeyDetailsEntry
	30, // 37: kentik.alerting.public.v202505.NmsContext.activation_info:type_name -> kentik.alerting.public.v202505.NmsContext.ActivationInfo
	31, // 38: kentik.alerting.public.v202505.NmsContext.dataset_info:type_name -> kentik.alerting.public.v202505.NmsContext.DatasetInfo
	25, // 39: kentik.alerting.public.v202505.NmsContext.targets:type_name -> kentik.alerting.public.v202505.NmsContext.TargetsEntry
	26, // 40: kentik.alerting.public.v202505.NmsContext.metric_values:type_name -> kentik.alerting.public.v202505.NmsContext.MetricValuesEntry
	27, // 41: kentik.alerting.public.v202505.NmsContext.previous_metric_values:type_name -> kentik.alerting.public.v202505.NmsContext.PreviousMetricValuesEntry
	28, // 42: kentik.alerting.public.v202505.NmsContext.device:type_name -> kentik.alerting.public.v202505.NmsContext.DeviceEntry
	29, // 43: kentik.alerting.public.v202505.NmsContext.group_key:type_name -> kentik.alerting.public.v202505.NmsContext.GroupKeyEntry
	1,  // 44: kentik.alerting.public.v202505.Alert.Acknowledgement.state:type_name -> kentik.alerting.public.v202505.AlertAcknowledgement
	38, // 45: kentik.alerting.public.v202505.Alert.Acknowledgement.acked_at:type_name -> google.protobuf.Timestamp
	21, // 46: kentik.alerting.public.v202505.FlowContext.AlertKeyDetailsEntry.value:type_name -> kentik.alerting.public.v202505.FlowContext.AlertKeyDetails
	22, // 47: kentik.alerting.public.v202505.FlowContext.AlertKeyDetails.device:type_name -> kentik.alerting.public.v202505.FlowContext.DeviceDetails
	23, // 48: kentik.alerting.public.v202505.FlowContext.AlertKeyDetails.interface:type_name -> kentik.alerting.public.v202505.FlowContext.InterfaceDetails
	24, // 49: kentik.alerting.public.v202505.FlowContext.AlertKeyDetails.site:type_name -> kentik.alerting.public.v202505.FlowContext.SiteDetails
	32, // 50: kentik.alerting.public.v202505.NmsContext.TargetsEntry.value:type_name -> kentik.alerting.public.v202505.NmsContext.AlarmTarget
	33, // 51: kentik.alerting.public.v202505.NmsContext.MetricValuesEntry.value:type_name -> kentik.alerting.public.v202505.NmsContext.AlarmMetricMap
	33, // 52: kentik.alerting.public.v202505.NmsContext.PreviousMetricValuesEntry.value:type_name -> kentik.alerting.public.v202505.NmsContext.AlarmMetricMap
	45, // 53: kentik.alerting.public.v202505.NmsContext.ActivationInfo.activate:type_name -> kentik.alerting.public.v202505.NmsActivateOrClearConditions
	34, // 54: kentik.alerting.public.v202505.NmsContext.AlarmTarget.fields:type_name -> kentik.alerting.public.v202505.NmsContext.AlarmTarget.FieldsEntry
	35, // 55: kentik.alerting.public.v202505.NmsContext.AlarmTarget.tags:type_name -> kentik.alerting.public.v202505.NmsContext.AlarmTarget.TagsEntry
	36, // 56: kentik.alerting.public.v202505.NmsContext.AlarmMetricMap.metrics:type_name -> kentik.alerting.public.v202505.NmsContext.AlarmMetricMap.MetricsEntry
	3,  // 57: kentik.alerting.public.v202505.AlertService.Get:input_type -> kentik.alerting.public.v202505.AlertServiceGetRequest
	6,  // 58: kentik.alerting.public.v202505.AlertService.List:input_type -> kentik.alerting.public.v202505.AlertServiceListRequest
	9,  // 59: kentik.alerting.public.v202505.AlertService.Ack:input_type -> kentik.alerting.public.v202505.AlertServiceAckRequest
	11, // 60: kentik.alerting.public.v202505.AlertService.UnAck:input_type -> kentik.alerting.public.v202505.AlertServiceUnAckRequest
	13, // 61: kentik.alerting.public.v202505.AlertService.Clear:input_type -> kentik.alerting.public.v202505.AlertServiceClearRequest
	4,  // 62: kentik.alerting.public.v202505.AlertService.Get:output_type -> kentik.alerting.public.v202505.AlertServiceGetResponse
	8,  // 63: kentik.alerting.public.v202505.AlertService.List:output_type -> kentik.alerting.public.v202505.AlertServiceListResponse
	10, // 64: kentik.alerting.public.v202505.AlertService.Ack:output_type -> kentik.alerting.public.v202505.AlertServiceAckResponse
	12, // 65: kentik.alerting.public.v202505.AlertService.UnAck:output_type -> kentik.alerting.public.v202505.AlertServiceUnAckResponse
	14, // 66: kentik.alerting.public.v202505.AlertService.Clear:output_type -> kentik.alerting.public.v202505.AlertServiceClearResponse
	62, // [62:67] is the sub-list for method output_type
	57, // [57:62] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_kentik_alerting_public_v202505_alert_proto_init() }
func file_kentik_alerting_public_v202505_alert_proto_init() {
	if File_kentik_alerting_public_v202505_alert_proto != nil {
		return
	}
	file_kentik_alerting_public_v202505_common_proto_init()
	file_kentik_alerting_public_v202505_nms_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceAckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceAckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceUnAckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceUnAckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertServiceClearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmsContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_Acknowledgement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContext_MetricValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContext_AlertKeyDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContext_DeviceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContext_InterfaceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContext_SiteDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmsContext_ActivationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmsContext_DatasetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmsContext_AlarmTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_alert_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmsContext_AlarmMetricMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_alerting_public_v202505_alert_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AlertPhase_Flow)(nil),
		(*AlertPhase_Nms)(nil),
	}
	file_kentik_alerting_public_v202505_alert_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Alert_Flow)(nil),
		(*Alert_Nms)(nil),
	}
	file_kentik_alerting_public_v202505_alert_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*NmsContext_ActivationInfo_ClearManual)(nil),
		(*NmsContext_ActivationInfo_ClearUnlessActivated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_alerting_public_v202505_alert_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_alerting_public_v202505_alert_proto_goTypes,
		DependencyIndexes: file_kentik_alerting_public_v202505_alert_proto_depIdxs,
		EnumInfos:         file_kentik_alerting_public_v202505_alert_proto_enumTypes,
		MessageInfos:      file_kentik_alerting_public_v202505_alert_proto_msgTypes,
	}.Build()
	File_kentik_alerting_public_v202505_alert_proto = out.File
	file_kentik_alerting_public_v202505_alert_proto_rawDesc = nil
	file_kentik_alerting_public_v202505_alert_proto_goTypes = nil
	file_kentik_alerting_public_v202505_alert_proto_depIdxs = nil
}
