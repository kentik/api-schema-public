// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MitigationPlatformsServiceClient is the client API for MitigationPlatformsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MitigationPlatformsServiceClient interface {
	List(ctx context.Context, in *MitigationPlatformsServiceListRequest, opts ...grpc.CallOption) (*MitigationPlatformsServiceListResponse, error)
	Get(ctx context.Context, in *MitigationPlatformsServiceGetRequest, opts ...grpc.CallOption) (*MitigationPlatformsServiceGetResponse, error)
}

type mitigationPlatformsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMitigationPlatformsServiceClient(cc grpc.ClientConnInterface) MitigationPlatformsServiceClient {
	return &mitigationPlatformsServiceClient{cc}
}

func (c *mitigationPlatformsServiceClient) List(ctx context.Context, in *MitigationPlatformsServiceListRequest, opts ...grpc.CallOption) (*MitigationPlatformsServiceListResponse, error) {
	out := new(MitigationPlatformsServiceListResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.MitigationPlatformsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitigationPlatformsServiceClient) Get(ctx context.Context, in *MitigationPlatformsServiceGetRequest, opts ...grpc.CallOption) (*MitigationPlatformsServiceGetResponse, error) {
	out := new(MitigationPlatformsServiceGetResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.MitigationPlatformsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MitigationPlatformsServiceServer is the server API for MitigationPlatformsService service.
// All implementations should embed UnimplementedMitigationPlatformsServiceServer
// for forward compatibility
type MitigationPlatformsServiceServer interface {
	List(context.Context, *MitigationPlatformsServiceListRequest) (*MitigationPlatformsServiceListResponse, error)
	Get(context.Context, *MitigationPlatformsServiceGetRequest) (*MitigationPlatformsServiceGetResponse, error)
}

// UnimplementedMitigationPlatformsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMitigationPlatformsServiceServer struct {
}

func (UnimplementedMitigationPlatformsServiceServer) List(context.Context, *MitigationPlatformsServiceListRequest) (*MitigationPlatformsServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMitigationPlatformsServiceServer) Get(context.Context, *MitigationPlatformsServiceGetRequest) (*MitigationPlatformsServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeMitigationPlatformsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MitigationPlatformsServiceServer will
// result in compilation errors.
type UnsafeMitigationPlatformsServiceServer interface {
	mustEmbedUnimplementedMitigationPlatformsServiceServer()
}

func RegisterMitigationPlatformsServiceServer(s grpc.ServiceRegistrar, srv MitigationPlatformsServiceServer) {
	s.RegisterService(&MitigationPlatformsService_ServiceDesc, srv)
}

func _MitigationPlatformsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationPlatformsServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationPlatformsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.MitigationPlatformsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationPlatformsServiceServer).List(ctx, req.(*MitigationPlatformsServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitigationPlatformsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationPlatformsServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationPlatformsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.MitigationPlatformsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationPlatformsServiceServer).Get(ctx, req.(*MitigationPlatformsServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MitigationPlatformsService_ServiceDesc is the grpc.ServiceDesc for MitigationPlatformsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MitigationPlatformsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.MitigationPlatformsService",
	HandlerType: (*MitigationPlatformsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MitigationPlatformsService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MitigationPlatformsService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/mitigation_platform.proto",
}
