// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/alerting/public/v202505/silencing.proto

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlertSilenceNotificationsService_Create_FullMethodName  = "/kentik.alerting.public.v202505.AlertSilenceNotificationsService/Create"
	AlertSilenceNotificationsService_Get_FullMethodName     = "/kentik.alerting.public.v202505.AlertSilenceNotificationsService/Get"
	AlertSilenceNotificationsService_List_FullMethodName    = "/kentik.alerting.public.v202505.AlertSilenceNotificationsService/List"
	AlertSilenceNotificationsService_Replace_FullMethodName = "/kentik.alerting.public.v202505.AlertSilenceNotificationsService/Replace"
	AlertSilenceNotificationsService_Delete_FullMethodName  = "/kentik.alerting.public.v202505.AlertSilenceNotificationsService/Delete"
)

// AlertSilenceNotificationsServiceClient is the client API for AlertSilenceNotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertSilenceNotificationsServiceClient interface {
	Create(ctx context.Context, in *AlertSilenceNotificationsServiceCreateRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceCreateResponse, error)
	Get(ctx context.Context, in *AlertSilenceNotificationsServiceGetRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceGetResponse, error)
	List(ctx context.Context, in *AlertSilenceNotificationsServiceListRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceListResponse, error)
	Replace(ctx context.Context, in *AlertSilenceNotificationsServiceReplaceRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceReplaceResponse, error)
	Delete(ctx context.Context, in *AlertSilenceNotificationsServiceDeleteRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceDeleteResponse, error)
}

type alertSilenceNotificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertSilenceNotificationsServiceClient(cc grpc.ClientConnInterface) AlertSilenceNotificationsServiceClient {
	return &alertSilenceNotificationsServiceClient{cc}
}

func (c *alertSilenceNotificationsServiceClient) Create(ctx context.Context, in *AlertSilenceNotificationsServiceCreateRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertSilenceNotificationsServiceCreateResponse)
	err := c.cc.Invoke(ctx, AlertSilenceNotificationsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSilenceNotificationsServiceClient) Get(ctx context.Context, in *AlertSilenceNotificationsServiceGetRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertSilenceNotificationsServiceGetResponse)
	err := c.cc.Invoke(ctx, AlertSilenceNotificationsService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSilenceNotificationsServiceClient) List(ctx context.Context, in *AlertSilenceNotificationsServiceListRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertSilenceNotificationsServiceListResponse)
	err := c.cc.Invoke(ctx, AlertSilenceNotificationsService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSilenceNotificationsServiceClient) Replace(ctx context.Context, in *AlertSilenceNotificationsServiceReplaceRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceReplaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertSilenceNotificationsServiceReplaceResponse)
	err := c.cc.Invoke(ctx, AlertSilenceNotificationsService_Replace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertSilenceNotificationsServiceClient) Delete(ctx context.Context, in *AlertSilenceNotificationsServiceDeleteRequest, opts ...grpc.CallOption) (*AlertSilenceNotificationsServiceDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertSilenceNotificationsServiceDeleteResponse)
	err := c.cc.Invoke(ctx, AlertSilenceNotificationsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertSilenceNotificationsServiceServer is the server API for AlertSilenceNotificationsService service.
// All implementations should embed UnimplementedAlertSilenceNotificationsServiceServer
// for forward compatibility.
type AlertSilenceNotificationsServiceServer interface {
	Create(context.Context, *AlertSilenceNotificationsServiceCreateRequest) (*AlertSilenceNotificationsServiceCreateResponse, error)
	Get(context.Context, *AlertSilenceNotificationsServiceGetRequest) (*AlertSilenceNotificationsServiceGetResponse, error)
	List(context.Context, *AlertSilenceNotificationsServiceListRequest) (*AlertSilenceNotificationsServiceListResponse, error)
	Replace(context.Context, *AlertSilenceNotificationsServiceReplaceRequest) (*AlertSilenceNotificationsServiceReplaceResponse, error)
	Delete(context.Context, *AlertSilenceNotificationsServiceDeleteRequest) (*AlertSilenceNotificationsServiceDeleteResponse, error)
}

// UnimplementedAlertSilenceNotificationsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlertSilenceNotificationsServiceServer struct{}

func (UnimplementedAlertSilenceNotificationsServiceServer) Create(context.Context, *AlertSilenceNotificationsServiceCreateRequest) (*AlertSilenceNotificationsServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlertSilenceNotificationsServiceServer) Get(context.Context, *AlertSilenceNotificationsServiceGetRequest) (*AlertSilenceNotificationsServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAlertSilenceNotificationsServiceServer) List(context.Context, *AlertSilenceNotificationsServiceListRequest) (*AlertSilenceNotificationsServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAlertSilenceNotificationsServiceServer) Replace(context.Context, *AlertSilenceNotificationsServiceReplaceRequest) (*AlertSilenceNotificationsServiceReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedAlertSilenceNotificationsServiceServer) Delete(context.Context, *AlertSilenceNotificationsServiceDeleteRequest) (*AlertSilenceNotificationsServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAlertSilenceNotificationsServiceServer) testEmbeddedByValue() {}

// UnsafeAlertSilenceNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertSilenceNotificationsServiceServer will
// result in compilation errors.
type UnsafeAlertSilenceNotificationsServiceServer interface {
	mustEmbedUnimplementedAlertSilenceNotificationsServiceServer()
}

func RegisterAlertSilenceNotificationsServiceServer(s grpc.ServiceRegistrar, srv AlertSilenceNotificationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAlertSilenceNotificationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlertSilenceNotificationsService_ServiceDesc, srv)
}

func _AlertSilenceNotificationsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertSilenceNotificationsServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertSilenceNotificationsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertSilenceNotificationsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertSilenceNotificationsServiceServer).Create(ctx, req.(*AlertSilenceNotificationsServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertSilenceNotificationsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertSilenceNotificationsServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertSilenceNotificationsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertSilenceNotificationsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertSilenceNotificationsServiceServer).Get(ctx, req.(*AlertSilenceNotificationsServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertSilenceNotificationsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertSilenceNotificationsServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertSilenceNotificationsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertSilenceNotificationsService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertSilenceNotificationsServiceServer).List(ctx, req.(*AlertSilenceNotificationsServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertSilenceNotificationsService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertSilenceNotificationsServiceReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertSilenceNotificationsServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertSilenceNotificationsService_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertSilenceNotificationsServiceServer).Replace(ctx, req.(*AlertSilenceNotificationsServiceReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertSilenceNotificationsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertSilenceNotificationsServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertSilenceNotificationsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertSilenceNotificationsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertSilenceNotificationsServiceServer).Delete(ctx, req.(*AlertSilenceNotificationsServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertSilenceNotificationsService_ServiceDesc is the grpc.ServiceDesc for AlertSilenceNotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertSilenceNotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.AlertSilenceNotificationsService",
	HandlerType: (*AlertSilenceNotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AlertSilenceNotificationsService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AlertSilenceNotificationsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AlertSilenceNotificationsService_List_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _AlertSilenceNotificationsService_Replace_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AlertSilenceNotificationsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/silencing.proto",
}
