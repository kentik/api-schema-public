// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MitigationMethodsServiceClient is the client API for MitigationMethodsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MitigationMethodsServiceClient interface {
	List(ctx context.Context, in *MitigationMethodsServiceListRequest, opts ...grpc.CallOption) (*MitigationMethodsServiceListResponse, error)
	Get(ctx context.Context, in *MitigationMethodsServiceGetRequest, opts ...grpc.CallOption) (*MitigationMethodsServiceGetResponse, error)
}

type mitigationMethodsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMitigationMethodsServiceClient(cc grpc.ClientConnInterface) MitigationMethodsServiceClient {
	return &mitigationMethodsServiceClient{cc}
}

func (c *mitigationMethodsServiceClient) List(ctx context.Context, in *MitigationMethodsServiceListRequest, opts ...grpc.CallOption) (*MitigationMethodsServiceListResponse, error) {
	out := new(MitigationMethodsServiceListResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.MitigationMethodsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mitigationMethodsServiceClient) Get(ctx context.Context, in *MitigationMethodsServiceGetRequest, opts ...grpc.CallOption) (*MitigationMethodsServiceGetResponse, error) {
	out := new(MitigationMethodsServiceGetResponse)
	err := c.cc.Invoke(ctx, "/kentik.alerting.public.v202505.MitigationMethodsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MitigationMethodsServiceServer is the server API for MitigationMethodsService service.
// All implementations should embed UnimplementedMitigationMethodsServiceServer
// for forward compatibility
type MitigationMethodsServiceServer interface {
	List(context.Context, *MitigationMethodsServiceListRequest) (*MitigationMethodsServiceListResponse, error)
	Get(context.Context, *MitigationMethodsServiceGetRequest) (*MitigationMethodsServiceGetResponse, error)
}

// UnimplementedMitigationMethodsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMitigationMethodsServiceServer struct {
}

func (UnimplementedMitigationMethodsServiceServer) List(context.Context, *MitigationMethodsServiceListRequest) (*MitigationMethodsServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMitigationMethodsServiceServer) Get(context.Context, *MitigationMethodsServiceGetRequest) (*MitigationMethodsServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeMitigationMethodsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MitigationMethodsServiceServer will
// result in compilation errors.
type UnsafeMitigationMethodsServiceServer interface {
	mustEmbedUnimplementedMitigationMethodsServiceServer()
}

func RegisterMitigationMethodsServiceServer(s grpc.ServiceRegistrar, srv MitigationMethodsServiceServer) {
	s.RegisterService(&MitigationMethodsService_ServiceDesc, srv)
}

func _MitigationMethodsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationMethodsServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationMethodsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.MitigationMethodsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationMethodsServiceServer).List(ctx, req.(*MitigationMethodsServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MitigationMethodsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigationMethodsServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MitigationMethodsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.alerting.public.v202505.MitigationMethodsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MitigationMethodsServiceServer).Get(ctx, req.(*MitigationMethodsServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MitigationMethodsService_ServiceDesc is the grpc.ServiceDesc for MitigationMethodsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MitigationMethodsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.MitigationMethodsService",
	HandlerType: (*MitigationMethodsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MitigationMethodsService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MitigationMethodsService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/mitigation_method.proto",
}
