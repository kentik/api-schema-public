// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kentik/alerting/public/v202505/policy_flow.proto

package v202505

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202303"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowPolicySettings_BaselineConfig_CompareMode int32

const (
	FlowPolicySettings_BaselineConfig_COMPARE_MODE_UNSPECIFIED FlowPolicySettings_BaselineConfig_CompareMode = 0
	// pick all previous hours baseline values
	FlowPolicySettings_BaselineConfig_COMPARE_MODE_PREVIOUS_HOURS FlowPolicySettings_BaselineConfig_CompareMode = 1
	// pick all previous days baseline values
	FlowPolicySettings_BaselineConfig_COMPARE_MODE_PREVIOUS_DAYS FlowPolicySettings_BaselineConfig_CompareMode = 2
	// pick previous days baseline values but distinguish weekend days from weekdays
	FlowPolicySettings_BaselineConfig_COMPARE_MODE_PREVIOUS_DAYS_DISTINGUISH_WEEKENDS FlowPolicySettings_BaselineConfig_CompareMode = 3
	// pick all previous weeks baseline values
	FlowPolicySettings_BaselineConfig_COMPARE_MODE_PREVIOUS_WEEKS FlowPolicySettings_BaselineConfig_CompareMode = 4
)

// Enum value maps for FlowPolicySettings_BaselineConfig_CompareMode.
var (
	FlowPolicySettings_BaselineConfig_CompareMode_name = map[int32]string{
		0: "COMPARE_MODE_UNSPECIFIED",
		1: "COMPARE_MODE_PREVIOUS_HOURS",
		2: "COMPARE_MODE_PREVIOUS_DAYS",
		3: "COMPARE_MODE_PREVIOUS_DAYS_DISTINGUISH_WEEKENDS",
		4: "COMPARE_MODE_PREVIOUS_WEEKS",
	}
	FlowPolicySettings_BaselineConfig_CompareMode_value = map[string]int32{
		"COMPARE_MODE_UNSPECIFIED":                        0,
		"COMPARE_MODE_PREVIOUS_HOURS":                     1,
		"COMPARE_MODE_PREVIOUS_DAYS":                      2,
		"COMPARE_MODE_PREVIOUS_DAYS_DISTINGUISH_WEEKENDS": 3,
		"COMPARE_MODE_PREVIOUS_WEEKS":                     4,
	}
)

func (x FlowPolicySettings_BaselineConfig_CompareMode) Enum() *FlowPolicySettings_BaselineConfig_CompareMode {
	p := new(FlowPolicySettings_BaselineConfig_CompareMode)
	*p = x
	return p
}

func (x FlowPolicySettings_BaselineConfig_CompareMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowPolicySettings_BaselineConfig_CompareMode) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[0].Descriptor()
}

func (FlowPolicySettings_BaselineConfig_CompareMode) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[0]
}

func (x FlowPolicySettings_BaselineConfig_CompareMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowPolicySettings_BaselineConfig_CompareMode.Descriptor instead.
func (FlowPolicySettings_BaselineConfig_CompareMode) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{0, 2, 0}
}

type FlowPolicyLevelSettings_Conditions_Operator int32

const (
	FlowPolicyLevelSettings_Conditions_OPERATOR_UNSPECIFIED            FlowPolicyLevelSettings_Conditions_Operator = 0
	FlowPolicyLevelSettings_Conditions_OPERATOR_GREATER_THAN_OR_EQUALS FlowPolicyLevelSettings_Conditions_Operator = 1
	FlowPolicyLevelSettings_Conditions_OPERATOR_GREATER_THAN           FlowPolicyLevelSettings_Conditions_Operator = 2
	FlowPolicyLevelSettings_Conditions_OPERATOR_EQUALS                 FlowPolicyLevelSettings_Conditions_Operator = 3
	FlowPolicyLevelSettings_Conditions_OPERATOR_NOT_EQUALS             FlowPolicyLevelSettings_Conditions_Operator = 4
	FlowPolicyLevelSettings_Conditions_OPERATOR_LESS_THAN              FlowPolicyLevelSettings_Conditions_Operator = 5
	FlowPolicyLevelSettings_Conditions_OPERATOR_LESS_THAN_OR_EQUALS    FlowPolicyLevelSettings_Conditions_Operator = 6
	FlowPolicyLevelSettings_Conditions_OPERATOR_IN_SET                 FlowPolicyLevelSettings_Conditions_Operator = 7
	FlowPolicyLevelSettings_Conditions_OPERATOR_NOT_IN_SET             FlowPolicyLevelSettings_Conditions_Operator = 8
)

// Enum value maps for FlowPolicyLevelSettings_Conditions_Operator.
var (
	FlowPolicyLevelSettings_Conditions_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_GREATER_THAN_OR_EQUALS",
		2: "OPERATOR_GREATER_THAN",
		3: "OPERATOR_EQUALS",
		4: "OPERATOR_NOT_EQUALS",
		5: "OPERATOR_LESS_THAN",
		6: "OPERATOR_LESS_THAN_OR_EQUALS",
		7: "OPERATOR_IN_SET",
		8: "OPERATOR_NOT_IN_SET",
	}
	FlowPolicyLevelSettings_Conditions_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED":            0,
		"OPERATOR_GREATER_THAN_OR_EQUALS": 1,
		"OPERATOR_GREATER_THAN":           2,
		"OPERATOR_EQUALS":                 3,
		"OPERATOR_NOT_EQUALS":             4,
		"OPERATOR_LESS_THAN":              5,
		"OPERATOR_LESS_THAN_OR_EQUALS":    6,
		"OPERATOR_IN_SET":                 7,
		"OPERATOR_NOT_IN_SET":             8,
	}
)

func (x FlowPolicyLevelSettings_Conditions_Operator) Enum() *FlowPolicyLevelSettings_Conditions_Operator {
	p := new(FlowPolicyLevelSettings_Conditions_Operator)
	*p = x
	return p
}

func (x FlowPolicyLevelSettings_Conditions_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowPolicyLevelSettings_Conditions_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[1].Descriptor()
}

func (FlowPolicyLevelSettings_Conditions_Operator) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[1]
}

func (x FlowPolicyLevelSettings_Conditions_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_Operator.Descriptor instead.
func (FlowPolicyLevelSettings_Conditions_Operator) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 0}
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType int32

const (
	FlowPolicyLevelSettings_Conditions_BaselineCondition_DELTA_TYPE_UNSPECIFIED FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType = 0
	// the traffic value must be above the baseline value
	FlowPolicyLevelSettings_Conditions_BaselineCondition_DELTA_TYPE_ABOVE FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType = 1
	// the traffic value must be below the baseline value
	FlowPolicyLevelSettings_Conditions_BaselineCondition_DELTA_TYPE_BELOW FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType = 2
)

// Enum value maps for FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType.
var (
	FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType_name = map[int32]string{
		0: "DELTA_TYPE_UNSPECIFIED",
		1: "DELTA_TYPE_ABOVE",
		2: "DELTA_TYPE_BELOW",
	}
	FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType_value = map[string]int32{
		"DELTA_TYPE_UNSPECIFIED": 0,
		"DELTA_TYPE_ABOVE":       1,
		"DELTA_TYPE_BELOW":       2,
	}
)

func (x FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType) Enum() *FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType {
	p := new(FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType)
	*p = x
	return p
}

func (x FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[2].Descriptor()
}

func (FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[2]
}

func (x FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType.Descriptor instead.
func (FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 1, 0}
}

type FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent int32

const (
	FlowPolicyLevelSettings_Conditions_TopKeysCondition_TOP_KEYS_EVENT_UNSPECIFIED FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent = 0
	// the traffic value must join the top keys observed previously in the baseline values
	FlowPolicyLevelSettings_Conditions_TopKeysCondition_TOP_KEYS_EVENT_JOINS FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent = 1
	// the traffic value must leave the top keys observed previously in the baseline value
	FlowPolicyLevelSettings_Conditions_TopKeysCondition_TOP_KEYS_EVENT_LEAVES FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent = 2
)

// Enum value maps for FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent.
var (
	FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent_name = map[int32]string{
		0: "TOP_KEYS_EVENT_UNSPECIFIED",
		1: "TOP_KEYS_EVENT_JOINS",
		2: "TOP_KEYS_EVENT_LEAVES",
	}
	FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent_value = map[string]int32{
		"TOP_KEYS_EVENT_UNSPECIFIED": 0,
		"TOP_KEYS_EVENT_JOINS":       1,
		"TOP_KEYS_EVENT_LEAVES":      2,
	}
)

func (x FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent) Enum() *FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent {
	p := new(FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent)
	*p = x
	return p
}

func (x FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[3].Descriptor()
}

func (FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[3]
}

func (x FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent.Descriptor instead.
func (FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 2, 0}
}

type FlowPolicyLevelSettings_Conditions_RatioCondition_Direction int32

const (
	FlowPolicyLevelSettings_Conditions_RatioCondition_DIRECTION_UNSPECIFIED FlowPolicyLevelSettings_Conditions_RatioCondition_Direction = 0
	FlowPolicyLevelSettings_Conditions_RatioCondition_DIRECTION_BOTH        FlowPolicyLevelSettings_Conditions_RatioCondition_Direction = 1
	FlowPolicyLevelSettings_Conditions_RatioCondition_DIRECTION_RIGHT       FlowPolicyLevelSettings_Conditions_RatioCondition_Direction = 2
	FlowPolicyLevelSettings_Conditions_RatioCondition_DIRECTION_LEFT        FlowPolicyLevelSettings_Conditions_RatioCondition_Direction = 3
)

// Enum value maps for FlowPolicyLevelSettings_Conditions_RatioCondition_Direction.
var (
	FlowPolicyLevelSettings_Conditions_RatioCondition_Direction_name = map[int32]string{
		0: "DIRECTION_UNSPECIFIED",
		1: "DIRECTION_BOTH",
		2: "DIRECTION_RIGHT",
		3: "DIRECTION_LEFT",
	}
	FlowPolicyLevelSettings_Conditions_RatioCondition_Direction_value = map[string]int32{
		"DIRECTION_UNSPECIFIED": 0,
		"DIRECTION_BOTH":        1,
		"DIRECTION_RIGHT":       2,
		"DIRECTION_LEFT":        3,
	}
)

func (x FlowPolicyLevelSettings_Conditions_RatioCondition_Direction) Enum() *FlowPolicyLevelSettings_Conditions_RatioCondition_Direction {
	p := new(FlowPolicyLevelSettings_Conditions_RatioCondition_Direction)
	*p = x
	return p
}

func (x FlowPolicyLevelSettings_Conditions_RatioCondition_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowPolicyLevelSettings_Conditions_RatioCondition_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[4].Descriptor()
}

func (FlowPolicyLevelSettings_Conditions_RatioCondition_Direction) Type() protoreflect.EnumType {
	return &file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes[4]
}

func (x FlowPolicyLevelSettings_Conditions_RatioCondition_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_RatioCondition_Direction.Descriptor instead.
func (FlowPolicyLevelSettings_Conditions_RatioCondition_Direction) EnumDescriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 4, 0}
}

type FlowPolicySettings struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Dataset       *FlowPolicySettings_DatasetConfig    `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Evaluation    *FlowPolicySettings_EvaluationConfig `protobuf:"bytes,2,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	Baseline      *FlowPolicySettings_BaselineConfig   `protobuf:"bytes,3,opt,name=baseline,proto3" json:"baseline,omitempty"` // no suppression on policy level is exposed intentionally. use suppressions
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicySettings) Reset() {
	*x = FlowPolicySettings{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicySettings) ProtoMessage() {}

func (x *FlowPolicySettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicySettings.ProtoReflect.Descriptor instead.
func (*FlowPolicySettings) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{0}
}

func (x *FlowPolicySettings) GetDataset() *FlowPolicySettings_DatasetConfig {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *FlowPolicySettings) GetEvaluation() *FlowPolicySettings_EvaluationConfig {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

func (x *FlowPolicySettings) GetBaseline() *FlowPolicySettings_BaselineConfig {
	if x != nil {
		return x.Baseline
	}
	return nil
}

type FlowPolicyLevelSettings struct {
	state                  protoimpl.MessageState                           `protogen:"open.v1"`
	Conditions             []*FlowPolicyLevelSettings_Conditions            `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Activation             *FlowPolicyLevelSettings_ActivationSettings      `protobuf:"bytes,2,opt,name=activation,proto3" json:"activation,omitempty"`
	MitigationAssociations []*FlowPolicyLevelSettings_MitigationAssociation `protobuf:"bytes,3,rep,name=mitigation_associations,json=mitigationAssociations,proto3" json:"mitigation_associations,omitempty"` // in future: dimension filters for sub-policies
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings) Reset() {
	*x = FlowPolicyLevelSettings{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings) ProtoMessage() {}

func (x *FlowPolicyLevelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1}
}

func (x *FlowPolicyLevelSettings) GetConditions() []*FlowPolicyLevelSettings_Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *FlowPolicyLevelSettings) GetActivation() *FlowPolicyLevelSettings_ActivationSettings {
	if x != nil {
		return x.Activation
	}
	return nil
}

func (x *FlowPolicyLevelSettings) GetMitigationAssociations() []*FlowPolicyLevelSettings_MitigationAssociation {
	if x != nil {
		return x.MitigationAssociations
	}
	return nil
}

type FlowPolicySettings_DatasetConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sources       *PolicyDataSources     `protobuf:"bytes,1,opt,name=sources,proto3" json:"sources,omitempty"`
	Filters       *PolicyFilters         `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Dimensions    []string               `protobuf:"bytes,3,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	Metrics       []string               `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicySettings_DatasetConfig) Reset() {
	*x = FlowPolicySettings_DatasetConfig{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicySettings_DatasetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicySettings_DatasetConfig) ProtoMessage() {}

func (x *FlowPolicySettings_DatasetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicySettings_DatasetConfig.ProtoReflect.Descriptor instead.
func (*FlowPolicySettings_DatasetConfig) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FlowPolicySettings_DatasetConfig) GetSources() *PolicyDataSources {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *FlowPolicySettings_DatasetConfig) GetFilters() *PolicyFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FlowPolicySettings_DatasetConfig) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *FlowPolicySettings_DatasetConfig) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type FlowPolicySettings_EvaluationConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Frequency     *durationpb.Duration   `protobuf:"bytes,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	KeyCount      int64                  `protobuf:"varint,2,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicySettings_EvaluationConfig) Reset() {
	*x = FlowPolicySettings_EvaluationConfig{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicySettings_EvaluationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicySettings_EvaluationConfig) ProtoMessage() {}

func (x *FlowPolicySettings_EvaluationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicySettings_EvaluationConfig.ProtoReflect.Descriptor instead.
func (*FlowPolicySettings_EvaluationConfig) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FlowPolicySettings_EvaluationConfig) GetFrequency() *durationpb.Duration {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *FlowPolicySettings_EvaluationConfig) GetKeyCount() int64 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

type FlowPolicySettings_BaselineConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// not exposing completeness duration as this does not work
	StoredKeyCount           int64                                         `protobuf:"varint,1,opt,name=stored_key_count,json=storedKeyCount,proto3" json:"stored_key_count,omitempty"`
	WindowLength             *durationpb.Duration                          `protobuf:"bytes,2,opt,name=window_length,json=windowLength,proto3" json:"window_length,omitempty"`
	WindowStartOffset        *durationpb.Duration                          `protobuf:"bytes,3,opt,name=window_start_offset,json=windowStartOffset,proto3" json:"window_start_offset,omitempty"`
	RollupAggregation        AggregationType                               `protobuf:"varint,4,opt,name=rollup_aggregation,json=rollupAggregation,proto3,enum=kentik.alerting.public.v202505.AggregationType" json:"rollup_aggregation,omitempty"`
	CompareMode              FlowPolicySettings_BaselineConfig_CompareMode `protobuf:"varint,5,opt,name=compare_mode,json=compareMode,proto3,enum=kentik.alerting.public.v202505.FlowPolicySettings_BaselineConfig_CompareMode" json:"compare_mode,omitempty"`
	NeighbourhoodRadius      *durationpb.Duration                          `protobuf:"bytes,6,opt,name=neighbourhood_radius,json=neighbourhoodRadius,proto3" json:"neighbourhood_radius,omitempty"`
	NeighbourhoodAggregation AggregationType                               `protobuf:"varint,7,opt,name=neighbourhood_aggregation,json=neighbourhoodAggregation,proto3,enum=kentik.alerting.public.v202505.AggregationType" json:"neighbourhood_aggregation,omitempty"`
	FinalAggregation         AggregationType                               `protobuf:"varint,8,opt,name=final_aggregation,json=finalAggregation,proto3,enum=kentik.alerting.public.v202505.AggregationType" json:"final_aggregation,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *FlowPolicySettings_BaselineConfig) Reset() {
	*x = FlowPolicySettings_BaselineConfig{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicySettings_BaselineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicySettings_BaselineConfig) ProtoMessage() {}

func (x *FlowPolicySettings_BaselineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicySettings_BaselineConfig.ProtoReflect.Descriptor instead.
func (*FlowPolicySettings_BaselineConfig) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FlowPolicySettings_BaselineConfig) GetStoredKeyCount() int64 {
	if x != nil {
		return x.StoredKeyCount
	}
	return 0
}

func (x *FlowPolicySettings_BaselineConfig) GetWindowLength() *durationpb.Duration {
	if x != nil {
		return x.WindowLength
	}
	return nil
}

func (x *FlowPolicySettings_BaselineConfig) GetWindowStartOffset() *durationpb.Duration {
	if x != nil {
		return x.WindowStartOffset
	}
	return nil
}

func (x *FlowPolicySettings_BaselineConfig) GetRollupAggregation() AggregationType {
	if x != nil {
		return x.RollupAggregation
	}
	return AggregationType_AGGREGATION_TYPE_UNSPECIFIED
}

func (x *FlowPolicySettings_BaselineConfig) GetCompareMode() FlowPolicySettings_BaselineConfig_CompareMode {
	if x != nil {
		return x.CompareMode
	}
	return FlowPolicySettings_BaselineConfig_COMPARE_MODE_UNSPECIFIED
}

func (x *FlowPolicySettings_BaselineConfig) GetNeighbourhoodRadius() *durationpb.Duration {
	if x != nil {
		return x.NeighbourhoodRadius
	}
	return nil
}

func (x *FlowPolicySettings_BaselineConfig) GetNeighbourhoodAggregation() AggregationType {
	if x != nil {
		return x.NeighbourhoodAggregation
	}
	return AggregationType_AGGREGATION_TYPE_UNSPECIFIED
}

func (x *FlowPolicySettings_BaselineConfig) GetFinalAggregation() AggregationType {
	if x != nil {
		return x.FinalAggregation
	}
	return AggregationType_AGGREGATION_TYPE_UNSPECIFIED
}

type FlowPolicyLevelSettings_ActivationSettings struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MatchTimes       int64                  `protobuf:"varint,1,opt,name=match_times,json=matchTimes,proto3" json:"match_times,omitempty"`
	MatchWindow      *durationpb.Duration   `protobuf:"bytes,2,opt,name=match_window,json=matchWindow,proto3" json:"match_window,omitempty"`
	ResetCountWindow *durationpb.Duration   `protobuf:"bytes,3,opt,name=reset_count_window,json=resetCountWindow,proto3" json:"reset_count_window,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_ActivationSettings) Reset() {
	*x = FlowPolicyLevelSettings_ActivationSettings{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_ActivationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_ActivationSettings) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_ActivationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_ActivationSettings.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_ActivationSettings) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FlowPolicyLevelSettings_ActivationSettings) GetMatchTimes() int64 {
	if x != nil {
		return x.MatchTimes
	}
	return 0
}

func (x *FlowPolicyLevelSettings_ActivationSettings) GetMatchWindow() *durationpb.Duration {
	if x != nil {
		return x.MatchWindow
	}
	return nil
}

func (x *FlowPolicyLevelSettings_ActivationSettings) GetResetCountWindow() *durationpb.Duration {
	if x != nil {
		return x.ResetCountWindow
	}
	return nil
}

type FlowPolicyLevelSettings_Conditions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*FlowPolicyLevelSettings_Conditions_Static
	//	*FlowPolicyLevelSettings_Conditions_Baseline
	//	*FlowPolicyLevelSettings_Conditions_TopKeys
	//	*FlowPolicyLevelSettings_Conditions_InterfaceCapacity
	//	*FlowPolicyLevelSettings_Conditions_Ratio
	//	*FlowPolicyLevelSettings_Conditions_Forecast
	Type          isFlowPolicyLevelSettings_Conditions_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_Conditions) Reset() {
	*x = FlowPolicyLevelSettings_Conditions{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_Conditions) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_Conditions) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1}
}

func (x *FlowPolicyLevelSettings_Conditions) GetType() isFlowPolicyLevelSettings_Conditions_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions) GetStatic() *FlowPolicyLevelSettings_Conditions_StaticCondition {
	if x != nil {
		if x, ok := x.Type.(*FlowPolicyLevelSettings_Conditions_Static); ok {
			return x.Static
		}
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions) GetBaseline() *FlowPolicyLevelSettings_Conditions_BaselineCondition {
	if x != nil {
		if x, ok := x.Type.(*FlowPolicyLevelSettings_Conditions_Baseline); ok {
			return x.Baseline
		}
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions) GetTopKeys() *FlowPolicyLevelSettings_Conditions_TopKeysCondition {
	if x != nil {
		if x, ok := x.Type.(*FlowPolicyLevelSettings_Conditions_TopKeys); ok {
			return x.TopKeys
		}
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions) GetInterfaceCapacity() *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition {
	if x != nil {
		if x, ok := x.Type.(*FlowPolicyLevelSettings_Conditions_InterfaceCapacity); ok {
			return x.InterfaceCapacity
		}
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions) GetRatio() *FlowPolicyLevelSettings_Conditions_RatioCondition {
	if x != nil {
		if x, ok := x.Type.(*FlowPolicyLevelSettings_Conditions_Ratio); ok {
			return x.Ratio
		}
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions) GetForecast() *FlowPolicyLevelSettings_Conditions_ForecastCondition {
	if x != nil {
		if x, ok := x.Type.(*FlowPolicyLevelSettings_Conditions_Forecast); ok {
			return x.Forecast
		}
	}
	return nil
}

type isFlowPolicyLevelSettings_Conditions_Type interface {
	isFlowPolicyLevelSettings_Conditions_Type()
}

type FlowPolicyLevelSettings_Conditions_Static struct {
	Static *FlowPolicyLevelSettings_Conditions_StaticCondition `protobuf:"bytes,1,opt,name=static,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_Baseline struct {
	Baseline *FlowPolicyLevelSettings_Conditions_BaselineCondition `protobuf:"bytes,2,opt,name=baseline,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_TopKeys struct {
	TopKeys *FlowPolicyLevelSettings_Conditions_TopKeysCondition `protobuf:"bytes,3,opt,name=top_keys,json=topKeys,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_InterfaceCapacity struct {
	InterfaceCapacity *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition `protobuf:"bytes,4,opt,name=interface_capacity,json=interfaceCapacity,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_Ratio struct {
	Ratio *FlowPolicyLevelSettings_Conditions_RatioCondition `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_Forecast struct {
	Forecast *FlowPolicyLevelSettings_Conditions_ForecastCondition `protobuf:"bytes,6,opt,name=forecast,proto3,oneof"`
}

func (*FlowPolicyLevelSettings_Conditions_Static) isFlowPolicyLevelSettings_Conditions_Type() {}

func (*FlowPolicyLevelSettings_Conditions_Baseline) isFlowPolicyLevelSettings_Conditions_Type() {}

func (*FlowPolicyLevelSettings_Conditions_TopKeys) isFlowPolicyLevelSettings_Conditions_Type() {}

func (*FlowPolicyLevelSettings_Conditions_InterfaceCapacity) isFlowPolicyLevelSettings_Conditions_Type() {
}

func (*FlowPolicyLevelSettings_Conditions_Ratio) isFlowPolicyLevelSettings_Conditions_Type() {}

func (*FlowPolicyLevelSettings_Conditions_Forecast) isFlowPolicyLevelSettings_Conditions_Type() {}

type FlowPolicyLevelSettings_MitigationAssociation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatformId    string                 `protobuf:"bytes,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	MethodId      string                 `protobuf:"bytes,2,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_MitigationAssociation) Reset() {
	*x = FlowPolicyLevelSettings_MitigationAssociation{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_MitigationAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_MitigationAssociation) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_MitigationAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_MitigationAssociation.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_MitigationAssociation) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 2}
}

func (x *FlowPolicyLevelSettings_MitigationAssociation) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *FlowPolicyLevelSettings_MitigationAssociation) GetMethodId() string {
	if x != nil {
		return x.MethodId
	}
	return ""
}

type FlowPolicyLevelSettings_Conditions_StaticCondition struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Metric        string                                      `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Operator      FlowPolicyLevelSettings_Conditions_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=kentik.alerting.public.v202505.FlowPolicyLevelSettings_Conditions_Operator" json:"operator,omitempty"`
	Value         float64                                     `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_Conditions_StaticCondition) Reset() {
	*x = FlowPolicyLevelSettings_Conditions_StaticCondition{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_Conditions_StaticCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_Conditions_StaticCondition) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_Conditions_StaticCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_StaticCondition.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_Conditions_StaticCondition) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *FlowPolicyLevelSettings_Conditions_StaticCondition) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *FlowPolicyLevelSettings_Conditions_StaticCondition) GetOperator() FlowPolicyLevelSettings_Conditions_Operator {
	if x != nil {
		return x.Operator
	}
	return FlowPolicyLevelSettings_Conditions_OPERATOR_UNSPECIFIED
}

func (x *FlowPolicyLevelSettings_Conditions_StaticCondition) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*FlowPolicyLevelSettings_Conditions_BaselineCondition_Absolute
	//	*FlowPolicyLevelSettings_Conditions_BaselineCondition_Percentage
	Value isFlowPolicyLevelSettings_Conditions_BaselineCondition_Value   `protobuf_oneof:"value"`
	Delta FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType `protobuf:"varint,3,opt,name=delta,proto3,enum=kentik.alerting.public.v202505.FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType" json:"delta,omitempty"`
	// Types that are valid to be assigned to Fallback:
	//
	//	*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseLowest
	//	*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseHighest
	//	*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseTrigger
	//	*FlowPolicyLevelSettings_Conditions_BaselineCondition_Skip
	//	*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseValue
	Fallback      isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback `protobuf_oneof:"fallback"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) Reset() {
	*x = FlowPolicyLevelSettings_Conditions_BaselineCondition{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_BaselineCondition.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_Conditions_BaselineCondition) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetValue() isFlowPolicyLevelSettings_Conditions_BaselineCondition_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetAbsolute() float64 {
	if x != nil {
		if x, ok := x.Value.(*FlowPolicyLevelSettings_Conditions_BaselineCondition_Absolute); ok {
			return x.Absolute
		}
	}
	return 0
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetPercentage() int64 {
	if x != nil {
		if x, ok := x.Value.(*FlowPolicyLevelSettings_Conditions_BaselineCondition_Percentage); ok {
			return x.Percentage
		}
	}
	return 0
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetDelta() FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType {
	if x != nil {
		return x.Delta
	}
	return FlowPolicyLevelSettings_Conditions_BaselineCondition_DELTA_TYPE_UNSPECIFIED
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetFallback() isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback {
	if x != nil {
		return x.Fallback
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetUseLowest() bool {
	if x != nil {
		if x, ok := x.Fallback.(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseLowest); ok {
			return x.UseLowest
		}
	}
	return false
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetUseHighest() bool {
	if x != nil {
		if x, ok := x.Fallback.(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseHighest); ok {
			return x.UseHighest
		}
	}
	return false
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetUseTrigger() bool {
	if x != nil {
		if x, ok := x.Fallback.(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseTrigger); ok {
			return x.UseTrigger
		}
	}
	return false
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetSkip() bool {
	if x != nil {
		if x, ok := x.Fallback.(*FlowPolicyLevelSettings_Conditions_BaselineCondition_Skip); ok {
			return x.Skip
		}
	}
	return false
}

func (x *FlowPolicyLevelSettings_Conditions_BaselineCondition) GetUseValue() int64 {
	if x != nil {
		if x, ok := x.Fallback.(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseValue); ok {
			return x.UseValue
		}
	}
	return 0
}

type isFlowPolicyLevelSettings_Conditions_BaselineCondition_Value interface {
	isFlowPolicyLevelSettings_Conditions_BaselineCondition_Value()
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_Absolute struct {
	Absolute float64 `protobuf:"fixed64,1,opt,name=absolute,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_Percentage struct {
	Percentage int64 `protobuf:"varint,2,opt,name=percentage,proto3,oneof"`
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition_Absolute) isFlowPolicyLevelSettings_Conditions_BaselineCondition_Value() {
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition_Percentage) isFlowPolicyLevelSettings_Conditions_BaselineCondition_Value() {
}

type isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback interface {
	isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback()
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_UseLowest struct {
	UseLowest bool `protobuf:"varint,4,opt,name=use_lowest,json=useLowest,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_UseHighest struct {
	UseHighest bool `protobuf:"varint,5,opt,name=use_highest,json=useHighest,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_UseTrigger struct {
	UseTrigger bool `protobuf:"varint,6,opt,name=use_trigger,json=useTrigger,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_Skip struct {
	Skip bool `protobuf:"varint,7,opt,name=skip,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_BaselineCondition_UseValue struct {
	UseValue int64 `protobuf:"varint,8,opt,name=use_value,json=useValue,proto3,oneof"`
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseLowest) isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback() {
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseHighest) isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback() {
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseTrigger) isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback() {
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition_Skip) isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback() {
}

func (*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseValue) isFlowPolicyLevelSettings_Conditions_BaselineCondition_Fallback() {
}

type FlowPolicyLevelSettings_Conditions_TopKeysCondition struct {
	state         protoimpl.MessageState                                           `protogen:"open.v1"`
	Event         FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent `protobuf:"varint,1,opt,name=event,proto3,enum=kentik.alerting.public.v202505.FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent" json:"event,omitempty"`
	Count         int64                                                            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_Conditions_TopKeysCondition) Reset() {
	*x = FlowPolicyLevelSettings_Conditions_TopKeysCondition{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_Conditions_TopKeysCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_Conditions_TopKeysCondition) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_Conditions_TopKeysCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_TopKeysCondition.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_Conditions_TopKeysCondition) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 2}
}

func (x *FlowPolicyLevelSettings_Conditions_TopKeysCondition) GetEvent() FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent {
	if x != nil {
		return x.Event
	}
	return FlowPolicyLevelSettings_Conditions_TopKeysCondition_TOP_KEYS_EVENT_UNSPECIFIED
}

func (x *FlowPolicyLevelSettings_Conditions_TopKeysCondition) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Absolute
	//	*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Percentage
	Value         isFlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) Reset() {
	*x = FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 3}
}

func (x *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) GetValue() isFlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) GetAbsolute() float64 {
	if x != nil {
		if x, ok := x.Value.(*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Absolute); ok {
			return x.Absolute
		}
	}
	return 0
}

func (x *FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition) GetPercentage() int64 {
	if x != nil {
		if x, ok := x.Value.(*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Percentage); ok {
			return x.Percentage
		}
	}
	return 0
}

type isFlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Value interface {
	isFlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Value()
}

type FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Absolute struct {
	Absolute float64 `protobuf:"fixed64,1,opt,name=absolute,proto3,oneof"`
}

type FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Percentage struct {
	Percentage int64 `protobuf:"varint,2,opt,name=percentage,proto3,oneof"`
}

func (*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Absolute) isFlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Value() {
}

func (*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Percentage) isFlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Value() {
}

type FlowPolicyLevelSettings_Conditions_RatioCondition struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	LhsMetric     string                                                      `protobuf:"bytes,1,opt,name=lhs_metric,json=lhsMetric,proto3" json:"lhs_metric,omitempty"`
	RhsMetric     string                                                      `protobuf:"bytes,2,opt,name=rhs_metric,json=rhsMetric,proto3" json:"rhs_metric,omitempty"`
	LhsProportion uint32                                                      `protobuf:"varint,3,opt,name=lhs_proportion,json=lhsProportion,proto3" json:"lhs_proportion,omitempty"`
	RhsProportion uint32                                                      `protobuf:"varint,4,opt,name=rhs_proportion,json=rhsProportion,proto3" json:"rhs_proportion,omitempty"`
	Margin        float64                                                     `protobuf:"fixed64,5,opt,name=margin,proto3" json:"margin,omitempty"`
	Direction     FlowPolicyLevelSettings_Conditions_RatioCondition_Direction `protobuf:"varint,6,opt,name=direction,proto3,enum=kentik.alerting.public.v202505.FlowPolicyLevelSettings_Conditions_RatioCondition_Direction" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) Reset() {
	*x = FlowPolicyLevelSettings_Conditions_RatioCondition{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_Conditions_RatioCondition) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_RatioCondition.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_Conditions_RatioCondition) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 4}
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) GetLhsMetric() string {
	if x != nil {
		return x.LhsMetric
	}
	return ""
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) GetRhsMetric() string {
	if x != nil {
		return x.RhsMetric
	}
	return ""
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) GetLhsProportion() uint32 {
	if x != nil {
		return x.LhsProportion
	}
	return 0
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) GetRhsProportion() uint32 {
	if x != nil {
		return x.RhsProportion
	}
	return 0
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *FlowPolicyLevelSettings_Conditions_RatioCondition) GetDirection() FlowPolicyLevelSettings_Conditions_RatioCondition_Direction {
	if x != nil {
		return x.Direction
	}
	return FlowPolicyLevelSettings_Conditions_RatioCondition_DIRECTION_UNSPECIFIED
}

type FlowPolicyLevelSettings_Conditions_ForecastCondition struct {
	state           protoimpl.MessageState                      `protogen:"open.v1"`
	Operator        FlowPolicyLevelSettings_Conditions_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=kentik.alerting.public.v202505.FlowPolicyLevelSettings_Conditions_Operator" json:"operator,omitempty"`
	PercentageValue int64                                       `protobuf:"varint,2,opt,name=percentage_value,json=percentageValue,proto3" json:"percentage_value,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FlowPolicyLevelSettings_Conditions_ForecastCondition) Reset() {
	*x = FlowPolicyLevelSettings_Conditions_ForecastCondition{}
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowPolicyLevelSettings_Conditions_ForecastCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPolicyLevelSettings_Conditions_ForecastCondition) ProtoMessage() {}

func (x *FlowPolicyLevelSettings_Conditions_ForecastCondition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPolicyLevelSettings_Conditions_ForecastCondition.ProtoReflect.Descriptor instead.
func (*FlowPolicyLevelSettings_Conditions_ForecastCondition) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP(), []int{1, 1, 5}
}

func (x *FlowPolicyLevelSettings_Conditions_ForecastCondition) GetOperator() FlowPolicyLevelSettings_Conditions_Operator {
	if x != nil {
		return x.Operator
	}
	return FlowPolicyLevelSettings_Conditions_OPERATOR_UNSPECIFIED
}

func (x *FlowPolicyLevelSettings_Conditions_ForecastCondition) GetPercentageValue() int64 {
	if x != nil {
		return x.PercentageValue
	}
	return 0
}

var File_kentik_alerting_public_v202505_policy_flow_proto protoreflect.FileDescriptor

const file_kentik_alerting_public_v202505_policy_flow_proto_rawDesc = "" +
	"\n" +
	"0kentik/alerting/public/v202505/policy_flow.proto\x12\x1ekentik.alerting.public.v202505\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a%kentik/core/v202303/annotations.proto\x1a)kentik/alerting/types/v202303/types.proto\x1a+kentik/alerting/public/v202505/common.proto\x1a7kentik/alerting/public/v202505/policy_datasources.proto\x1a3kentik/alerting/public/v202505/policy_filters.proto\"\x86\x18\n" +
	"\x12FlowPolicySettings\x12\x8d\x01\n" +
	"\adataset\x18\x01 \x01(\v2@.kentik.alerting.public.v202505.FlowPolicySettings.DatasetConfigB1\x92A+2)The dataset configuration for the policy.\xe0A\x02R\adataset\x12\x99\x01\n" +
	"\n" +
	"evaluation\x18\x02 \x01(\v2C.kentik.alerting.public.v202505.FlowPolicySettings.EvaluationConfigB4\x92A.2,The evaluation configuration for the policy.\xe0A\x02R\n" +
	"evaluation\x12\x91\x01\n" +
	"\bbaseline\x18\x03 \x01(\v2A.kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfigB2\x92A,2*The baseline configuration for the policy.\xe0A\x02R\bbaseline\x1a\xde\x04\n" +
	"\rDatasetConfig\x12w\n" +
	"\asources\x18\x01 \x01(\v21.kentik.alerting.public.v202505.PolicyDataSourcesB*\x92A$2\"The device sources of the dataset.\xe0A\x02R\asources\x12\xa2\x01\n" +
	"\afilters\x18\x02 \x01(\v2-.kentik.alerting.public.v202505.PolicyFiltersBY\x92AS2QThe filters of the dataset. Effectively this is combined with the device sources.\xe0A\x02R\afilters\x12t\n" +
	"\n" +
	"dimensions\x18\x03 \x03(\tBT\x92AN2LThe dimensions of the policy used to create alert keys for activated alerts.\xe0A\x02R\n" +
	"dimensions\x12\xb8\x01\n" +
	"\ametrics\x18\x04 \x03(\tB\x9d\x01\x92A\x96\x012\x93\x01The metrics of the dataset that can be used for policy threshold conditions. Metrics are also provided with the activated alert context information\xe0A\x02R\ametrics\x1a\x88\x02\n" +
	"\x10EvaluationConfig\x12\x95\x01\n" +
	"\tfrequency\x18\x01 \x01(\v2\x19.google.protobuf.DurationB\\\x92AV2OThe frequency of the policy evaluation, also known as the policy window length.:\x0360s\xe0A\x02R\tfrequency\x12\\\n" +
	"\tkey_count\x18\x02 \x01(\x03B?\x92A923The number of alert keys tracked per policy window.:\x0225\xe0A\x02R\bkeyCount\x1a\xc3\r\n" +
	"\x0eBaselineConfig\x12x\n" +
	"\x10stored_key_count\x18\x01 \x01(\x03BN\x92AH2BThe number of alert keys stored in the baseline per policy window.:\x0225\xe0A\x02R\x0estoredKeyCount\x12\x82\x01\n" +
	"\rwindow_length\x18\x02 \x01(\v2\x19.google.protobuf.DurationBB\x92A<20The length of the entire policy baseline window.:\b2419200s\xe0A\x02R\fwindowLength\x12\x9e\x01\n" +
	"\x13window_start_offset\x18\x03 \x01(\v2\x19.google.protobuf.DurationBS\x92AM2CThe start offset from now used when calculating the baseline value.:\x0686400s\xe0A\x02R\x11windowStartOffset\x12\xd4\x01\n" +
	"\x12rollup_aggregation\x18\x04 \x01(\x0e2/.kentik.alerting.public.v202505.AggregationTypeBt\x92An2lThe aggregation type used to roll up the baseline value from policy window data into 1-hour baseline values.\xe0A\x02R\x11rollupAggregation\x12\xe0\x01\n" +
	"\fcompare_mode\x18\x05 \x01(\x0e2M.kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.CompareModeBn\x92Ah2fThe compare mode determining which baseline values are selected to calculate the final baseline value.\xe0A\x02R\vcompareMode\x12\x8d\x02\n" +
	"\x14neighbourhood_radius\x18\x06 \x01(\v2\x19.google.protobuf.DurationB\xbe\x01\x92A\xb7\x012\xb4\x01The neighbourhood radius used to calculate the neighbourhood value. This is the number of hours before and after the current hour to include in the neighbourhood value calculation.\xe0A\x02R\x13neighbourhoodRadius\x12\xda\x01\n" +
	"\x19neighbourhood_aggregation\x18\a \x01(\x0e2/.kentik.alerting.public.v202505.AggregationTypeBl\x92Af2dThe aggregation type used to roll up the neighbourhood values taken within the neighbourhood radius.\xe0A\x02R\x18neighbourhoodAggregation\x12\xa4\x01\n" +
	"\x11final_aggregation\x18\b \x01(\x0e2/.kentik.alerting.public.v202505.AggregationTypeBF\x92A@2>The aggregation type used to roll up the final baseline value.\xe0A\x02R\x10finalAggregation\"\xc2\x01\n" +
	"\vCompareMode\x12\x1c\n" +
	"\x18COMPARE_MODE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bCOMPARE_MODE_PREVIOUS_HOURS\x10\x01\x12\x1e\n" +
	"\x1aCOMPARE_MODE_PREVIOUS_DAYS\x10\x02\x123\n" +
	"/COMPARE_MODE_PREVIOUS_DAYS_DISTINGUISH_WEEKENDS\x10\x03\x12\x1f\n" +
	"\x1bCOMPARE_MODE_PREVIOUS_WEEKS\x10\x04\"\x9b1\n" +
	"\x17FlowPolicyLevelSettings\x12\x98\x01\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2B.kentik.alerting.public.v202505.FlowPolicyLevelSettings.ConditionsB4\x92A.2,The conditions of the policy level settings.\xe0A\x02R\n" +
	"conditions\x12\xb8\x01\n" +
	"\n" +
	"activation\x18\x02 \x01(\v2J.kentik.alerting.public.v202505.FlowPolicyLevelSettings.ActivationSettingsBL\x92AF2DThe rolling window activation settings of the policy level settings.\xe0A\x02R\n" +
	"activation\x12\xa5\x02\n" +
	"\x17mitigation_associations\x18\x03 \x03(\v2M.kentik.alerting.public.v202505.FlowPolicyLevelSettings.MitigationAssociationB\x9c\x01\x92A\x95\x012\x92\x01The mitigation associations of the given policy level (when alert is activated with the level severity, these mitigation methods will be applied).\xe0A\x02R\x16mitigationAssociations\x1a\x89\x04\n" +
	"\x12ActivationSettings\x12\x93\x01\n" +
	"\vmatch_times\x18\x01 \x01(\x03Br\x92Al2jThe number of times the policy level conditions must be met within the match window to activate the alert.\xe0A\x02R\n" +
	"matchTimes\x12\xa4\x01\n" +
	"\fmatch_window\x18\x02 \x01(\v2\x19.google.protobuf.DurationBf\x92A`2^The window of time within which the policy level conditions must be met to activate the alert.\xe0A\x02R\vmatchWindow\x12\xb5\x01\n" +
	"\x12reset_count_window\x18\x03 \x01(\v2\x19.google.protobuf.DurationBl\x92Af2dThe window of time within which the level conditions must not be met again to reset the match count.\xe0A\x02R\x10resetCountWindow\x1a\xaf&\n" +
	"\n" +
	"Conditions\x12\xf1\x01\n" +
	"\x06static\x18\x01 \x01(\v2R.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.StaticConditionB\x82\x01\x92A|2zThe static type of the policy level condition: use a static value to compare with the traffic value with a given operator.\xe0A\x01H\x00R\x06static\x12\x85\x02\n" +
	"\bbaseline\x18\x02 \x01(\v2T.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.BaselineConditionB\x90\x01\x92A\x89\x012\x86\x01The baseline type of the policy level condition: use a baseline value to compare with the current traffic value with a given operator.\xe0A\x01H\x00R\bbaseline\x12\x89\x02\n" +
	"\btop_keys\x18\x03 \x01(\v2S.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.TopKeysConditionB\x96\x01\x92A\x8f\x012\x8c\x01The top keys type of the policy level condition: use the top keys observed in the baseline values to compare with the current traffic value.\xe0A\x01H\x00R\atopKeys\x12\x9b\x02\n" +
	"\x12interface_capacity\x18\x04 \x01(\v2].kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.InterfaceCapacityConditionB\x8a\x01\x92A\x83\x012\x80\x01The interface capacity type of the policy level condition: use the interface capacity to compare with the current traffic value.\xe0A\x01H\x00R\x11interfaceCapacity\x12\xdb\x01\n" +
	"\x05ratio\x18\x05 \x01(\v2Q.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.RatioConditionBp\x92Aj2hThe ratio type of the policy level condition: use the ratio of two metrics to compare their proportions.\xe0A\x01H\x00R\x05ratio\x12\xfc\x01\n" +
	"\bforecast\x18\x06 \x01(\v2T.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.ForecastConditionB\x87\x01\x92A\x80\x012~The forecast type of the policy level condition: use the forecast of a metric value to compare with the current traffic value.\xe0A\x01H\x00R\bforecast\x1a\xd5\x02\n" +
	"\x0fStaticCondition\x12O\n" +
	"\x06metric\x18\x01 \x01(\tB7\x92A12/The metric used for the policy level condition.\xe0A\x02R\x06metric\x12\xa2\x01\n" +
	"\boperator\x18\x02 \x01(\x0e2K.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.OperatorB9\x92A321The operator used for the policy level condition.\xe0A\x02R\boperator\x12L\n" +
	"\x05value\x18\x03 \x01(\x01B6\x92A02.The value used for the policy level condition.\xe0A\x02R\x05value\x1a\xe5\b\n" +
	"\x11BaselineCondition\x12]\n" +
	"\babsolute\x18\x01 \x01(\x01B?\x92A927The absolute value used for the policy level condition.\xe0A\x01H\x00R\babsolute\x12c\n" +
	"\n" +
	"percentage\x18\x02 \x01(\x03BA\x92A;29The percentage value used for the policy level condition.\xe0A\x01H\x00R\n" +
	"percentage\x12\xb1\x01\n" +
	"\x05delta\x18\x03 \x01(\x0e2^.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.BaselineCondition.DeltaTypeB;\x92A523The delta type used for the policy level condition.\xe0A\x02R\x05delta\x12\x80\x01\n" +
	"\n" +
	"use_lowest\x18\x04 \x01(\bB_\x92AY2WUse the lowest value for the policy level condition if valid baseline value is missing.\xe0A\x01H\x01R\tuseLowest\x12\x83\x01\n" +
	"\vuse_highest\x18\x05 \x01(\bB`\x92AZ2XUse the highest value for the policy level condition if valid baseline value is missing.\xe0A\x01H\x01R\n" +
	"useHighest\x12\x83\x01\n" +
	"\vuse_trigger\x18\x06 \x01(\bB`\x92AZ2XUse the trigger value for the policy level condition if valid baseline value is missing.\xe0A\x01H\x01R\n" +
	"useTrigger\x12`\n" +
	"\x04skip\x18\a \x01(\bBJ\x92AD2BSkip the current traffic value if valid baseline value is missing.\xe0A\x01H\x01R\x04skip\x12}\n" +
	"\tuse_value\x18\b \x01(\x03B^\x92AX2VUse the given value for the policy level condition if valid baseline value is missing.\xe0A\x01H\x01R\buseValue\"S\n" +
	"\tDeltaType\x12\x1a\n" +
	"\x16DELTA_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10DELTA_TYPE_ABOVE\x10\x01\x12\x14\n" +
	"\x10DELTA_TYPE_BELOW\x10\x02B\a\n" +
	"\x05valueB\n" +
	"\n" +
	"\bfallback\x1a\x8b\x03\n" +
	"\x10TopKeysCondition\x12\xb3\x01\n" +
	"\x05event\x18\x01 \x01(\x0e2`.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.TopKeysCondition.TopKeysEventB;\x92A523The event type used for the policy level condition.\xe0A\x02R\x05event\x12\\\n" +
	"\x05count\x18\x02 \x01(\x03BF\x92A@2>The count of the top keys used for the policy level condition.\xe0A\x02R\x05count\"c\n" +
	"\fTopKeysEvent\x12\x1e\n" +
	"\x1aTOP_KEYS_EVENT_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14TOP_KEYS_EVENT_JOINS\x10\x01\x12\x19\n" +
	"\x15TOP_KEYS_EVENT_LEAVES\x10\x02\x1a\xe9\x01\n" +
	"\x1aInterfaceCapacityCondition\x12]\n" +
	"\babsolute\x18\x01 \x01(\x01B?\x92A927The absolute value used for the policy level condition.\xe0A\x01H\x00R\babsolute\x12c\n" +
	"\n" +
	"percentage\x18\x02 \x01(\x03BA\x92A;29The percentage value used for the policy level condition.\xe0A\x01H\x00R\n" +
	"percentageB\a\n" +
	"\x05value\x1a\xb4\x06\n" +
	"\x0eRatioCondition\x12e\n" +
	"\n" +
	"lhs_metric\x18\x01 \x01(\tBF\x92A@2>The left hand side metric used for the policy level condition.\xe0A\x02R\tlhsMetric\x12f\n" +
	"\n" +
	"rhs_metric\x18\x02 \x01(\tBG\x92AA2?The right hand side metric used for the policy level condition.\xe0A\x02R\trhsMetric\x12q\n" +
	"\x0elhs_proportion\x18\x03 \x01(\rBJ\x92AD2BThe left hand side proportion used for the policy level condition.\xe0A\x02R\rlhsProportion\x12r\n" +
	"\x0erhs_proportion\x18\x04 \x01(\rBK\x92AE2CThe right hand side proportion used for the policy level condition.\xe0A\x02R\rrhsProportion\x12O\n" +
	"\x06margin\x18\x05 \x01(\x01B7\x92A12/The margin used for the policy level condition.\xe0A\x02R\x06margin\x12\xb5\x01\n" +
	"\tdirection\x18\x06 \x01(\x0e2[.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.RatioCondition.DirectionB:\x92A422The direction used for the policy level condition.\xe0A\x02R\tdirection\"c\n" +
	"\tDirection\x12\x19\n" +
	"\x15DIRECTION_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eDIRECTION_BOTH\x10\x01\x12\x13\n" +
	"\x0fDIRECTION_RIGHT\x10\x02\x12\x12\n" +
	"\x0eDIRECTION_LEFT\x10\x03\x1a\xa7\x01\n" +
	"\x11ForecastCondition\x12g\n" +
	"\boperator\x18\x01 \x01(\x0e2K.kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.OperatorR\boperator\x12)\n" +
	"\x10percentage_value\x18\x02 \x01(\x03R\x0fpercentageValue\"\xfa\x01\n" +
	"\bOperator\x12\x18\n" +
	"\x14OPERATOR_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fOPERATOR_GREATER_THAN_OR_EQUALS\x10\x01\x12\x19\n" +
	"\x15OPERATOR_GREATER_THAN\x10\x02\x12\x13\n" +
	"\x0fOPERATOR_EQUALS\x10\x03\x12\x17\n" +
	"\x13OPERATOR_NOT_EQUALS\x10\x04\x12\x16\n" +
	"\x12OPERATOR_LESS_THAN\x10\x05\x12 \n" +
	"\x1cOPERATOR_LESS_THAN_OR_EQUALS\x10\x06\x12\x13\n" +
	"\x0fOPERATOR_IN_SET\x10\a\x12\x17\n" +
	"\x13OPERATOR_NOT_IN_SET\x10\bB\x06\n" +
	"\x04type\x1a\xc3\x01\n" +
	"\x15MitigationAssociation\x12W\n" +
	"\vplatform_id\x18\x01 \x01(\tB6\x92A02.The platform ID of the mitigation association.\xe0A\x02R\n" +
	"platformId\x12Q\n" +
	"\tmethod_id\x18\x02 \x01(\tB4\x92A.2,The method ID of the mitigation association.\xe0A\x02R\bmethodIdBKZIgithub.com/kentik/api-schema-public/gen/go/kentik/alerting/public/v202505b\x06proto3"

var (
	file_kentik_alerting_public_v202505_policy_flow_proto_rawDescOnce sync.Once
	file_kentik_alerting_public_v202505_policy_flow_proto_rawDescData []byte
)

func file_kentik_alerting_public_v202505_policy_flow_proto_rawDescGZIP() []byte {
	file_kentik_alerting_public_v202505_policy_flow_proto_rawDescOnce.Do(func() {
		file_kentik_alerting_public_v202505_policy_flow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kentik_alerting_public_v202505_policy_flow_proto_rawDesc), len(file_kentik_alerting_public_v202505_policy_flow_proto_rawDesc)))
	})
	return file_kentik_alerting_public_v202505_policy_flow_proto_rawDescData
}

var file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_kentik_alerting_public_v202505_policy_flow_proto_goTypes = []any{
	(FlowPolicySettings_BaselineConfig_CompareMode)(0),                    // 0: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.CompareMode
	(FlowPolicyLevelSettings_Conditions_Operator)(0),                      // 1: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.Operator
	(FlowPolicyLevelSettings_Conditions_BaselineCondition_DeltaType)(0),   // 2: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.BaselineCondition.DeltaType
	(FlowPolicyLevelSettings_Conditions_TopKeysCondition_TopKeysEvent)(0), // 3: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.TopKeysCondition.TopKeysEvent
	(FlowPolicyLevelSettings_Conditions_RatioCondition_Direction)(0),      // 4: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.RatioCondition.Direction
	(*FlowPolicySettings)(nil),                                            // 5: kentik.alerting.public.v202505.FlowPolicySettings
	(*FlowPolicyLevelSettings)(nil),                                       // 6: kentik.alerting.public.v202505.FlowPolicyLevelSettings
	(*FlowPolicySettings_DatasetConfig)(nil),                              // 7: kentik.alerting.public.v202505.FlowPolicySettings.DatasetConfig
	(*FlowPolicySettings_EvaluationConfig)(nil),                           // 8: kentik.alerting.public.v202505.FlowPolicySettings.EvaluationConfig
	(*FlowPolicySettings_BaselineConfig)(nil),                             // 9: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig
	(*FlowPolicyLevelSettings_ActivationSettings)(nil),                    // 10: kentik.alerting.public.v202505.FlowPolicyLevelSettings.ActivationSettings
	(*FlowPolicyLevelSettings_Conditions)(nil),                            // 11: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions
	(*FlowPolicyLevelSettings_MitigationAssociation)(nil),                 // 12: kentik.alerting.public.v202505.FlowPolicyLevelSettings.MitigationAssociation
	(*FlowPolicyLevelSettings_Conditions_StaticCondition)(nil),            // 13: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.StaticCondition
	(*FlowPolicyLevelSettings_Conditions_BaselineCondition)(nil),          // 14: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.BaselineCondition
	(*FlowPolicyLevelSettings_Conditions_TopKeysCondition)(nil),           // 15: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.TopKeysCondition
	(*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition)(nil), // 16: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.InterfaceCapacityCondition
	(*FlowPolicyLevelSettings_Conditions_RatioCondition)(nil),             // 17: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.RatioCondition
	(*FlowPolicyLevelSettings_Conditions_ForecastCondition)(nil),          // 18: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.ForecastCondition
	(*PolicyDataSources)(nil),                                             // 19: kentik.alerting.public.v202505.PolicyDataSources
	(*PolicyFilters)(nil),                                                 // 20: kentik.alerting.public.v202505.PolicyFilters
	(*durationpb.Duration)(nil),                                           // 21: google.protobuf.Duration
	(AggregationType)(0),                                                  // 22: kentik.alerting.public.v202505.AggregationType
}
var file_kentik_alerting_public_v202505_policy_flow_proto_depIdxs = []int32{
	7,  // 0: kentik.alerting.public.v202505.FlowPolicySettings.dataset:type_name -> kentik.alerting.public.v202505.FlowPolicySettings.DatasetConfig
	8,  // 1: kentik.alerting.public.v202505.FlowPolicySettings.evaluation:type_name -> kentik.alerting.public.v202505.FlowPolicySettings.EvaluationConfig
	9,  // 2: kentik.alerting.public.v202505.FlowPolicySettings.baseline:type_name -> kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig
	11, // 3: kentik.alerting.public.v202505.FlowPolicyLevelSettings.conditions:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions
	10, // 4: kentik.alerting.public.v202505.FlowPolicyLevelSettings.activation:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.ActivationSettings
	12, // 5: kentik.alerting.public.v202505.FlowPolicyLevelSettings.mitigation_associations:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.MitigationAssociation
	19, // 6: kentik.alerting.public.v202505.FlowPolicySettings.DatasetConfig.sources:type_name -> kentik.alerting.public.v202505.PolicyDataSources
	20, // 7: kentik.alerting.public.v202505.FlowPolicySettings.DatasetConfig.filters:type_name -> kentik.alerting.public.v202505.PolicyFilters
	21, // 8: kentik.alerting.public.v202505.FlowPolicySettings.EvaluationConfig.frequency:type_name -> google.protobuf.Duration
	21, // 9: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.window_length:type_name -> google.protobuf.Duration
	21, // 10: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.window_start_offset:type_name -> google.protobuf.Duration
	22, // 11: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.rollup_aggregation:type_name -> kentik.alerting.public.v202505.AggregationType
	0,  // 12: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.compare_mode:type_name -> kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.CompareMode
	21, // 13: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.neighbourhood_radius:type_name -> google.protobuf.Duration
	22, // 14: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.neighbourhood_aggregation:type_name -> kentik.alerting.public.v202505.AggregationType
	22, // 15: kentik.alerting.public.v202505.FlowPolicySettings.BaselineConfig.final_aggregation:type_name -> kentik.alerting.public.v202505.AggregationType
	21, // 16: kentik.alerting.public.v202505.FlowPolicyLevelSettings.ActivationSettings.match_window:type_name -> google.protobuf.Duration
	21, // 17: kentik.alerting.public.v202505.FlowPolicyLevelSettings.ActivationSettings.reset_count_window:type_name -> google.protobuf.Duration
	13, // 18: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.static:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.StaticCondition
	14, // 19: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.baseline:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.BaselineCondition
	15, // 20: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.top_keys:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.TopKeysCondition
	16, // 21: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.interface_capacity:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.InterfaceCapacityCondition
	17, // 22: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.ratio:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.RatioCondition
	18, // 23: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.forecast:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.ForecastCondition
	1,  // 24: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.StaticCondition.operator:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.Operator
	2,  // 25: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.BaselineCondition.delta:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.BaselineCondition.DeltaType
	3,  // 26: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.TopKeysCondition.event:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.TopKeysCondition.TopKeysEvent
	4,  // 27: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.RatioCondition.direction:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.RatioCondition.Direction
	1,  // 28: kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.ForecastCondition.operator:type_name -> kentik.alerting.public.v202505.FlowPolicyLevelSettings.Conditions.Operator
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_kentik_alerting_public_v202505_policy_flow_proto_init() }
func file_kentik_alerting_public_v202505_policy_flow_proto_init() {
	if File_kentik_alerting_public_v202505_policy_flow_proto != nil {
		return
	}
	file_kentik_alerting_public_v202505_common_proto_init()
	file_kentik_alerting_public_v202505_policy_datasources_proto_init()
	file_kentik_alerting_public_v202505_policy_filters_proto_init()
	file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[6].OneofWrappers = []any{
		(*FlowPolicyLevelSettings_Conditions_Static)(nil),
		(*FlowPolicyLevelSettings_Conditions_Baseline)(nil),
		(*FlowPolicyLevelSettings_Conditions_TopKeys)(nil),
		(*FlowPolicyLevelSettings_Conditions_InterfaceCapacity)(nil),
		(*FlowPolicyLevelSettings_Conditions_Ratio)(nil),
		(*FlowPolicyLevelSettings_Conditions_Forecast)(nil),
	}
	file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[9].OneofWrappers = []any{
		(*FlowPolicyLevelSettings_Conditions_BaselineCondition_Absolute)(nil),
		(*FlowPolicyLevelSettings_Conditions_BaselineCondition_Percentage)(nil),
		(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseLowest)(nil),
		(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseHighest)(nil),
		(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseTrigger)(nil),
		(*FlowPolicyLevelSettings_Conditions_BaselineCondition_Skip)(nil),
		(*FlowPolicyLevelSettings_Conditions_BaselineCondition_UseValue)(nil),
	}
	file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes[11].OneofWrappers = []any{
		(*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Absolute)(nil),
		(*FlowPolicyLevelSettings_Conditions_InterfaceCapacityCondition_Percentage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kentik_alerting_public_v202505_policy_flow_proto_rawDesc), len(file_kentik_alerting_public_v202505_policy_flow_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kentik_alerting_public_v202505_policy_flow_proto_goTypes,
		DependencyIndexes: file_kentik_alerting_public_v202505_policy_flow_proto_depIdxs,
		EnumInfos:         file_kentik_alerting_public_v202505_policy_flow_proto_enumTypes,
		MessageInfos:      file_kentik_alerting_public_v202505_policy_flow_proto_msgTypes,
	}.Build()
	File_kentik_alerting_public_v202505_policy_flow_proto = out.File
	file_kentik_alerting_public_v202505_policy_flow_proto_goTypes = nil
	file_kentik_alerting_public_v202505_policy_flow_proto_depIdxs = nil
}
