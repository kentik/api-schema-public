// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/alerting/public/v202505/mitigation_method.proto

package v202505

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v202303 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202303"
	v202506 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202506"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MitigationMethodsServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v202506.PaginationConfig `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filters    *MitigationMethodsFilters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *MitigationMethodsServiceListRequest) Reset() {
	*x = MitigationMethodsServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationMethodsServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationMethodsServiceListRequest) ProtoMessage() {}

func (x *MitigationMethodsServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationMethodsServiceListRequest.ProtoReflect.Descriptor instead.
func (*MitigationMethodsServiceListRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescGZIP(), []int{0}
}

func (x *MitigationMethodsServiceListRequest) GetPagination() *v202506.PaginationConfig {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *MitigationMethodsServiceListRequest) GetFilters() *MitigationMethodsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type MitigationMethodsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodIds     []string                 `protobuf:"bytes,1,rep,name=method_ids,json=methodIds,proto3" json:"method_ids,omitempty"`
	PlatformTypes []MitigationPlatformType `protobuf:"varint,2,rep,packed,name=platform_types,json=platformTypes,proto3,enum=kentik.alerting.public.v202505.MitigationPlatformType" json:"platform_types,omitempty"`
	CreatedAt     *v202303.TimeRange       `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt    *v202303.TimeRange       `protobuf:"bytes,4,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *MitigationMethodsFilters) Reset() {
	*x = MitigationMethodsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationMethodsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationMethodsFilters) ProtoMessage() {}

func (x *MitigationMethodsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationMethodsFilters.ProtoReflect.Descriptor instead.
func (*MitigationMethodsFilters) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescGZIP(), []int{1}
}

func (x *MitigationMethodsFilters) GetMethodIds() []string {
	if x != nil {
		return x.MethodIds
	}
	return nil
}

func (x *MitigationMethodsFilters) GetPlatformTypes() []MitigationPlatformType {
	if x != nil {
		return x.PlatformTypes
	}
	return nil
}

func (x *MitigationMethodsFilters) GetCreatedAt() *v202303.TimeRange {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MitigationMethodsFilters) GetModifiedAt() *v202303.TimeRange {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

type MitigationMethodsServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v202506.PaginationInfo `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Methods    []*MitigationMethod     `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (x *MitigationMethodsServiceListResponse) Reset() {
	*x = MitigationMethodsServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationMethodsServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationMethodsServiceListResponse) ProtoMessage() {}

func (x *MitigationMethodsServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationMethodsServiceListResponse.ProtoReflect.Descriptor instead.
func (*MitigationMethodsServiceListResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescGZIP(), []int{2}
}

func (x *MitigationMethodsServiceListResponse) GetPagination() *v202506.PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *MitigationMethodsServiceListResponse) GetMethods() []*MitigationMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

type MitigationMethodsServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MitigationMethodsServiceGetRequest) Reset() {
	*x = MitigationMethodsServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationMethodsServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationMethodsServiceGetRequest) ProtoMessage() {}

func (x *MitigationMethodsServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationMethodsServiceGetRequest.ProtoReflect.Descriptor instead.
func (*MitigationMethodsServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescGZIP(), []int{3}
}

func (x *MitigationMethodsServiceGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MitigationMethodsServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method *MitigationMethod `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *MitigationMethodsServiceGetResponse) Reset() {
	*x = MitigationMethodsServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationMethodsServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationMethodsServiceGetResponse) ProtoMessage() {}

func (x *MitigationMethodsServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationMethodsServiceGetResponse.ProtoReflect.Descriptor instead.
func (*MitigationMethodsServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescGZIP(), []int{4}
}

func (x *MitigationMethodsServiceGetResponse) GetMethod() *MitigationMethod {
	if x != nil {
		return x.Method
	}
	return nil
}

type MitigationMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AckRequired     bool                              `protobuf:"varint,4,opt,name=ack_required,json=ackRequired,proto3" json:"ack_required,omitempty"`
	ExcludedIpCidrs []string                          `protobuf:"bytes,5,rep,name=excluded_ip_cidrs,json=excludedIpCidrs,proto3" json:"excluded_ip_cidrs,omitempty"`
	GracePeriod     *durationpb.Duration              `protobuf:"bytes,6,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	Type            MitigationPlatformType            `protobuf:"varint,7,opt,name=type,proto3,enum=kentik.alerting.public.v202505.MitigationPlatformType" json:"type,omitempty"`
	CreatedAt       *timestamppb.Timestamp            `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt      *timestamppb.Timestamp            `protobuf:"bytes,15,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	Notifications   []*NotificationChannelAssociation `protobuf:"bytes,16,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *MitigationMethod) Reset() {
	*x = MitigationMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MitigationMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MitigationMethod) ProtoMessage() {}

func (x *MitigationMethod) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MitigationMethod.ProtoReflect.Descriptor instead.
func (*MitigationMethod) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescGZIP(), []int{5}
}

func (x *MitigationMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MitigationMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MitigationMethod) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MitigationMethod) GetAckRequired() bool {
	if x != nil {
		return x.AckRequired
	}
	return false
}

func (x *MitigationMethod) GetExcludedIpCidrs() []string {
	if x != nil {
		return x.ExcludedIpCidrs
	}
	return nil
}

func (x *MitigationMethod) GetGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *MitigationMethod) GetType() MitigationPlatformType {
	if x != nil {
		return x.Type
	}
	return MitigationPlatformType_MITIGATION_PLATFORM_TYPE_UNSPECIFIED
}

func (x *MitigationMethod) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MitigationMethod) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *MitigationMethod) GetNotifications() []*NotificationChannelAssociation {
	if x != nil {
		return x.Notifications
	}
	return nil
}

var File_kentik_alerting_public_v202505_mitigation_method_proto protoreflect.FileDescriptor

var file_kentik_alerting_public_v202505_mitigation_method_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36,
	0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36,
	0x2f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x02, 0x0a, 0x23,
	0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x32,
	0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x3b, 0x92,
	0x41, 0x35, 0x32, 0x33, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xbc, 0x04, 0x0a, 0x18, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x49,
	0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x49, 0x64, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x46, 0x92, 0x41, 0x40, 0x32, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x46, 0x92, 0x41, 0x40, 0x32,
	0x3e, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2e, 0xe0,
	0x41, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x92, 0x01,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x47, 0x92,
	0x41, 0x41, 0x32, 0x3f, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xc4, 0x02, 0x0a, 0x24, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x39, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x44, 0x92, 0x41, 0x3e, 0x32,
	0x3c, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72,
	0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x22, 0x4d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x29,
	0x32, 0x27, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa2, 0x01, 0x0a, 0x23, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32,
	0x29, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x84, 0x09, 0x0a, 0x10, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x22, 0x32, 0x20, 0x54, 0x68, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0xe0, 0x41, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32, 0x29,
	0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0c, 0x61, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x52, 0x92, 0x41, 0x4c, 0x32, 0x4a, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x75, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f,
	0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x43,
	0x32, 0x41, 0x54, 0x68, 0x65, 0x20, 0x49, 0x50, 0x2f, 0x43, 0x49, 0x44, 0x52, 0x20, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x49, 0x70, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x7f, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x41, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x54,
	0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x41, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x2e, 0xe0,
	0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x38, 0x92, 0x41, 0x32, 0x32, 0x30, 0x54,
	0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x7b, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3e,
	0x92, 0x41, 0x38, 0x32, 0x36, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73,
	0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x49, 0x92, 0x41, 0x43, 0x32, 0x41, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xe2, 0x04, 0x0a,
	0x18, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x02, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x43, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92,
	0x41, 0x46, 0x12, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x1a, 0x25, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x2e, 0x2a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x85, 0x02, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x42, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x92, 0x41,
	0x3a, 0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x1c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x61, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x2a, 0x03, 0x47, 0x65, 0x74, 0xf2, 0xd7, 0x02, 0x13, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x1a, 0x2c, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x90, 0xd8, 0x02,
	0x03, 0x42, 0xf4, 0x04, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x92,
	0x41, 0xa5, 0x04, 0x12, 0xd9, 0x02, 0x0a, 0x23, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x41, 0x50, 0x49, 0x12, 0xe1, 0x01, 0x23, 0x20,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x20, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x27, 0x73, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x69, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x22,
	0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2a,
	0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68,
	0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68,
	0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x00, 0x72, 0x42, 0x0a, 0x1b, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescOnce sync.Once
	file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescData = file_kentik_alerting_public_v202505_mitigation_method_proto_rawDesc
)

func file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescGZIP() []byte {
	file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescOnce.Do(func() {
		file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescData)
	})
	return file_kentik_alerting_public_v202505_mitigation_method_proto_rawDescData
}

var file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kentik_alerting_public_v202505_mitigation_method_proto_goTypes = []interface{}{
	(*MitigationMethodsServiceListRequest)(nil),  // 0: kentik.alerting.public.v202505.MitigationMethodsServiceListRequest
	(*MitigationMethodsFilters)(nil),             // 1: kentik.alerting.public.v202505.MitigationMethodsFilters
	(*MitigationMethodsServiceListResponse)(nil), // 2: kentik.alerting.public.v202505.MitigationMethodsServiceListResponse
	(*MitigationMethodsServiceGetRequest)(nil),   // 3: kentik.alerting.public.v202505.MitigationMethodsServiceGetRequest
	(*MitigationMethodsServiceGetResponse)(nil),  // 4: kentik.alerting.public.v202505.MitigationMethodsServiceGetResponse
	(*MitigationMethod)(nil),                     // 5: kentik.alerting.public.v202505.MitigationMethod
	(*v202506.PaginationConfig)(nil),             // 6: kentik.alerting.types.v202506.PaginationConfig
	(MitigationPlatformType)(0),                  // 7: kentik.alerting.public.v202505.MitigationPlatformType
	(*v202303.TimeRange)(nil),                    // 8: kentik.alerting.types.v202303.TimeRange
	(*v202506.PaginationInfo)(nil),               // 9: kentik.alerting.types.v202506.PaginationInfo
	(*durationpb.Duration)(nil),                  // 10: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                // 11: google.protobuf.Timestamp
	(*NotificationChannelAssociation)(nil),       // 12: kentik.alerting.public.v202505.NotificationChannelAssociation
}
var file_kentik_alerting_public_v202505_mitigation_method_proto_depIdxs = []int32{
	6,  // 0: kentik.alerting.public.v202505.MitigationMethodsServiceListRequest.pagination:type_name -> kentik.alerting.types.v202506.PaginationConfig
	1,  // 1: kentik.alerting.public.v202505.MitigationMethodsServiceListRequest.filters:type_name -> kentik.alerting.public.v202505.MitigationMethodsFilters
	7,  // 2: kentik.alerting.public.v202505.MitigationMethodsFilters.platform_types:type_name -> kentik.alerting.public.v202505.MitigationPlatformType
	8,  // 3: kentik.alerting.public.v202505.MitigationMethodsFilters.created_at:type_name -> kentik.alerting.types.v202303.TimeRange
	8,  // 4: kentik.alerting.public.v202505.MitigationMethodsFilters.modified_at:type_name -> kentik.alerting.types.v202303.TimeRange
	9,  // 5: kentik.alerting.public.v202505.MitigationMethodsServiceListResponse.pagination:type_name -> kentik.alerting.types.v202506.PaginationInfo
	5,  // 6: kentik.alerting.public.v202505.MitigationMethodsServiceListResponse.methods:type_name -> kentik.alerting.public.v202505.MitigationMethod
	5,  // 7: kentik.alerting.public.v202505.MitigationMethodsServiceGetResponse.method:type_name -> kentik.alerting.public.v202505.MitigationMethod
	10, // 8: kentik.alerting.public.v202505.MitigationMethod.grace_period:type_name -> google.protobuf.Duration
	7,  // 9: kentik.alerting.public.v202505.MitigationMethod.type:type_name -> kentik.alerting.public.v202505.MitigationPlatformType
	11, // 10: kentik.alerting.public.v202505.MitigationMethod.created_at:type_name -> google.protobuf.Timestamp
	11, // 11: kentik.alerting.public.v202505.MitigationMethod.modified_at:type_name -> google.protobuf.Timestamp
	12, // 12: kentik.alerting.public.v202505.MitigationMethod.notifications:type_name -> kentik.alerting.public.v202505.NotificationChannelAssociation
	0,  // 13: kentik.alerting.public.v202505.MitigationMethodsService.List:input_type -> kentik.alerting.public.v202505.MitigationMethodsServiceListRequest
	3,  // 14: kentik.alerting.public.v202505.MitigationMethodsService.Get:input_type -> kentik.alerting.public.v202505.MitigationMethodsServiceGetRequest
	2,  // 15: kentik.alerting.public.v202505.MitigationMethodsService.List:output_type -> kentik.alerting.public.v202505.MitigationMethodsServiceListResponse
	4,  // 16: kentik.alerting.public.v202505.MitigationMethodsService.Get:output_type -> kentik.alerting.public.v202505.MitigationMethodsServiceGetResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_kentik_alerting_public_v202505_mitigation_method_proto_init() }
func file_kentik_alerting_public_v202505_mitigation_method_proto_init() {
	if File_kentik_alerting_public_v202505_mitigation_method_proto != nil {
		return
	}
	file_kentik_alerting_public_v202505_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationMethodsServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationMethodsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationMethodsServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationMethodsServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationMethodsServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MitigationMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_alerting_public_v202505_mitigation_method_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_alerting_public_v202505_mitigation_method_proto_goTypes,
		DependencyIndexes: file_kentik_alerting_public_v202505_mitigation_method_proto_depIdxs,
		MessageInfos:      file_kentik_alerting_public_v202505_mitigation_method_proto_msgTypes,
	}.Build()
	File_kentik_alerting_public_v202505_mitigation_method_proto = out.File
	file_kentik_alerting_public_v202505_mitigation_method_proto_rawDesc = nil
	file_kentik_alerting_public_v202505_mitigation_method_proto_goTypes = nil
	file_kentik_alerting_public_v202505_mitigation_method_proto_depIdxs = nil
}
