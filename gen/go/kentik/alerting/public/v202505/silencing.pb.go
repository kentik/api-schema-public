// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/alerting/public/v202505/silencing.proto

package v202505

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v202303 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202303"
	v202506 "github.com/kentik/api-schema-public/gen/go/kentik/alerting/types/v202506"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AlertSilenceNotificationsDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Source      *Source                `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Key         *v202303.KeyValue      `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	StartTimeAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time_at,json=startTimeAt,proto3" json:"start_time_at,omitempty"`
	EndTimeAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time_at,json=endTimeAt,proto3" json:"end_time_at,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *AlertSilenceNotificationsDefinition) Reset() {
	*x = AlertSilenceNotificationsDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsDefinition) ProtoMessage() {}

func (x *AlertSilenceNotificationsDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsDefinition.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsDefinition) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{0}
}

func (x *AlertSilenceNotificationsDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlertSilenceNotificationsDefinition) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlertSilenceNotificationsDefinition) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AlertSilenceNotificationsDefinition) GetKey() *v202303.KeyValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AlertSilenceNotificationsDefinition) GetStartTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimeAt
	}
	return nil
}

func (x *AlertSilenceNotificationsDefinition) GetEndTimeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimeAt
	}
	return nil
}

func (x *AlertSilenceNotificationsDefinition) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AlertSilenceNotificationsDefinition) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

type AlertSilenceNotificationsServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Silence *AlertSilenceNotificationsDefinition `protobuf:"bytes,1,opt,name=silence,proto3" json:"silence,omitempty"`
}

func (x *AlertSilenceNotificationsServiceCreateRequest) Reset() {
	*x = AlertSilenceNotificationsServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceCreateRequest) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{1}
}

func (x *AlertSilenceNotificationsServiceCreateRequest) GetSilence() *AlertSilenceNotificationsDefinition {
	if x != nil {
		return x.Silence
	}
	return nil
}

type AlertSilenceNotificationsServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Silence *AlertSilenceNotificationsDefinition `protobuf:"bytes,1,opt,name=silence,proto3" json:"silence,omitempty"`
}

func (x *AlertSilenceNotificationsServiceCreateResponse) Reset() {
	*x = AlertSilenceNotificationsServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceCreateResponse) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{2}
}

func (x *AlertSilenceNotificationsServiceCreateResponse) GetSilence() *AlertSilenceNotificationsDefinition {
	if x != nil {
		return x.Silence
	}
	return nil
}

type AlertSilenceNotificationsServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AlertSilenceNotificationsServiceGetRequest) Reset() {
	*x = AlertSilenceNotificationsServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceGetRequest) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceGetRequest.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{3}
}

func (x *AlertSilenceNotificationsServiceGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AlertSilenceNotificationsServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Silence *AlertSilenceNotificationsDefinition `protobuf:"bytes,1,opt,name=silence,proto3" json:"silence,omitempty"`
}

func (x *AlertSilenceNotificationsServiceGetResponse) Reset() {
	*x = AlertSilenceNotificationsServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceGetResponse) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceGetResponse.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{4}
}

func (x *AlertSilenceNotificationsServiceGetResponse) GetSilence() *AlertSilenceNotificationsDefinition {
	if x != nil {
		return x.Silence
	}
	return nil
}

type AlertSilenceNotificationsServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v202506.PaginationConfig        `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sorting    *v202506.SortingConfig           `protobuf:"bytes,2,opt,name=sorting,proto3" json:"sorting,omitempty"`
	Filters    *AlertSilenceNotificationFilters `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *AlertSilenceNotificationsServiceListRequest) Reset() {
	*x = AlertSilenceNotificationsServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceListRequest) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceListRequest.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceListRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{5}
}

func (x *AlertSilenceNotificationsServiceListRequest) GetPagination() *v202506.PaginationConfig {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AlertSilenceNotificationsServiceListRequest) GetSorting() *v202506.SortingConfig {
	if x != nil {
		return x.Sorting
	}
	return nil
}

func (x *AlertSilenceNotificationsServiceListRequest) GetFilters() *AlertSilenceNotificationFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type AlertSilenceNotificationFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SilenceIds   []string            `protobuf:"bytes,1,rep,name=silence_ids,json=silenceIds,proto3" json:"silence_ids,omitempty"`
	Applications []string            `protobuf:"bytes,2,rep,name=applications,proto3" json:"applications,omitempty"`
	Sources      []*Source           `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	UserIds      []string            `protobuf:"bytes,4,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	CreatedAt    *v202303.TimeRange  `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt   *v202303.TimeRange  `protobuf:"bytes,6,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	StartTimeAt  *v202303.TimeRange  `protobuf:"bytes,7,opt,name=start_time_at,json=startTimeAt,proto3" json:"start_time_at,omitempty"`
	EndTimeAt    *v202303.TimeRange  `protobuf:"bytes,8,opt,name=end_time_at,json=endTimeAt,proto3" json:"end_time_at,omitempty"`
	Keys         []*v202303.KeyValue `protobuf:"bytes,9,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *AlertSilenceNotificationFilters) Reset() {
	*x = AlertSilenceNotificationFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationFilters) ProtoMessage() {}

func (x *AlertSilenceNotificationFilters) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationFilters.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationFilters) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{6}
}

func (x *AlertSilenceNotificationFilters) GetSilenceIds() []string {
	if x != nil {
		return x.SilenceIds
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetApplications() []string {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetCreatedAt() *v202303.TimeRange {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetModifiedAt() *v202303.TimeRange {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetStartTimeAt() *v202303.TimeRange {
	if x != nil {
		return x.StartTimeAt
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetEndTimeAt() *v202303.TimeRange {
	if x != nil {
		return x.EndTimeAt
	}
	return nil
}

func (x *AlertSilenceNotificationFilters) GetKeys() []*v202303.KeyValue {
	if x != nil {
		return x.Keys
	}
	return nil
}

type AlertSilenceNotificationsServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v202506.PaginationInfo                `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Silences   []*AlertSilenceNotificationsDefinition `protobuf:"bytes,2,rep,name=silences,proto3" json:"silences,omitempty"`
}

func (x *AlertSilenceNotificationsServiceListResponse) Reset() {
	*x = AlertSilenceNotificationsServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceListResponse) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceListResponse.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceListResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{7}
}

func (x *AlertSilenceNotificationsServiceListResponse) GetPagination() *v202506.PaginationInfo {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *AlertSilenceNotificationsServiceListResponse) GetSilences() []*AlertSilenceNotificationsDefinition {
	if x != nil {
		return x.Silences
	}
	return nil
}

type AlertSilenceNotificationsServiceReplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Silence *AlertSilenceNotificationsDefinition `protobuf:"bytes,1,opt,name=silence,proto3" json:"silence,omitempty"`
}

func (x *AlertSilenceNotificationsServiceReplaceRequest) Reset() {
	*x = AlertSilenceNotificationsServiceReplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceReplaceRequest) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceReplaceRequest.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceReplaceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{8}
}

func (x *AlertSilenceNotificationsServiceReplaceRequest) GetSilence() *AlertSilenceNotificationsDefinition {
	if x != nil {
		return x.Silence
	}
	return nil
}

type AlertSilenceNotificationsServiceReplaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Silence *AlertSilenceNotificationsDefinition `protobuf:"bytes,1,opt,name=silence,proto3" json:"silence,omitempty"`
}

func (x *AlertSilenceNotificationsServiceReplaceResponse) Reset() {
	*x = AlertSilenceNotificationsServiceReplaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceReplaceResponse) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceReplaceResponse.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceReplaceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{9}
}

func (x *AlertSilenceNotificationsServiceReplaceResponse) GetSilence() *AlertSilenceNotificationsDefinition {
	if x != nil {
		return x.Silence
	}
	return nil
}

type AlertSilenceNotificationsServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AlertSilenceNotificationsServiceDeleteRequest) Reset() {
	*x = AlertSilenceNotificationsServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceDeleteRequest) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{10}
}

func (x *AlertSilenceNotificationsServiceDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AlertSilenceNotificationsServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlertSilenceNotificationsServiceDeleteResponse) Reset() {
	*x = AlertSilenceNotificationsServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertSilenceNotificationsServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertSilenceNotificationsServiceDeleteResponse) ProtoMessage() {}

func (x *AlertSilenceNotificationsServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_alerting_public_v202505_silencing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertSilenceNotificationsServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*AlertSilenceNotificationsServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP(), []int{11}
}

var File_kentik_alerting_public_v202505_silencing_proto protoreflect.FileDescriptor

var file_kentik_alerting_public_v202505_silencing_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x2f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x09, 0x0a, 0x23, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x54, 0x68,
	0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x7c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63,
	0x92, 0x41, 0x5d, 0x32, 0x5b, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x6d, 0x6f, 0x73, 0x74,
	0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x56, 0x92, 0x41, 0x50, 0x32, 0x4e, 0x54, 0x68, 0x65, 0x20, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33,
	0x30, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x92, 0x41, 0x4c,
	0x32, 0x4a, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e, 0xe0, 0x41, 0x01, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0xbe, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x7e, 0x92, 0x41, 0x78, 0x32, 0x76, 0x54,
	0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,
	0x73, 0x65, 0x6e, 0x74, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0xc2, 0x01, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x85, 0x01, 0x92, 0x41, 0x7f, 0x32, 0x7d, 0x54,
	0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x2e, 0xe0, 0x41, 0x01, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x50, 0x92, 0x41, 0x4a,
	0x32, 0x48, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x56, 0x92, 0x41, 0x50, 0x32,
	0x4e, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73,
	0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd1,
	0x01, 0x0a, 0x2d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x9f, 0x01, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x40, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x54, 0x68,
	0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x47, 0x92, 0x41,
	0x41, 0x32, 0x3f, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x2a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x41, 0x32, 0x3f,
	0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x2e, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x2b, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x49, 0x92,
	0x41, 0x43, 0x32, 0x41, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xd1, 0x03, 0x0a, 0x2b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x32, 0x54, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7f, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x37,
	0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x92, 0x01, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x37, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xe1, 0x0a, 0x0a, 0x1f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4a,
	0x92, 0x41, 0x44, 0x32, 0x42, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x6d, 0x92,
	0x41, 0x67, 0x32, 0x65, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x5a, 0x92, 0x41, 0x54, 0x32, 0x52, 0x54, 0x68, 0x65, 0x20, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x52,
	0x32, 0x50, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0xa7,
	0x01, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x33, 0x30, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x5e, 0x92,
	0x41, 0x58, 0x32, 0x56, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x5f, 0x92, 0x41, 0x59, 0x32, 0x57, 0x54,
	0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x5c, 0x92, 0x41, 0x56, 0x32, 0x54, 0x54, 0x68,
	0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x5a, 0x92, 0x41, 0x54, 0x32, 0x52, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x7e, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x41, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e,
	0xe0, 0x41, 0x01, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x2c, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x36, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x39,
	0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbd, 0x01, 0x0a, 0x08, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x5c, 0x92,
	0x41, 0x56, 0x32, 0x54, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x07, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x41, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x2f,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xb5, 0x01, 0x0a, 0x07, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x56, 0x92, 0x41, 0x50, 0x32, 0x4e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xe0, 0x41, 0x03, 0x52, 0x07,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x2d, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x44, 0x32, 0x42, 0x54, 0x68, 0x65, 0x20,
	0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0xe0, 0x41,
	0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdb, 0x0d, 0x0a, 0x20, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x02, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x92, 0x41, 0x66, 0x12, 0x22, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x38, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xbc, 0x02, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x4a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30,
	0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01,
	0x92, 0x41, 0x5d, 0x12, 0x1f, 0x47, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x35, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x6e,
	0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x03, 0x47, 0x65, 0x74,
	0xf2, 0xd7, 0x02, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xcc, 0x02, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x35,
	0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa8, 0x01, 0x92, 0x41, 0x67, 0x12, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0xf2, 0xd7, 0x02, 0x13,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xdc, 0x02, 0x0a, 0x07, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x4e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x92, 0x41, 0x65, 0x12, 0x22, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x1a, 0x36, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x32, 0x24, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0xcb, 0x02, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x4d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x35, 0x30, 0x35, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x92, 0x41, 0x62, 0x12, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x35, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x2a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x14, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x2c, 0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea,
	0xd7, 0x02, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x90, 0xd8, 0x02, 0x03, 0x42, 0x86, 0x05, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x35, 0x30, 0x35, 0x92, 0x41, 0xb7, 0x04, 0x12, 0xeb, 0x02, 0x0a, 0x26, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x41,
	0x50, 0x49, 0x12, 0xf0, 0x01, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a,
	0x54, 0x68, 0x65, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x27, 0x73,
	0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x73,
	0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x28, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2c, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x29, 0x2e, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32,
	0x30, 0x32, 0x35, 0x30, 0x35, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43,
	0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a,
	0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x42, 0x0a, 0x1b, 0x4b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_alerting_public_v202505_silencing_proto_rawDescOnce sync.Once
	file_kentik_alerting_public_v202505_silencing_proto_rawDescData = file_kentik_alerting_public_v202505_silencing_proto_rawDesc
)

func file_kentik_alerting_public_v202505_silencing_proto_rawDescGZIP() []byte {
	file_kentik_alerting_public_v202505_silencing_proto_rawDescOnce.Do(func() {
		file_kentik_alerting_public_v202505_silencing_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_alerting_public_v202505_silencing_proto_rawDescData)
	})
	return file_kentik_alerting_public_v202505_silencing_proto_rawDescData
}

var file_kentik_alerting_public_v202505_silencing_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kentik_alerting_public_v202505_silencing_proto_goTypes = []interface{}{
	(*AlertSilenceNotificationsDefinition)(nil),             // 0: kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition
	(*AlertSilenceNotificationsServiceCreateRequest)(nil),   // 1: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceCreateRequest
	(*AlertSilenceNotificationsServiceCreateResponse)(nil),  // 2: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceCreateResponse
	(*AlertSilenceNotificationsServiceGetRequest)(nil),      // 3: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceGetRequest
	(*AlertSilenceNotificationsServiceGetResponse)(nil),     // 4: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceGetResponse
	(*AlertSilenceNotificationsServiceListRequest)(nil),     // 5: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListRequest
	(*AlertSilenceNotificationFilters)(nil),                 // 6: kentik.alerting.public.v202505.AlertSilenceNotificationFilters
	(*AlertSilenceNotificationsServiceListResponse)(nil),    // 7: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListResponse
	(*AlertSilenceNotificationsServiceReplaceRequest)(nil),  // 8: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceReplaceRequest
	(*AlertSilenceNotificationsServiceReplaceResponse)(nil), // 9: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceReplaceResponse
	(*AlertSilenceNotificationsServiceDeleteRequest)(nil),   // 10: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceDeleteRequest
	(*AlertSilenceNotificationsServiceDeleteResponse)(nil),  // 11: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceDeleteResponse
	(*Source)(nil),                   // 12: kentik.alerting.public.v202505.Source
	(*v202303.KeyValue)(nil),         // 13: kentik.alerting.types.v202303.KeyValue
	(*timestamppb.Timestamp)(nil),    // 14: google.protobuf.Timestamp
	(*v202506.PaginationConfig)(nil), // 15: kentik.alerting.types.v202506.PaginationConfig
	(*v202506.SortingConfig)(nil),    // 16: kentik.alerting.types.v202506.SortingConfig
	(*v202303.TimeRange)(nil),        // 17: kentik.alerting.types.v202303.TimeRange
	(*v202506.PaginationInfo)(nil),   // 18: kentik.alerting.types.v202506.PaginationInfo
}
var file_kentik_alerting_public_v202505_silencing_proto_depIdxs = []int32{
	12, // 0: kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition.source:type_name -> kentik.alerting.public.v202505.Source
	13, // 1: kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition.key:type_name -> kentik.alerting.types.v202303.KeyValue
	14, // 2: kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition.start_time_at:type_name -> google.protobuf.Timestamp
	14, // 3: kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition.end_time_at:type_name -> google.protobuf.Timestamp
	14, // 4: kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition.created_at:type_name -> google.protobuf.Timestamp
	14, // 5: kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition.modified_at:type_name -> google.protobuf.Timestamp
	0,  // 6: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceCreateRequest.silence:type_name -> kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition
	0,  // 7: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceCreateResponse.silence:type_name -> kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition
	0,  // 8: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceGetResponse.silence:type_name -> kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition
	15, // 9: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListRequest.pagination:type_name -> kentik.alerting.types.v202506.PaginationConfig
	16, // 10: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListRequest.sorting:type_name -> kentik.alerting.types.v202506.SortingConfig
	6,  // 11: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListRequest.filters:type_name -> kentik.alerting.public.v202505.AlertSilenceNotificationFilters
	12, // 12: kentik.alerting.public.v202505.AlertSilenceNotificationFilters.sources:type_name -> kentik.alerting.public.v202505.Source
	17, // 13: kentik.alerting.public.v202505.AlertSilenceNotificationFilters.created_at:type_name -> kentik.alerting.types.v202303.TimeRange
	17, // 14: kentik.alerting.public.v202505.AlertSilenceNotificationFilters.modified_at:type_name -> kentik.alerting.types.v202303.TimeRange
	17, // 15: kentik.alerting.public.v202505.AlertSilenceNotificationFilters.start_time_at:type_name -> kentik.alerting.types.v202303.TimeRange
	17, // 16: kentik.alerting.public.v202505.AlertSilenceNotificationFilters.end_time_at:type_name -> kentik.alerting.types.v202303.TimeRange
	13, // 17: kentik.alerting.public.v202505.AlertSilenceNotificationFilters.keys:type_name -> kentik.alerting.types.v202303.KeyValue
	18, // 18: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListResponse.pagination:type_name -> kentik.alerting.types.v202506.PaginationInfo
	0,  // 19: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListResponse.silences:type_name -> kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition
	0,  // 20: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceReplaceRequest.silence:type_name -> kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition
	0,  // 21: kentik.alerting.public.v202505.AlertSilenceNotificationsServiceReplaceResponse.silence:type_name -> kentik.alerting.public.v202505.AlertSilenceNotificationsDefinition
	1,  // 22: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Create:input_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceCreateRequest
	3,  // 23: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Get:input_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceGetRequest
	5,  // 24: kentik.alerting.public.v202505.AlertSilenceNotificationsService.List:input_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListRequest
	8,  // 25: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Replace:input_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceReplaceRequest
	10, // 26: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Delete:input_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceDeleteRequest
	2,  // 27: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Create:output_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceCreateResponse
	4,  // 28: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Get:output_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceGetResponse
	7,  // 29: kentik.alerting.public.v202505.AlertSilenceNotificationsService.List:output_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceListResponse
	9,  // 30: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Replace:output_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceReplaceResponse
	11, // 31: kentik.alerting.public.v202505.AlertSilenceNotificationsService.Delete:output_type -> kentik.alerting.public.v202505.AlertSilenceNotificationsServiceDeleteResponse
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_kentik_alerting_public_v202505_silencing_proto_init() }
func file_kentik_alerting_public_v202505_silencing_proto_init() {
	if File_kentik_alerting_public_v202505_silencing_proto != nil {
		return
	}
	file_kentik_alerting_public_v202505_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceReplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceReplaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_alerting_public_v202505_silencing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertSilenceNotificationsServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_alerting_public_v202505_silencing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_alerting_public_v202505_silencing_proto_goTypes,
		DependencyIndexes: file_kentik_alerting_public_v202505_silencing_proto_depIdxs,
		MessageInfos:      file_kentik_alerting_public_v202505_silencing_proto_msgTypes,
	}.Build()
	File_kentik_alerting_public_v202505_silencing_proto = out.File
	file_kentik_alerting_public_v202505_silencing_proto_rawDesc = nil
	file_kentik_alerting_public_v202505_silencing_proto_goTypes = nil
	file_kentik_alerting_public_v202505_silencing_proto_depIdxs = nil
}
