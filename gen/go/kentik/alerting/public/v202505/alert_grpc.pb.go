// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/alerting/public/v202505/alert.proto

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlertService_Get_FullMethodName   = "/kentik.alerting.public.v202505.AlertService/Get"
	AlertService_List_FullMethodName  = "/kentik.alerting.public.v202505.AlertService/List"
	AlertService_Ack_FullMethodName   = "/kentik.alerting.public.v202505.AlertService/Ack"
	AlertService_UnAck_FullMethodName = "/kentik.alerting.public.v202505.AlertService/UnAck"
	AlertService_Clear_FullMethodName = "/kentik.alerting.public.v202505.AlertService/Clear"
)

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertServiceClient interface {
	Get(ctx context.Context, in *AlertServiceGetRequest, opts ...grpc.CallOption) (*AlertServiceGetResponse, error)
	List(ctx context.Context, in *AlertServiceListRequest, opts ...grpc.CallOption) (*AlertServiceListResponse, error)
	Ack(ctx context.Context, in *AlertServiceAckRequest, opts ...grpc.CallOption) (*AlertServiceAckResponse, error)
	UnAck(ctx context.Context, in *AlertServiceUnAckRequest, opts ...grpc.CallOption) (*AlertServiceUnAckResponse, error)
	Clear(ctx context.Context, in *AlertServiceClearRequest, opts ...grpc.CallOption) (*AlertServiceClearResponse, error)
}

type alertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertServiceClient(cc grpc.ClientConnInterface) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) Get(ctx context.Context, in *AlertServiceGetRequest, opts ...grpc.CallOption) (*AlertServiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertServiceGetResponse)
	err := c.cc.Invoke(ctx, AlertService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) List(ctx context.Context, in *AlertServiceListRequest, opts ...grpc.CallOption) (*AlertServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertServiceListResponse)
	err := c.cc.Invoke(ctx, AlertService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) Ack(ctx context.Context, in *AlertServiceAckRequest, opts ...grpc.CallOption) (*AlertServiceAckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertServiceAckResponse)
	err := c.cc.Invoke(ctx, AlertService_Ack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UnAck(ctx context.Context, in *AlertServiceUnAckRequest, opts ...grpc.CallOption) (*AlertServiceUnAckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertServiceUnAckResponse)
	err := c.cc.Invoke(ctx, AlertService_UnAck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) Clear(ctx context.Context, in *AlertServiceClearRequest, opts ...grpc.CallOption) (*AlertServiceClearResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertServiceClearResponse)
	err := c.cc.Invoke(ctx, AlertService_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServiceServer is the server API for AlertService service.
// All implementations should embed UnimplementedAlertServiceServer
// for forward compatibility.
type AlertServiceServer interface {
	Get(context.Context, *AlertServiceGetRequest) (*AlertServiceGetResponse, error)
	List(context.Context, *AlertServiceListRequest) (*AlertServiceListResponse, error)
	Ack(context.Context, *AlertServiceAckRequest) (*AlertServiceAckResponse, error)
	UnAck(context.Context, *AlertServiceUnAckRequest) (*AlertServiceUnAckResponse, error)
	Clear(context.Context, *AlertServiceClearRequest) (*AlertServiceClearResponse, error)
}

// UnimplementedAlertServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlertServiceServer struct{}

func (UnimplementedAlertServiceServer) Get(context.Context, *AlertServiceGetRequest) (*AlertServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAlertServiceServer) List(context.Context, *AlertServiceListRequest) (*AlertServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAlertServiceServer) Ack(context.Context, *AlertServiceAckRequest) (*AlertServiceAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedAlertServiceServer) UnAck(context.Context, *AlertServiceUnAckRequest) (*AlertServiceUnAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAck not implemented")
}
func (UnimplementedAlertServiceServer) Clear(context.Context, *AlertServiceClearRequest) (*AlertServiceClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedAlertServiceServer) testEmbeddedByValue() {}

// UnsafeAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServiceServer will
// result in compilation errors.
type UnsafeAlertServiceServer interface {
	mustEmbedUnimplementedAlertServiceServer()
}

func RegisterAlertServiceServer(s grpc.ServiceRegistrar, srv AlertServiceServer) {
	// If the following call pancis, it indicates UnimplementedAlertServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlertService_ServiceDesc, srv)
}

func _AlertService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).Get(ctx, req.(*AlertServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).List(ctx, req.(*AlertServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertServiceAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).Ack(ctx, req.(*AlertServiceAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_UnAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertServiceUnAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).UnAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_UnAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).UnAck(ctx, req.(*AlertServiceUnAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertServiceClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertService_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).Clear(ctx, req.(*AlertServiceClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertService_ServiceDesc is the grpc.ServiceDesc for AlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AlertService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AlertService_List_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _AlertService_Ack_Handler,
		},
		{
			MethodName: "UnAck",
			Handler:    _AlertService_UnAck_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _AlertService_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/alert.proto",
}
