// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kentik/alerting/public/v202505/suppressions.proto

package v202505

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SuppressionService_Create_FullMethodName  = "/kentik.alerting.public.v202505.SuppressionService/Create"
	SuppressionService_Get_FullMethodName     = "/kentik.alerting.public.v202505.SuppressionService/Get"
	SuppressionService_List_FullMethodName    = "/kentik.alerting.public.v202505.SuppressionService/List"
	SuppressionService_Replace_FullMethodName = "/kentik.alerting.public.v202505.SuppressionService/Replace"
	SuppressionService_Delete_FullMethodName  = "/kentik.alerting.public.v202505.SuppressionService/Delete"
)

// SuppressionServiceClient is the client API for SuppressionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuppressionServiceClient interface {
	Create(ctx context.Context, in *SuppressionServiceCreateRequest, opts ...grpc.CallOption) (*SuppressionServiceCreateResponse, error)
	Get(ctx context.Context, in *SuppressionServiceGetRequest, opts ...grpc.CallOption) (*SuppressionServiceGetResponse, error)
	List(ctx context.Context, in *SuppressionServiceListRequest, opts ...grpc.CallOption) (*SuppressionServiceListResponse, error)
	Replace(ctx context.Context, in *SuppressionServiceReplaceRequest, opts ...grpc.CallOption) (*SuppressionServiceReplaceResponse, error)
	Delete(ctx context.Context, in *SuppressionServiceDeleteRequest, opts ...grpc.CallOption) (*SuppressionServiceDeleteResponse, error)
}

type suppressionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuppressionServiceClient(cc grpc.ClientConnInterface) SuppressionServiceClient {
	return &suppressionServiceClient{cc}
}

func (c *suppressionServiceClient) Create(ctx context.Context, in *SuppressionServiceCreateRequest, opts ...grpc.CallOption) (*SuppressionServiceCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuppressionServiceCreateResponse)
	err := c.cc.Invoke(ctx, SuppressionService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suppressionServiceClient) Get(ctx context.Context, in *SuppressionServiceGetRequest, opts ...grpc.CallOption) (*SuppressionServiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuppressionServiceGetResponse)
	err := c.cc.Invoke(ctx, SuppressionService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suppressionServiceClient) List(ctx context.Context, in *SuppressionServiceListRequest, opts ...grpc.CallOption) (*SuppressionServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuppressionServiceListResponse)
	err := c.cc.Invoke(ctx, SuppressionService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suppressionServiceClient) Replace(ctx context.Context, in *SuppressionServiceReplaceRequest, opts ...grpc.CallOption) (*SuppressionServiceReplaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuppressionServiceReplaceResponse)
	err := c.cc.Invoke(ctx, SuppressionService_Replace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suppressionServiceClient) Delete(ctx context.Context, in *SuppressionServiceDeleteRequest, opts ...grpc.CallOption) (*SuppressionServiceDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuppressionServiceDeleteResponse)
	err := c.cc.Invoke(ctx, SuppressionService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuppressionServiceServer is the server API for SuppressionService service.
// All implementations should embed UnimplementedSuppressionServiceServer
// for forward compatibility.
type SuppressionServiceServer interface {
	Create(context.Context, *SuppressionServiceCreateRequest) (*SuppressionServiceCreateResponse, error)
	Get(context.Context, *SuppressionServiceGetRequest) (*SuppressionServiceGetResponse, error)
	List(context.Context, *SuppressionServiceListRequest) (*SuppressionServiceListResponse, error)
	Replace(context.Context, *SuppressionServiceReplaceRequest) (*SuppressionServiceReplaceResponse, error)
	Delete(context.Context, *SuppressionServiceDeleteRequest) (*SuppressionServiceDeleteResponse, error)
}

// UnimplementedSuppressionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuppressionServiceServer struct{}

func (UnimplementedSuppressionServiceServer) Create(context.Context, *SuppressionServiceCreateRequest) (*SuppressionServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSuppressionServiceServer) Get(context.Context, *SuppressionServiceGetRequest) (*SuppressionServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSuppressionServiceServer) List(context.Context, *SuppressionServiceListRequest) (*SuppressionServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSuppressionServiceServer) Replace(context.Context, *SuppressionServiceReplaceRequest) (*SuppressionServiceReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedSuppressionServiceServer) Delete(context.Context, *SuppressionServiceDeleteRequest) (*SuppressionServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSuppressionServiceServer) testEmbeddedByValue() {}

// UnsafeSuppressionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuppressionServiceServer will
// result in compilation errors.
type UnsafeSuppressionServiceServer interface {
	mustEmbedUnimplementedSuppressionServiceServer()
}

func RegisterSuppressionServiceServer(s grpc.ServiceRegistrar, srv SuppressionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSuppressionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SuppressionService_ServiceDesc, srv)
}

func _SuppressionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressionServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuppressionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuppressionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuppressionServiceServer).Create(ctx, req.(*SuppressionServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuppressionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressionServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuppressionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuppressionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuppressionServiceServer).Get(ctx, req.(*SuppressionServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuppressionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressionServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuppressionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuppressionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuppressionServiceServer).List(ctx, req.(*SuppressionServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuppressionService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressionServiceReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuppressionServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuppressionService_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuppressionServiceServer).Replace(ctx, req.(*SuppressionServiceReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuppressionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressionServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuppressionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuppressionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuppressionServiceServer).Delete(ctx, req.(*SuppressionServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuppressionService_ServiceDesc is the grpc.ServiceDesc for SuppressionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuppressionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.alerting.public.v202505.SuppressionService",
	HandlerType: (*SuppressionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SuppressionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SuppressionService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SuppressionService_List_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _SuppressionService_Replace_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SuppressionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/alerting/public/v202505/suppressions.proto",
}
