// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package custom_application

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomApplicationServiceClient is the client API for CustomApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomApplicationServiceClient interface {
	CreateCustomApplication(ctx context.Context, in *CreateCustomApplicationRequest, opts ...grpc.CallOption) (*CreateCustomApplicationResponse, error)
	ListCustomApplications(ctx context.Context, in *ListCustomApplicationsRequest, opts ...grpc.CallOption) (*ListCustomApplicationsResponse, error)
	GetCustomApplication(ctx context.Context, in *GetCustomApplicationRequest, opts ...grpc.CallOption) (*GetCustomApplicationResponse, error)
	UpdateCustomApplication(ctx context.Context, in *UpdateCustomApplicationRequest, opts ...grpc.CallOption) (*UpdateCustomApplicationResponse, error)
	DeleteCustomApplication(ctx context.Context, in *DeleteCustomApplicationRequest, opts ...grpc.CallOption) (*DeleteCustomApplicationResponse, error)
}

type customApplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomApplicationServiceClient(cc grpc.ClientConnInterface) CustomApplicationServiceClient {
	return &customApplicationServiceClient{cc}
}

func (c *customApplicationServiceClient) CreateCustomApplication(ctx context.Context, in *CreateCustomApplicationRequest, opts ...grpc.CallOption) (*CreateCustomApplicationResponse, error) {
	out := new(CreateCustomApplicationResponse)
	err := c.cc.Invoke(ctx, "/kentik.custom_application.v202501alpha1.CustomApplicationService/CreateCustomApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customApplicationServiceClient) ListCustomApplications(ctx context.Context, in *ListCustomApplicationsRequest, opts ...grpc.CallOption) (*ListCustomApplicationsResponse, error) {
	out := new(ListCustomApplicationsResponse)
	err := c.cc.Invoke(ctx, "/kentik.custom_application.v202501alpha1.CustomApplicationService/ListCustomApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customApplicationServiceClient) GetCustomApplication(ctx context.Context, in *GetCustomApplicationRequest, opts ...grpc.CallOption) (*GetCustomApplicationResponse, error) {
	out := new(GetCustomApplicationResponse)
	err := c.cc.Invoke(ctx, "/kentik.custom_application.v202501alpha1.CustomApplicationService/GetCustomApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customApplicationServiceClient) UpdateCustomApplication(ctx context.Context, in *UpdateCustomApplicationRequest, opts ...grpc.CallOption) (*UpdateCustomApplicationResponse, error) {
	out := new(UpdateCustomApplicationResponse)
	err := c.cc.Invoke(ctx, "/kentik.custom_application.v202501alpha1.CustomApplicationService/UpdateCustomApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customApplicationServiceClient) DeleteCustomApplication(ctx context.Context, in *DeleteCustomApplicationRequest, opts ...grpc.CallOption) (*DeleteCustomApplicationResponse, error) {
	out := new(DeleteCustomApplicationResponse)
	err := c.cc.Invoke(ctx, "/kentik.custom_application.v202501alpha1.CustomApplicationService/DeleteCustomApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomApplicationServiceServer is the server API for CustomApplicationService service.
// All implementations should embed UnimplementedCustomApplicationServiceServer
// for forward compatibility
type CustomApplicationServiceServer interface {
	CreateCustomApplication(context.Context, *CreateCustomApplicationRequest) (*CreateCustomApplicationResponse, error)
	ListCustomApplications(context.Context, *ListCustomApplicationsRequest) (*ListCustomApplicationsResponse, error)
	GetCustomApplication(context.Context, *GetCustomApplicationRequest) (*GetCustomApplicationResponse, error)
	UpdateCustomApplication(context.Context, *UpdateCustomApplicationRequest) (*UpdateCustomApplicationResponse, error)
	DeleteCustomApplication(context.Context, *DeleteCustomApplicationRequest) (*DeleteCustomApplicationResponse, error)
}

// UnimplementedCustomApplicationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCustomApplicationServiceServer struct {
}

func (UnimplementedCustomApplicationServiceServer) CreateCustomApplication(context.Context, *CreateCustomApplicationRequest) (*CreateCustomApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomApplication not implemented")
}
func (UnimplementedCustomApplicationServiceServer) ListCustomApplications(context.Context, *ListCustomApplicationsRequest) (*ListCustomApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomApplications not implemented")
}
func (UnimplementedCustomApplicationServiceServer) GetCustomApplication(context.Context, *GetCustomApplicationRequest) (*GetCustomApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomApplication not implemented")
}
func (UnimplementedCustomApplicationServiceServer) UpdateCustomApplication(context.Context, *UpdateCustomApplicationRequest) (*UpdateCustomApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomApplication not implemented")
}
func (UnimplementedCustomApplicationServiceServer) DeleteCustomApplication(context.Context, *DeleteCustomApplicationRequest) (*DeleteCustomApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomApplication not implemented")
}

// UnsafeCustomApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomApplicationServiceServer will
// result in compilation errors.
type UnsafeCustomApplicationServiceServer interface {
	mustEmbedUnimplementedCustomApplicationServiceServer()
}

func RegisterCustomApplicationServiceServer(s grpc.ServiceRegistrar, srv CustomApplicationServiceServer) {
	s.RegisterService(&CustomApplicationService_ServiceDesc, srv)
}

func _CustomApplicationService_CreateCustomApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomApplicationServiceServer).CreateCustomApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.custom_application.v202501alpha1.CustomApplicationService/CreateCustomApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomApplicationServiceServer).CreateCustomApplication(ctx, req.(*CreateCustomApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomApplicationService_ListCustomApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomApplicationServiceServer).ListCustomApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.custom_application.v202501alpha1.CustomApplicationService/ListCustomApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomApplicationServiceServer).ListCustomApplications(ctx, req.(*ListCustomApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomApplicationService_GetCustomApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomApplicationServiceServer).GetCustomApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.custom_application.v202501alpha1.CustomApplicationService/GetCustomApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomApplicationServiceServer).GetCustomApplication(ctx, req.(*GetCustomApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomApplicationService_UpdateCustomApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomApplicationServiceServer).UpdateCustomApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.custom_application.v202501alpha1.CustomApplicationService/UpdateCustomApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomApplicationServiceServer).UpdateCustomApplication(ctx, req.(*UpdateCustomApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomApplicationService_DeleteCustomApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomApplicationServiceServer).DeleteCustomApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.custom_application.v202501alpha1.CustomApplicationService/DeleteCustomApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomApplicationServiceServer).DeleteCustomApplication(ctx, req.(*DeleteCustomApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomApplicationService_ServiceDesc is the grpc.ServiceDesc for CustomApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.custom_application.v202501alpha1.CustomApplicationService",
	HandlerType: (*CustomApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomApplication",
			Handler:    _CustomApplicationService_CreateCustomApplication_Handler,
		},
		{
			MethodName: "ListCustomApplications",
			Handler:    _CustomApplicationService_ListCustomApplications_Handler,
		},
		{
			MethodName: "GetCustomApplication",
			Handler:    _CustomApplicationService_GetCustomApplication_Handler,
		},
		{
			MethodName: "UpdateCustomApplication",
			Handler:    _CustomApplicationService_UpdateCustomApplication_Handler,
		},
		{
			MethodName: "DeleteCustomApplication",
			Handler:    _CustomApplicationService_DeleteCustomApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/custom_application/v202501alpha1/custom_application.proto",
}
