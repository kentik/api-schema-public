// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package iface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterfaceServiceClient is the client API for InterfaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceServiceClient interface {
	ManualClassify(ctx context.Context, in *ManualClassifyRequest, opts ...grpc.CallOption) (*ManualClassifyResponse, error)
	ListInterface(ctx context.Context, in *ListInterfaceRequest, opts ...grpc.CallOption) (*ListInterfaceResponse, error)
	GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error)
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*UpdateInterfaceResponse, error)
	DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteInterfaceResponse, error)
}

type interfaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceServiceClient(cc grpc.ClientConnInterface) InterfaceServiceClient {
	return &interfaceServiceClient{cc}
}

func (c *interfaceServiceClient) ManualClassify(ctx context.Context, in *ManualClassifyRequest, opts ...grpc.CallOption) (*ManualClassifyResponse, error) {
	out := new(ManualClassifyResponse)
	err := c.cc.Invoke(ctx, "/kentik.interface.v202108alpha1.InterfaceService/ManualClassify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) ListInterface(ctx context.Context, in *ListInterfaceRequest, opts ...grpc.CallOption) (*ListInterfaceResponse, error) {
	out := new(ListInterfaceResponse)
	err := c.cc.Invoke(ctx, "/kentik.interface.v202108alpha1.InterfaceService/ListInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, "/kentik.interface.v202108alpha1.InterfaceService/GetInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error) {
	out := new(CreateInterfaceResponse)
	err := c.cc.Invoke(ctx, "/kentik.interface.v202108alpha1.InterfaceService/CreateInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*UpdateInterfaceResponse, error) {
	out := new(UpdateInterfaceResponse)
	err := c.cc.Invoke(ctx, "/kentik.interface.v202108alpha1.InterfaceService/UpdateInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteInterfaceResponse, error) {
	out := new(DeleteInterfaceResponse)
	err := c.cc.Invoke(ctx, "/kentik.interface.v202108alpha1.InterfaceService/DeleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceServiceServer is the server API for InterfaceService service.
// All implementations should embed UnimplementedInterfaceServiceServer
// for forward compatibility
type InterfaceServiceServer interface {
	ManualClassify(context.Context, *ManualClassifyRequest) (*ManualClassifyResponse, error)
	ListInterface(context.Context, *ListInterfaceRequest) (*ListInterfaceResponse, error)
	GetInterface(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error)
	CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error)
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*UpdateInterfaceResponse, error)
	DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteInterfaceResponse, error)
}

// UnimplementedInterfaceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInterfaceServiceServer struct {
}

func (UnimplementedInterfaceServiceServer) ManualClassify(context.Context, *ManualClassifyRequest) (*ManualClassifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualClassify not implemented")
}
func (UnimplementedInterfaceServiceServer) ListInterface(context.Context, *ListInterfaceRequest) (*ListInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterface not implemented")
}
func (UnimplementedInterfaceServiceServer) GetInterface(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (UnimplementedInterfaceServiceServer) CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (UnimplementedInterfaceServiceServer) UpdateInterface(context.Context, *UpdateInterfaceRequest) (*UpdateInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterface not implemented")
}
func (UnimplementedInterfaceServiceServer) DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}

// UnsafeInterfaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceServiceServer will
// result in compilation errors.
type UnsafeInterfaceServiceServer interface {
	mustEmbedUnimplementedInterfaceServiceServer()
}

func RegisterInterfaceServiceServer(s grpc.ServiceRegistrar, srv InterfaceServiceServer) {
	s.RegisterService(&InterfaceService_ServiceDesc, srv)
}

func _InterfaceService_ManualClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).ManualClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.interface.v202108alpha1.InterfaceService/ManualClassify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).ManualClassify(ctx, req.(*ManualClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_ListInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).ListInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.interface.v202108alpha1.InterfaceService/ListInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).ListInterface(ctx, req.(*ListInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.interface.v202108alpha1.InterfaceService/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).GetInterface(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.interface.v202108alpha1.InterfaceService/CreateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).CreateInterface(ctx, req.(*CreateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.interface.v202108alpha1.InterfaceService/UpdateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.interface.v202108alpha1.InterfaceService/DeleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).DeleteInterface(ctx, req.(*DeleteInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterfaceService_ServiceDesc is the grpc.ServiceDesc for InterfaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.interface.v202108alpha1.InterfaceService",
	HandlerType: (*InterfaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManualClassify",
			Handler:    _InterfaceService_ManualClassify_Handler,
		},
		{
			MethodName: "ListInterface",
			Handler:    _InterfaceService_ListInterface_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _InterfaceService_GetInterface_Handler,
		},
		{
			MethodName: "CreateInterface",
			Handler:    _InterfaceService_CreateInterface_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _InterfaceService_UpdateInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _InterfaceService_DeleteInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/interface/v202108alpha1/interface.proto",
}
