// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/interface/v202108alpha1/interface.proto

package iface

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConnectivityType int32

const (
	ConnectivityType_CONNECTIVITY_TYPE_UNSPECIFIED              ConnectivityType = 0
	ConnectivityType_CONNECTIVITY_TYPE_AGGREGATION_INTERCONNECT ConnectivityType = 1
	ConnectivityType_CONNECTIVITY_TYPE_AVAILABLE                ConnectivityType = 2
	ConnectivityType_CONNECTIVITY_TYPE_BACKBONE                 ConnectivityType = 3
	ConnectivityType_CONNECTIVITY_TYPE_CLOUD_INTERCONNECT       ConnectivityType = 4
	ConnectivityType_CONNECTIVITY_TYPE_CUSTOMER                 ConnectivityType = 5
	ConnectivityType_CONNECTIVITY_TYPE_DATACENTER_FABRIC        ConnectivityType = 6
	ConnectivityType_CONNECTIVITY_TYPE_DATACENTER_INTERCONNECT  ConnectivityType = 7
	ConnectivityType_CONNECTIVITY_TYPE_EMBEDDED_CACHE           ConnectivityType = 8
	ConnectivityType_CONNECTIVITY_TYPE_FREE_PNI                 ConnectivityType = 9
	ConnectivityType_CONNECTIVITY_TYPE_HOST                     ConnectivityType = 10
	ConnectivityType_CONNECTIVITY_TYPE_IX                       ConnectivityType = 11
	ConnectivityType_CONNECTIVITY_TYPE_OTHER                    ConnectivityType = 12
	ConnectivityType_CONNECTIVITY_TYPE_PAID_PNI                 ConnectivityType = 13
	ConnectivityType_CONNECTIVITY_TYPE_RESERVED                 ConnectivityType = 14
	ConnectivityType_CONNECTIVITY_TYPE_TRANSIT                  ConnectivityType = 15
	ConnectivityType_CONNECTIVITY_TYPE_VIRTUAL_CROSS_CONNECT    ConnectivityType = 16
)

// Enum value maps for ConnectivityType.
var (
	ConnectivityType_name = map[int32]string{
		0:  "CONNECTIVITY_TYPE_UNSPECIFIED",
		1:  "CONNECTIVITY_TYPE_AGGREGATION_INTERCONNECT",
		2:  "CONNECTIVITY_TYPE_AVAILABLE",
		3:  "CONNECTIVITY_TYPE_BACKBONE",
		4:  "CONNECTIVITY_TYPE_CLOUD_INTERCONNECT",
		5:  "CONNECTIVITY_TYPE_CUSTOMER",
		6:  "CONNECTIVITY_TYPE_DATACENTER_FABRIC",
		7:  "CONNECTIVITY_TYPE_DATACENTER_INTERCONNECT",
		8:  "CONNECTIVITY_TYPE_EMBEDDED_CACHE",
		9:  "CONNECTIVITY_TYPE_FREE_PNI",
		10: "CONNECTIVITY_TYPE_HOST",
		11: "CONNECTIVITY_TYPE_IX",
		12: "CONNECTIVITY_TYPE_OTHER",
		13: "CONNECTIVITY_TYPE_PAID_PNI",
		14: "CONNECTIVITY_TYPE_RESERVED",
		15: "CONNECTIVITY_TYPE_TRANSIT",
		16: "CONNECTIVITY_TYPE_VIRTUAL_CROSS_CONNECT",
	}
	ConnectivityType_value = map[string]int32{
		"CONNECTIVITY_TYPE_UNSPECIFIED":              0,
		"CONNECTIVITY_TYPE_AGGREGATION_INTERCONNECT": 1,
		"CONNECTIVITY_TYPE_AVAILABLE":                2,
		"CONNECTIVITY_TYPE_BACKBONE":                 3,
		"CONNECTIVITY_TYPE_CLOUD_INTERCONNECT":       4,
		"CONNECTIVITY_TYPE_CUSTOMER":                 5,
		"CONNECTIVITY_TYPE_DATACENTER_FABRIC":        6,
		"CONNECTIVITY_TYPE_DATACENTER_INTERCONNECT":  7,
		"CONNECTIVITY_TYPE_EMBEDDED_CACHE":           8,
		"CONNECTIVITY_TYPE_FREE_PNI":                 9,
		"CONNECTIVITY_TYPE_HOST":                     10,
		"CONNECTIVITY_TYPE_IX":                       11,
		"CONNECTIVITY_TYPE_OTHER":                    12,
		"CONNECTIVITY_TYPE_PAID_PNI":                 13,
		"CONNECTIVITY_TYPE_RESERVED":                 14,
		"CONNECTIVITY_TYPE_TRANSIT":                  15,
		"CONNECTIVITY_TYPE_VIRTUAL_CROSS_CONNECT":    16,
	}
)

func (x ConnectivityType) Enum() *ConnectivityType {
	p := new(ConnectivityType)
	*p = x
	return p
}

func (x ConnectivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_interface_v202108alpha1_interface_proto_enumTypes[0].Descriptor()
}

func (ConnectivityType) Type() protoreflect.EnumType {
	return &file_kentik_interface_v202108alpha1_interface_proto_enumTypes[0]
}

func (x ConnectivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectivityType.Descriptor instead.
func (ConnectivityType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{0}
}

type NetworkBoundary int32

const (
	NetworkBoundary_NETWORK_BOUNDARY_UNSPECIFIED NetworkBoundary = 0
	NetworkBoundary_NETWORK_BOUNDARY_AUTO        NetworkBoundary = 1
	NetworkBoundary_NETWORK_BOUNDARY_INTERNAL    NetworkBoundary = 2
	NetworkBoundary_NETWORK_BOUNDARY_EXTERNAL    NetworkBoundary = 3
	NetworkBoundary_NETWORK_BOUNDARY_NONE        NetworkBoundary = 4
)

// Enum value maps for NetworkBoundary.
var (
	NetworkBoundary_name = map[int32]string{
		0: "NETWORK_BOUNDARY_UNSPECIFIED",
		1: "NETWORK_BOUNDARY_AUTO",
		2: "NETWORK_BOUNDARY_INTERNAL",
		3: "NETWORK_BOUNDARY_EXTERNAL",
		4: "NETWORK_BOUNDARY_NONE",
	}
	NetworkBoundary_value = map[string]int32{
		"NETWORK_BOUNDARY_UNSPECIFIED": 0,
		"NETWORK_BOUNDARY_AUTO":        1,
		"NETWORK_BOUNDARY_INTERNAL":    2,
		"NETWORK_BOUNDARY_EXTERNAL":    3,
		"NETWORK_BOUNDARY_NONE":        4,
	}
)

func (x NetworkBoundary) Enum() *NetworkBoundary {
	p := new(NetworkBoundary)
	*p = x
	return p
}

func (x NetworkBoundary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkBoundary) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_interface_v202108alpha1_interface_proto_enumTypes[1].Descriptor()
}

func (NetworkBoundary) Type() protoreflect.EnumType {
	return &file_kentik_interface_v202108alpha1_interface_proto_enumTypes[1]
}

func (x NetworkBoundary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkBoundary.Descriptor instead.
func (NetworkBoundary) EnumDescriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{1}
}

type IpFilter int32

const (
	IpFilter_IP_FILTER_UNSPECIFIED IpFilter = 0
	IpFilter_IP_FILTER_PRIVATE     IpFilter = 1
	IpFilter_IP_FILTER_PUBLIC      IpFilter = 2
	IpFilter_IP_FILTER_UNSET       IpFilter = 3
)

// Enum value maps for IpFilter.
var (
	IpFilter_name = map[int32]string{
		0: "IP_FILTER_UNSPECIFIED",
		1: "IP_FILTER_PRIVATE",
		2: "IP_FILTER_PUBLIC",
		3: "IP_FILTER_UNSET",
	}
	IpFilter_value = map[string]int32{
		"IP_FILTER_UNSPECIFIED": 0,
		"IP_FILTER_PRIVATE":     1,
		"IP_FILTER_PUBLIC":      2,
		"IP_FILTER_UNSET":       3,
	}
)

func (x IpFilter) Enum() *IpFilter {
	p := new(IpFilter)
	*p = x
	return p
}

func (x IpFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_interface_v202108alpha1_interface_proto_enumTypes[2].Descriptor()
}

func (IpFilter) Type() protoreflect.EnumType {
	return &file_kentik_interface_v202108alpha1_interface_proto_enumTypes[2]
}

func (x IpFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpFilter.Descriptor instead.
func (IpFilter) EnumDescriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{2}
}

type MatchAttribute int32

const (
	MatchAttribute_MATCH_ATTRIBUTE_UNSPECIFIED           MatchAttribute = 0
	MatchAttribute_MATCH_ATTRIBUTE_INTERFACE_DESCRIPTION MatchAttribute = 1
	MatchAttribute_MATCH_ATTRIBUTE_SNMP_ALIAS            MatchAttribute = 2
	MatchAttribute_MATCH_ATTRIBUTE_INTERFACE_IP          MatchAttribute = 3
)

// Enum value maps for MatchAttribute.
var (
	MatchAttribute_name = map[int32]string{
		0: "MATCH_ATTRIBUTE_UNSPECIFIED",
		1: "MATCH_ATTRIBUTE_INTERFACE_DESCRIPTION",
		2: "MATCH_ATTRIBUTE_SNMP_ALIAS",
		3: "MATCH_ATTRIBUTE_INTERFACE_IP",
	}
	MatchAttribute_value = map[string]int32{
		"MATCH_ATTRIBUTE_UNSPECIFIED":           0,
		"MATCH_ATTRIBUTE_INTERFACE_DESCRIPTION": 1,
		"MATCH_ATTRIBUTE_SNMP_ALIAS":            2,
		"MATCH_ATTRIBUTE_INTERFACE_IP":          3,
	}
)

func (x MatchAttribute) Enum() *MatchAttribute {
	p := new(MatchAttribute)
	*p = x
	return p
}

func (x MatchAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_interface_v202108alpha1_interface_proto_enumTypes[3].Descriptor()
}

func (MatchAttribute) Type() protoreflect.EnumType {
	return &file_kentik_interface_v202108alpha1_interface_proto_enumTypes[3]
}

func (x MatchAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchAttribute.Descriptor instead.
func (MatchAttribute) EnumDescriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{3}
}

type Operator int32

const (
	Operator_OPERATOR_UNSPECIFIED         Operator = 0
	Operator_OPERATOR_EQUALS              Operator = 1
	Operator_OPERATOR_CONTAINS            Operator = 2
	Operator_OPERATOR_REGEX               Operator = 3
	Operator_OPERATOR_CONTAINED_IN_SUBNET Operator = 4
	Operator_OPERATOR_IS_PUBLIC_IP        Operator = 5
	Operator_OPERATOR_IS_PRIVATE_IP       Operator = 6
	Operator_OPERATOR_NO_IP               Operator = 7
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_EQUALS",
		2: "OPERATOR_CONTAINS",
		3: "OPERATOR_REGEX",
		4: "OPERATOR_CONTAINED_IN_SUBNET",
		5: "OPERATOR_IS_PUBLIC_IP",
		6: "OPERATOR_IS_PRIVATE_IP",
		7: "OPERATOR_NO_IP",
	}
	Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED":         0,
		"OPERATOR_EQUALS":              1,
		"OPERATOR_CONTAINS":            2,
		"OPERATOR_REGEX":               3,
		"OPERATOR_CONTAINED_IN_SUBNET": 4,
		"OPERATOR_IS_PUBLIC_IP":        5,
		"OPERATOR_IS_PRIVATE_IP":       6,
		"OPERATOR_NO_IP":               7,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_interface_v202108alpha1_interface_proto_enumTypes[4].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_kentik_interface_v202108alpha1_interface_proto_enumTypes[4]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{4}
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of interface.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of device with this interface.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// SNMP ID.
	SnmpId string `protobuf:"bytes,3,opt,name=snmp_id,json=snmpId,proto3" json:"snmp_id,omitempty"`
	// Network speed in Mbps.
	SnmpSpeed int32 `protobuf:"varint,4,opt,name=snmp_speed,json=snmpSpeed,proto3" json:"snmp_speed,omitempty"`
	// Snmp Type.
	SnmpType int32 `protobuf:"varint,5,opt,name=snmp_type,json=snmpType,proto3" json:"snmp_type,omitempty"`
	// Interface alias.
	SnmpAlias string `protobuf:"bytes,6,opt,name=snmp_alias,json=snmpAlias,proto3" json:"snmp_alias,omitempty"`
	// IP of interface.
	InterfaceIp string `protobuf:"bytes,7,opt,name=interface_ip,json=interfaceIp,proto3" json:"interface_ip,omitempty"`
	// Readable string description of interface.
	InterfaceDescription string `protobuf:"bytes,8,opt,name=interface_description,json=interfaceDescription,proto3" json:"interface_description,omitempty"`
	// Create timestamp.
	Cdate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=cdate,proto3" json:"cdate,omitempty"`
	// Update Timestamp.
	Edate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=edate,proto3" json:"edate,omitempty"`
	// Subnet mask.
	InterfaceIpNetmask string `protobuf:"bytes,11,opt,name=interface_ip_netmask,json=interfaceIpNetmask,proto3" json:"interface_ip_netmask,omitempty"`
	// Type of network connectivity type.
	ConnectivityType ConnectivityType `protobuf:"varint,12,opt,name=connectivity_type,json=connectivityType,proto3,enum=kentik.interface.v202108alpha1.ConnectivityType" json:"connectivity_type,omitempty"`
	// Type of network boundary.
	NetworkBoundary NetworkBoundary `protobuf:"varint,13,opt,name=network_boundary,json=networkBoundary,proto3,enum=kentik.interface.v202108alpha1.NetworkBoundary" json:"network_boundary,omitempty"`
	// Top asn hops.
	TopNexthopAsns []int32 `protobuf:"varint,14,rep,packed,name=top_nexthop_asns,json=topNexthopAsns,proto3" json:"top_nexthop_asns,omitempty"`
	// Network provider.
	Provider string `protobuf:"bytes,15,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{0}
}

func (x *Interface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Interface) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Interface) GetSnmpId() string {
	if x != nil {
		return x.SnmpId
	}
	return ""
}

func (x *Interface) GetSnmpSpeed() int32 {
	if x != nil {
		return x.SnmpSpeed
	}
	return 0
}

func (x *Interface) GetSnmpType() int32 {
	if x != nil {
		return x.SnmpType
	}
	return 0
}

func (x *Interface) GetSnmpAlias() string {
	if x != nil {
		return x.SnmpAlias
	}
	return ""
}

func (x *Interface) GetInterfaceIp() string {
	if x != nil {
		return x.InterfaceIp
	}
	return ""
}

func (x *Interface) GetInterfaceDescription() string {
	if x != nil {
		return x.InterfaceDescription
	}
	return ""
}

func (x *Interface) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Interface) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Interface) GetInterfaceIpNetmask() string {
	if x != nil {
		return x.InterfaceIpNetmask
	}
	return ""
}

func (x *Interface) GetConnectivityType() ConnectivityType {
	if x != nil {
		return x.ConnectivityType
	}
	return ConnectivityType_CONNECTIVITY_TYPE_UNSPECIFIED
}

func (x *Interface) GetNetworkBoundary() NetworkBoundary {
	if x != nil {
		return x.NetworkBoundary
	}
	return NetworkBoundary_NETWORK_BOUNDARY_UNSPECIFIED
}

func (x *Interface) GetTopNexthopAsns() []int32 {
	if x != nil {
		return x.TopNexthopAsns
	}
	return nil
}

func (x *Interface) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type InterfaceClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classified       bool             `protobuf:"varint,1,opt,name=classified,proto3" json:"classified,omitempty"`
	ConnectivityType ConnectivityType `protobuf:"varint,2,opt,name=connectivity_type,json=connectivityType,proto3,enum=kentik.interface.v202108alpha1.ConnectivityType" json:"connectivity_type,omitempty"`
	NetworkBoundary  NetworkBoundary  `protobuf:"varint,3,opt,name=network_boundary,json=networkBoundary,proto3,enum=kentik.interface.v202108alpha1.NetworkBoundary" json:"network_boundary,omitempty"`
}

func (x *InterfaceClassification) Reset() {
	*x = InterfaceClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceClassification) ProtoMessage() {}

func (x *InterfaceClassification) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceClassification.ProtoReflect.Descriptor instead.
func (*InterfaceClassification) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{1}
}

func (x *InterfaceClassification) GetClassified() bool {
	if x != nil {
		return x.Classified
	}
	return false
}

func (x *InterfaceClassification) GetConnectivityType() ConnectivityType {
	if x != nil {
		return x.ConnectivityType
	}
	return ConnectivityType_CONNECTIVITY_TYPE_UNSPECIFIED
}

func (x *InterfaceClassification) GetNetworkBoundary() NetworkBoundary {
	if x != nil {
		return x.NetworkBoundary
	}
	return NetworkBoundary_NETWORK_BOUNDARY_UNSPECIFIED
}

type ClassifyCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count         int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ExternalCount int32 `protobuf:"varint,2,opt,name=external_count,json=externalCount,proto3" json:"external_count,omitempty"`
	FreePniCount  int32 `protobuf:"varint,3,opt,name=free_pni_count,json=freePniCount,proto3" json:"free_pni_count,omitempty"`
	IxCount       int32 `protobuf:"varint,4,opt,name=ix_count,json=ixCount,proto3" json:"ix_count,omitempty"`
	ProviderCount int32 `protobuf:"varint,5,opt,name=provider_count,json=providerCount,proto3" json:"provider_count,omitempty"`
	TransitCount  int32 `protobuf:"varint,6,opt,name=transit_count,json=transitCount,proto3" json:"transit_count,omitempty"`
}

func (x *ClassifyCounter) Reset() {
	*x = ClassifyCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifyCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifyCounter) ProtoMessage() {}

func (x *ClassifyCounter) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifyCounter.ProtoReflect.Descriptor instead.
func (*ClassifyCounter) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{2}
}

func (x *ClassifyCounter) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ClassifyCounter) GetExternalCount() int32 {
	if x != nil {
		return x.ExternalCount
	}
	return 0
}

func (x *ClassifyCounter) GetFreePniCount() int32 {
	if x != nil {
		return x.FreePniCount
	}
	return 0
}

func (x *ClassifyCounter) GetIxCount() int32 {
	if x != nil {
		return x.IxCount
	}
	return 0
}

func (x *ClassifyCounter) GetProviderCount() int32 {
	if x != nil {
		return x.ProviderCount
	}
	return 0
}

func (x *ClassifyCounter) GetTransitCount() int32 {
	if x != nil {
		return x.TransitCount
	}
	return 0
}

type InterfaceClassifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId       string   `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SnmpId         string   `protobuf:"bytes,2,opt,name=snmp_id,json=snmpId,proto3" json:"snmp_id,omitempty"`
	SnmpAlias      string   `protobuf:"bytes,3,opt,name=snmp_alias,json=snmpAlias,proto3" json:"snmp_alias,omitempty"`
	InterfaceIp    string   `protobuf:"bytes,4,opt,name=interface_ip,json=interfaceIp,proto3" json:"interface_ip,omitempty"`
	InterfaceIpAsn string   `protobuf:"bytes,5,opt,name=interface_ip_asn,json=interfaceIpAsn,proto3" json:"interface_ip_asn,omitempty"`
	IsInternalIp   bool     `protobuf:"varint,6,opt,name=is_internal_ip,json=isInternalIp,proto3" json:"is_internal_ip,omitempty"`
	IsInternalAsn  bool     `protobuf:"varint,7,opt,name=is_internal_asn,json=isInternalAsn,proto3" json:"is_internal_asn,omitempty"`
	TopNexthopAsns []string `protobuf:"bytes,8,rep,name=top_nexthop_asns,json=topNexthopAsns,proto3" json:"top_nexthop_asns,omitempty"`
	PdbGlobalName  string   `protobuf:"bytes,9,opt,name=pdb_global_name,json=pdbGlobalName,proto3" json:"pdb_global_name,omitempty"`
	// current classification
	AutoClassification *InterfaceClassification `protobuf:"bytes,10,opt,name=auto_classification,json=autoClassification,proto3" json:"auto_classification,omitempty"`
	// previous classification
	PreviousClassification       *InterfaceClassification `protobuf:"bytes,11,opt,name=previous_classification,json=previousClassification,proto3" json:"previous_classification,omitempty"`
	Provider                     string                   `protobuf:"bytes,12,opt,name=provider,proto3" json:"provider,omitempty"`
	NetworkBoundaryConfidence    int32                    `protobuf:"varint,13,opt,name=network_boundary_confidence,json=networkBoundaryConfidence,proto3" json:"network_boundary_confidence,omitempty"`
	ConnectivityTypeConfidence   int32                    `protobuf:"varint,14,opt,name=connectivity_type_confidence,json=connectivityTypeConfidence,proto3" json:"connectivity_type_confidence,omitempty"`
	ProviderConfidence           int32                    `protobuf:"varint,15,opt,name=provider_confidence,json=providerConfidence,proto3" json:"provider_confidence,omitempty"`
	AutoClassifiedProvider       bool                     `protobuf:"varint,16,opt,name=auto_classified_provider,json=autoClassifiedProvider,proto3" json:"auto_classified_provider,omitempty"`
	PreviouslyClassifiedProvider string                   `protobuf:"bytes,17,opt,name=previously_classified_provider,json=previouslyClassifiedProvider,proto3" json:"previously_classified_provider,omitempty"`
	PreviouslyClassifiedExternal bool                     `protobuf:"varint,18,opt,name=previously_classified_external,json=previouslyClassifiedExternal,proto3" json:"previously_classified_external,omitempty"`
	IpAsnMatched                 bool                     `protobuf:"varint,19,opt,name=ip_asn_matched,json=ipAsnMatched,proto3" json:"ip_asn_matched,omitempty"`
	IxMatched                    bool                     `protobuf:"varint,20,opt,name=ix_matched,json=ixMatched,proto3" json:"ix_matched,omitempty"`
	NexthopMatched               bool                     `protobuf:"varint,21,opt,name=nexthop_matched,json=nexthopMatched,proto3" json:"nexthop_matched,omitempty"`
	ConnectivityTypeMatched      bool                     `protobuf:"varint,22,opt,name=connectivity_type_matched,json=connectivityTypeMatched,proto3" json:"connectivity_type_matched,omitempty"`
	ProviderMatched              bool                     `protobuf:"varint,23,opt,name=provider_matched,json=providerMatched,proto3" json:"provider_matched,omitempty"`
	ChangedClassification        bool                     `protobuf:"varint,24,opt,name=changed_classification,json=changedClassification,proto3" json:"changed_classification,omitempty"`
}

func (x *InterfaceClassifyInfo) Reset() {
	*x = InterfaceClassifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceClassifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceClassifyInfo) ProtoMessage() {}

func (x *InterfaceClassifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceClassifyInfo.ProtoReflect.Descriptor instead.
func (*InterfaceClassifyInfo) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{3}
}

func (x *InterfaceClassifyInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetSnmpId() string {
	if x != nil {
		return x.SnmpId
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetSnmpAlias() string {
	if x != nil {
		return x.SnmpAlias
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetInterfaceIp() string {
	if x != nil {
		return x.InterfaceIp
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetInterfaceIpAsn() string {
	if x != nil {
		return x.InterfaceIpAsn
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetIsInternalIp() bool {
	if x != nil {
		return x.IsInternalIp
	}
	return false
}

func (x *InterfaceClassifyInfo) GetIsInternalAsn() bool {
	if x != nil {
		return x.IsInternalAsn
	}
	return false
}

func (x *InterfaceClassifyInfo) GetTopNexthopAsns() []string {
	if x != nil {
		return x.TopNexthopAsns
	}
	return nil
}

func (x *InterfaceClassifyInfo) GetPdbGlobalName() string {
	if x != nil {
		return x.PdbGlobalName
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetAutoClassification() *InterfaceClassification {
	if x != nil {
		return x.AutoClassification
	}
	return nil
}

func (x *InterfaceClassifyInfo) GetPreviousClassification() *InterfaceClassification {
	if x != nil {
		return x.PreviousClassification
	}
	return nil
}

func (x *InterfaceClassifyInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetNetworkBoundaryConfidence() int32 {
	if x != nil {
		return x.NetworkBoundaryConfidence
	}
	return 0
}

func (x *InterfaceClassifyInfo) GetConnectivityTypeConfidence() int32 {
	if x != nil {
		return x.ConnectivityTypeConfidence
	}
	return 0
}

func (x *InterfaceClassifyInfo) GetProviderConfidence() int32 {
	if x != nil {
		return x.ProviderConfidence
	}
	return 0
}

func (x *InterfaceClassifyInfo) GetAutoClassifiedProvider() bool {
	if x != nil {
		return x.AutoClassifiedProvider
	}
	return false
}

func (x *InterfaceClassifyInfo) GetPreviouslyClassifiedProvider() string {
	if x != nil {
		return x.PreviouslyClassifiedProvider
	}
	return ""
}

func (x *InterfaceClassifyInfo) GetPreviouslyClassifiedExternal() bool {
	if x != nil {
		return x.PreviouslyClassifiedExternal
	}
	return false
}

func (x *InterfaceClassifyInfo) GetIpAsnMatched() bool {
	if x != nil {
		return x.IpAsnMatched
	}
	return false
}

func (x *InterfaceClassifyInfo) GetIxMatched() bool {
	if x != nil {
		return x.IxMatched
	}
	return false
}

func (x *InterfaceClassifyInfo) GetNexthopMatched() bool {
	if x != nil {
		return x.NexthopMatched
	}
	return false
}

func (x *InterfaceClassifyInfo) GetConnectivityTypeMatched() bool {
	if x != nil {
		return x.ConnectivityTypeMatched
	}
	return false
}

func (x *InterfaceClassifyInfo) GetProviderMatched() bool {
	if x != nil {
		return x.ProviderMatched
	}
	return false
}

func (x *InterfaceClassifyInfo) GetChangedClassification() bool {
	if x != nil {
		return x.ChangedClassification
	}
	return false
}

type DeviceClassifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of device.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Total number of interfaces for this device.
	TotalInterfaces int32 `protobuf:"varint,2,opt,name=total_interfaces,json=totalInterfaces,proto3" json:"total_interfaces,omitempty"`
	// previously_classified_ counts.
	PreviouslyClassifiedCounter *ClassifyCounter `protobuf:"bytes,3,opt,name=previously_classified_counter,json=previouslyClassifiedCounter,proto3" json:"previously_classified_counter,omitempty"`
	// auto_classified_ counts.
	AutoClassifiedCounter        *ClassifyCounter `protobuf:"bytes,4,opt,name=auto_classified_counter,json=autoClassifiedCounter,proto3" json:"auto_classified_counter,omitempty"`
	ChangedClassificationCount   int32            `protobuf:"varint,15,opt,name=changed_classification_count,json=changedClassificationCount,proto3" json:"changed_classification_count,omitempty"`
	IpAsnMatchedCount            int32            `protobuf:"varint,16,opt,name=ip_asn_matched_count,json=ipAsnMatchedCount,proto3" json:"ip_asn_matched_count,omitempty"`
	IxMatchedCount               int32            `protobuf:"varint,17,opt,name=ix_matched_count,json=ixMatchedCount,proto3" json:"ix_matched_count,omitempty"`
	NexthopMatchedCount          int32            `protobuf:"varint,18,opt,name=nexthop_matched_count,json=nexthopMatchedCount,proto3" json:"nexthop_matched_count,omitempty"`
	ConnectivityTypeMatchedCount int32            `protobuf:"varint,19,opt,name=connectivity_type_matched_count,json=connectivityTypeMatchedCount,proto3" json:"connectivity_type_matched_count,omitempty"`
	ProviderMatchedCount         int32            `protobuf:"varint,20,opt,name=provider_matched_count,json=providerMatchedCount,proto3" json:"provider_matched_count,omitempty"`
	// List of interfaces.
	Interfaces []*InterfaceClassifyInfo `protobuf:"bytes,21,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *DeviceClassifyInfo) Reset() {
	*x = DeviceClassifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceClassifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceClassifyInfo) ProtoMessage() {}

func (x *DeviceClassifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceClassifyInfo.ProtoReflect.Descriptor instead.
func (*DeviceClassifyInfo) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceClassifyInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceClassifyInfo) GetTotalInterfaces() int32 {
	if x != nil {
		return x.TotalInterfaces
	}
	return 0
}

func (x *DeviceClassifyInfo) GetPreviouslyClassifiedCounter() *ClassifyCounter {
	if x != nil {
		return x.PreviouslyClassifiedCounter
	}
	return nil
}

func (x *DeviceClassifyInfo) GetAutoClassifiedCounter() *ClassifyCounter {
	if x != nil {
		return x.AutoClassifiedCounter
	}
	return nil
}

func (x *DeviceClassifyInfo) GetChangedClassificationCount() int32 {
	if x != nil {
		return x.ChangedClassificationCount
	}
	return 0
}

func (x *DeviceClassifyInfo) GetIpAsnMatchedCount() int32 {
	if x != nil {
		return x.IpAsnMatchedCount
	}
	return 0
}

func (x *DeviceClassifyInfo) GetIxMatchedCount() int32 {
	if x != nil {
		return x.IxMatchedCount
	}
	return 0
}

func (x *DeviceClassifyInfo) GetNexthopMatchedCount() int32 {
	if x != nil {
		return x.NexthopMatchedCount
	}
	return 0
}

func (x *DeviceClassifyInfo) GetConnectivityTypeMatchedCount() int32 {
	if x != nil {
		return x.ConnectivityTypeMatchedCount
	}
	return 0
}

func (x *DeviceClassifyInfo) GetProviderMatchedCount() int32 {
	if x != nil {
		return x.ProviderMatchedCount
	}
	return 0
}

func (x *DeviceClassifyInfo) GetInterfaces() []*InterfaceClassifyInfo {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// Supports multiple search criteria. Fields are combined to AND statements to perform search.
type InterfaceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search text match in interface description and alias.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Search by device ID.
	DeviceIds []string `protobuf:"bytes,2,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	// Search by type of interface connectivity.
	ConnectivityTypes []ConnectivityType `protobuf:"varint,3,rep,packed,name=connectivity_types,json=connectivityTypes,proto3,enum=kentik.interface.v202108alpha1.ConnectivityType" json:"connectivity_types,omitempty"`
	// Search by type of network boundary.
	NetworkBoundaries []NetworkBoundary `protobuf:"varint,4,rep,packed,name=network_boundaries,json=networkBoundaries,proto3,enum=kentik.interface.v202108alpha1.NetworkBoundary" json:"network_boundaries,omitempty"`
	// Search by provider
	Providers []string `protobuf:"bytes,5,rep,name=providers,proto3" json:"providers,omitempty"`
	// SNMP speed in Mbps
	SnmpSpeeds []int32 `protobuf:"varint,6,rep,packed,name=snmp_speeds,json=snmpSpeeds,proto3" json:"snmp_speeds,omitempty"`
	// Search by ip address.
	IpTypes []IpFilter `protobuf:"varint,7,rep,packed,name=ip_types,json=ipTypes,proto3,enum=kentik.interface.v202108alpha1.IpFilter" json:"ip_types,omitempty"`
}

func (x *InterfaceFilter) Reset() {
	*x = InterfaceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceFilter) ProtoMessage() {}

func (x *InterfaceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceFilter.ProtoReflect.Descriptor instead.
func (*InterfaceFilter) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{5}
}

func (x *InterfaceFilter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InterfaceFilter) GetDeviceIds() []string {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (x *InterfaceFilter) GetConnectivityTypes() []ConnectivityType {
	if x != nil {
		return x.ConnectivityTypes
	}
	return nil
}

func (x *InterfaceFilter) GetNetworkBoundaries() []NetworkBoundary {
	if x != nil {
		return x.NetworkBoundaries
	}
	return nil
}

func (x *InterfaceFilter) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *InterfaceFilter) GetSnmpSpeeds() []int32 {
	if x != nil {
		return x.SnmpSpeeds
	}
	return nil
}

func (x *InterfaceFilter) GetIpTypes() []IpFilter {
	if x != nil {
		return x.IpTypes
	}
	return nil
}

type AutoClassifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AutoClassifyRequest) Reset() {
	*x = AutoClassifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoClassifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoClassifyRequest) ProtoMessage() {}

func (x *AutoClassifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoClassifyRequest.ProtoReflect.Descriptor instead.
func (*AutoClassifyRequest) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{6}
}

type AutoClassifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percent of all interfaces taht are auto calssified.
	PercAutoClassified              float64 `protobuf:"fixed64,1,opt,name=perc_auto_classified,json=percAutoClassified,proto3" json:"perc_auto_classified,omitempty"`
	NetChangedTransit               int32   `protobuf:"varint,2,opt,name=net_changed_transit,json=netChangedTransit,proto3" json:"net_changed_transit,omitempty"`
	NetChangedIx                    int32   `protobuf:"varint,3,opt,name=net_changed_ix,json=netChangedIx,proto3" json:"net_changed_ix,omitempty"`
	NetChangedProvider              int32   `protobuf:"varint,4,opt,name=net_changed_provider,json=netChangedProvider,proto3" json:"net_changed_provider,omitempty"`
	TotalChangedClassificationCount int32   `protobuf:"varint,5,opt,name=total_changed_classification_count,json=totalChangedClassificationCount,proto3" json:"total_changed_classification_count,omitempty"`
	TotalAutoClassifyCount          int32   `protobuf:"varint,6,opt,name=total_auto_classify_count,json=totalAutoClassifyCount,proto3" json:"total_auto_classify_count,omitempty"`
	// total_auto_classify_ counts.
	TotalAutoClassifyCounter *ClassifyCounter `protobuf:"bytes,7,opt,name=total_auto_classify_counter,json=totalAutoClassifyCounter,proto3" json:"total_auto_classify_counter,omitempty"`
	// total_previous_ counts.
	TotalPreviousCounter *ClassifyCounter `protobuf:"bytes,8,opt,name=total_previous_counter,json=totalPreviousCounter,proto3" json:"total_previous_counter,omitempty"`
	// Total number of interfaces.
	TotalInterfaces int32 `protobuf:"varint,17,opt,name=total_interfaces,json=totalInterfaces,proto3" json:"total_interfaces,omitempty"`
	// List of devices.
	Devices []*DeviceClassifyInfo `protobuf:"bytes,18,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *AutoClassifyResponse) Reset() {
	*x = AutoClassifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoClassifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoClassifyResponse) ProtoMessage() {}

func (x *AutoClassifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoClassifyResponse.ProtoReflect.Descriptor instead.
func (*AutoClassifyResponse) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{7}
}

func (x *AutoClassifyResponse) GetPercAutoClassified() float64 {
	if x != nil {
		return x.PercAutoClassified
	}
	return 0
}

func (x *AutoClassifyResponse) GetNetChangedTransit() int32 {
	if x != nil {
		return x.NetChangedTransit
	}
	return 0
}

func (x *AutoClassifyResponse) GetNetChangedIx() int32 {
	if x != nil {
		return x.NetChangedIx
	}
	return 0
}

func (x *AutoClassifyResponse) GetNetChangedProvider() int32 {
	if x != nil {
		return x.NetChangedProvider
	}
	return 0
}

func (x *AutoClassifyResponse) GetTotalChangedClassificationCount() int32 {
	if x != nil {
		return x.TotalChangedClassificationCount
	}
	return 0
}

func (x *AutoClassifyResponse) GetTotalAutoClassifyCount() int32 {
	if x != nil {
		return x.TotalAutoClassifyCount
	}
	return 0
}

func (x *AutoClassifyResponse) GetTotalAutoClassifyCounter() *ClassifyCounter {
	if x != nil {
		return x.TotalAutoClassifyCounter
	}
	return nil
}

func (x *AutoClassifyResponse) GetTotalPreviousCounter() *ClassifyCounter {
	if x != nil {
		return x.TotalPreviousCounter
	}
	return nil
}

func (x *AutoClassifyResponse) GetTotalInterfaces() int32 {
	if x != nil {
		return x.TotalInterfaces
	}
	return 0
}

func (x *AutoClassifyResponse) GetDevices() []*DeviceClassifyInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

// Set connection type, network boundary, and provider of interface id(s) specified.
type ManualClassifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface ids to set the properties.
	InterfaceIds []string `protobuf:"bytes,1,rep,name=interface_ids,json=interfaceIds,proto3" json:"interface_ids,omitempty"`
	// Connection type enum.
	ConnectivityType ConnectivityType `protobuf:"varint,2,opt,name=connectivity_type,json=connectivityType,proto3,enum=kentik.interface.v202108alpha1.ConnectivityType" json:"connectivity_type,omitempty"`
	// Network boundary enum.
	NetworkBoundary NetworkBoundary `protobuf:"varint,3,opt,name=network_boundary,json=networkBoundary,proto3,enum=kentik.interface.v202108alpha1.NetworkBoundary" json:"network_boundary,omitempty"`
	// Network provider.
	Provider string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ManualClassifyRequest) Reset() {
	*x = ManualClassifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualClassifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualClassifyRequest) ProtoMessage() {}

func (x *ManualClassifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualClassifyRequest.ProtoReflect.Descriptor instead.
func (*ManualClassifyRequest) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{8}
}

func (x *ManualClassifyRequest) GetInterfaceIds() []string {
	if x != nil {
		return x.InterfaceIds
	}
	return nil
}

func (x *ManualClassifyRequest) GetConnectivityType() ConnectivityType {
	if x != nil {
		return x.ConnectivityType
	}
	return ConnectivityType_CONNECTIVITY_TYPE_UNSPECIFIED
}

func (x *ManualClassifyRequest) GetNetworkBoundary() NetworkBoundary {
	if x != nil {
		return x.NetworkBoundary
	}
	return NetworkBoundary_NETWORK_BOUNDARY_UNSPECIFIED
}

func (x *ManualClassifyRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type ManualClassifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (x *ManualClassifyResponse) Reset() {
	*x = ManualClassifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualClassifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualClassifyResponse) ProtoMessage() {}

func (x *ManualClassifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualClassifyResponse.ProtoReflect.Descriptor instead.
func (*ManualClassifyResponse) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{9}
}

func (x *ManualClassifyResponse) GetDeviceIds() []string {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

type ListInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *InterfaceFilter `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListInterfaceRequest) Reset() {
	*x = ListInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfaceRequest) ProtoMessage() {}

func (x *ListInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfaceRequest.ProtoReflect.Descriptor instead.
func (*ListInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{10}
}

func (x *ListInterfaceRequest) GetFilters() *InterfaceFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces   []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	TotalCount   int32        `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	InvalidCount int32        `protobuf:"varint,3,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListInterfaceResponse) Reset() {
	*x = ListInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfaceResponse) ProtoMessage() {}

func (x *ListInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfaceResponse.ProtoReflect.Descriptor instead.
func (*ListInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{11}
}

func (x *ListInterfaceResponse) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *ListInterfaceResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListInterfaceResponse) GetInvalidCount() int32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

type GetInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of interface.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInterfaceRequest) Reset() {
	*x = GetInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceRequest) ProtoMessage() {}

func (x *GetInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceRequest.ProtoReflect.Descriptor instead.
func (*GetInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{12}
}

func (x *GetInterfaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *Interface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *GetInterfaceResponse) Reset() {
	*x = GetInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceResponse) ProtoMessage() {}

func (x *GetInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceResponse.ProtoReflect.Descriptor instead.
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{13}
}

func (x *GetInterfaceResponse) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type CreateInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *Interface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *CreateInterfaceRequest) Reset() {
	*x = CreateInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceRequest) ProtoMessage() {}

func (x *CreateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*CreateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{14}
}

func (x *CreateInterfaceRequest) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type CreateInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *Interface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *CreateInterfaceResponse) Reset() {
	*x = CreateInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceResponse) ProtoMessage() {}

func (x *CreateInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceResponse.ProtoReflect.Descriptor instead.
func (*CreateInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{15}
}

func (x *CreateInterfaceResponse) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type UpdateInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *Interface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *UpdateInterfaceRequest) Reset() {
	*x = UpdateInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInterfaceRequest) ProtoMessage() {}

func (x *UpdateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateInterfaceRequest) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type UpdateInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *Interface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *UpdateInterfaceResponse) Reset() {
	*x = UpdateInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInterfaceResponse) ProtoMessage() {}

func (x *UpdateInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInterfaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateInterfaceResponse) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type DeleteInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of interface.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteInterfaceRequest) Reset() {
	*x = DeleteInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceRequest) ProtoMessage() {}

func (x *DeleteInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteInterfaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteInterfaceResponse) Reset() {
	*x = DeleteInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceResponse) ProtoMessage() {}

func (x *DeleteInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{19}
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attribute to match.
	MatchAttribute MatchAttribute `protobuf:"varint,1,opt,name=match_attribute,json=matchAttribute,proto3,enum=kentik.interface.v202108alpha1.MatchAttribute" json:"match_attribute,omitempty"`
	// Match operation.
	MatchOperator Operator `protobuf:"varint,2,opt,name=match_operator,json=matchOperator,proto3,enum=kentik.interface.v202108alpha1.Operator" json:"match_operator,omitempty"`
	// Value to match by.
	Pattern string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{20}
}

func (x *Match) GetMatchAttribute() MatchAttribute {
	if x != nil {
		return x.MatchAttribute
	}
	return MatchAttribute_MATCH_ATTRIBUTE_UNSPECIFIED
}

func (x *Match) GetMatchOperator() Operator {
	if x != nil {
		return x.MatchOperator
	}
	return Operator_OPERATOR_UNSPECIFIED
}

func (x *Match) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

// Set the values of the interface property base on match rule defintion. Requires explicit input value, empty string is allow.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set type of connection.
	SetConnectivityType ConnectivityType `protobuf:"varint,1,opt,name=set_connectivity_type,json=setConnectivityType,proto3,enum=kentik.interface.v202108alpha1.ConnectivityType" json:"set_connectivity_type,omitempty"`
	// Set network boundary.
	SetNetworkBoundary NetworkBoundary `protobuf:"varint,2,opt,name=set_network_boundary,json=setNetworkBoundary,proto3,enum=kentik.interface.v202108alpha1.NetworkBoundary" json:"set_network_boundary,omitempty"`
	// Set ASNs.
	SetConnectedAsns string `protobuf:"bytes,3,opt,name=set_connected_asns,json=setConnectedAsns,proto3" json:"set_connected_asns,omitempty"`
	// List of providers available.
	SetProvider string `protobuf:"bytes,4,opt,name=set_provider,json=setProvider,proto3" json:"set_provider,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{21}
}

func (x *Action) GetSetConnectivityType() ConnectivityType {
	if x != nil {
		return x.SetConnectivityType
	}
	return ConnectivityType_CONNECTIVITY_TYPE_UNSPECIFIED
}

func (x *Action) GetSetNetworkBoundary() NetworkBoundary {
	if x != nil {
		return x.SetNetworkBoundary
	}
	return NetworkBoundary_NETWORK_BOUNDARY_UNSPECIFIED
}

func (x *Action) GetSetConnectedAsns() string {
	if x != nil {
		return x.SetConnectedAsns
	}
	return ""
}

func (x *Action) GetSetProvider() string {
	if x != nil {
		return x.SetProvider
	}
	return ""
}

type DeviceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllDevices   bool     `protobuf:"varint,1,opt,name=all_devices,json=allDevices,proto3" json:"all_devices,omitempty"`
	DeviceName   []string `protobuf:"bytes,2,rep,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceLabels []string `protobuf:"bytes,3,rep,name=device_labels,json=deviceLabels,proto3" json:"device_labels,omitempty"`
	DeviceRules  []string `protobuf:"bytes,4,rep,name=device_rules,json=deviceRules,proto3" json:"device_rules,omitempty"`
	DeviceTypes  []string `protobuf:"bytes,5,rep,name=device_types,json=deviceTypes,proto3" json:"device_types,omitempty"`
}

func (x *DeviceFilter) Reset() {
	*x = DeviceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceFilter) ProtoMessage() {}

func (x *DeviceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceFilter.ProtoReflect.Descriptor instead.
func (*DeviceFilter) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceFilter) GetAllDevices() bool {
	if x != nil {
		return x.AllDevices
	}
	return false
}

func (x *DeviceFilter) GetDeviceName() []string {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *DeviceFilter) GetDeviceLabels() []string {
	if x != nil {
		return x.DeviceLabels
	}
	return nil
}

func (x *DeviceFilter) GetDeviceRules() []string {
	if x != nil {
		return x.DeviceRules
	}
	return nil
}

func (x *DeviceFilter) GetDeviceTypes() []string {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of interface rule.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Is this rule enable.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Rank order for apply list of rules.
	Rank int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// Rule match criteria.
	MatchClause *Match `protobuf:"bytes,4,opt,name=match_clause,json=matchClause,proto3" json:"match_clause,omitempty"`
	// Action for match rule.
	ActionSet *Action `protobuf:"bytes,5,opt,name=action_set,json=actionSet,proto3" json:"action_set,omitempty"`
	// Create timestamp.
	Cdate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=cdate,proto3" json:"cdate,omitempty"`
	// Update timestamp.
	Edate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=edate,proto3" json:"edate,omitempty"`
	// Device inclusive filters.
	IncludedDevices *DeviceFilter `protobuf:"bytes,8,opt,name=included_devices,json=includedDevices,proto3" json:"included_devices,omitempty"`
	// Device exclusive filters.
	ExcludedDevices *DeviceFilter `protobuf:"bytes,9,opt,name=excluded_devices,json=excludedDevices,proto3" json:"excluded_devices,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_interface_v202108alpha1_interface_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP(), []int{23}
}

func (x *Rule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Rule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Rule) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Rule) GetMatchClause() *Match {
	if x != nil {
		return x.MatchClause
	}
	return nil
}

func (x *Rule) GetActionSet() *Action {
	if x != nil {
		return x.ActionSet
	}
	return nil
}

func (x *Rule) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Rule) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

func (x *Rule) GetIncludedDevices() *DeviceFilter {
	if x != nil {
		return x.IncludedDevices
	}
	return nil
}

func (x *Rule) GetExcludedDevices() *DeviceFilter {
	if x != nil {
		return x.ExcludedDevices
	}
	return nil
}

var File_kentik_interface_v202108alpha1_interface_proto protoreflect.FileDescriptor

var file_kentik_interface_v202108alpha1_interface_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x05, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6e, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x6d,
	0x70, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6e, 0x6d, 0x70, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6e, 0x6d, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6e, 0x6d,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6e, 0x6d, 0x70, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05,
	0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70,
	0x5f, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x4e, 0x65, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x5d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5a, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x73, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x41, 0x73, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x5d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x70, 0x6e, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x50, 0x6e, 0x69, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x09, 0x0a, 0x15, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6e, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x6d, 0x70,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6e,
	0x6d, 0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x70, 0x41, 0x73, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x73, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x5f, 0x61, 0x73, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f,
	0x70, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x73, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x64, 0x62, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x64, 0x62, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70,
	0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x70, 0x41, 0x73, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xdf, 0x05, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x73, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x6c, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x69, 0x70, 0x41, 0x73, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x78, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x6d,
	0x70, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x6e, 0x6d, 0x70, 0x53, 0x70, 0x65, 0x65, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x15, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa8, 0x05, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x49, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x22, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x6e, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x65, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x93, 0x02, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x5d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5a, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x61, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x25,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x61, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x22, 0x62, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x57, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xa2, 0x02, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x12, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x73, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xeb, 0x03, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2a, 0xed, 0x04, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x10,
	0x03, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52,
	0x49, 0x43, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45,
	0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x50, 0x4e, 0x49, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x58, 0x10, 0x0b, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x4e, 0x49, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x10, 0x2a, 0xa7, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x04, 0x2a, 0x67, 0x0a, 0x08, 0x49, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x50, 0x5f,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x50, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x9e, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x4e,
	0x4d, 0x50, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x03, 0x2a, 0xd1, 0x01, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x45,
	0x58, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x4e, 0x45, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x49, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x53, 0x5f,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x49, 0x50, 0x10, 0x07,
	0x32, 0xc1, 0x0e, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa7, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x12, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x92, 0x41, 0x56, 0x12, 0x19, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x20, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x29, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x6c, 0x79, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x28, 0x73, 0x29, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x2a, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x22, 0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x3a, 0x01, 0x2a, 0x12,
	0xa0, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x92, 0x41, 0x5b, 0x12, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x20, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x31, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x61, 0x2e,
	0x2a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0xf2,
	0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0xa1, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5,
	0x01, 0x92, 0x41, 0x5a, 0x12, 0x10, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x1a, 0x38, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x49, 0x44, 0x2e,
	0x2a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0xf2, 0xd7,
	0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa8, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x92, 0x41,
	0x59, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x1a, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x2a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xc1, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x92, 0x41, 0x63, 0x12, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x1a, 0x3b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x69, 0x64, 0x2e, 0x2a, 0x0f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0xf2,
	0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a, 0x32,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x92, 0x41, 0x50,
	0x12, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x1a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x69, 0x64, 0x2e, 0x2a,
	0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0xf2, 0xd7, 0x02, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a,
	0x28, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x29, 0xca, 0x41, 0x13, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0xea, 0xd7, 0x02, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x42, 0xc3, 0x02, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x69, 0x66, 0x61, 0x63,
	0x65, 0x92, 0x41, 0xf5, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x22, 0x18, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x0c, 0x32, 0x30, 0x32, 0x31, 0x30, 0x38, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2a, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d,
	0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x00, 0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x1b, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_kentik_interface_v202108alpha1_interface_proto_rawDescOnce sync.Once
	file_kentik_interface_v202108alpha1_interface_proto_rawDescData = file_kentik_interface_v202108alpha1_interface_proto_rawDesc
)

func file_kentik_interface_v202108alpha1_interface_proto_rawDescGZIP() []byte {
	file_kentik_interface_v202108alpha1_interface_proto_rawDescOnce.Do(func() {
		file_kentik_interface_v202108alpha1_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_interface_v202108alpha1_interface_proto_rawDescData)
	})
	return file_kentik_interface_v202108alpha1_interface_proto_rawDescData
}

var file_kentik_interface_v202108alpha1_interface_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_kentik_interface_v202108alpha1_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_kentik_interface_v202108alpha1_interface_proto_goTypes = []interface{}{
	(ConnectivityType)(0),           // 0: kentik.interface.v202108alpha1.ConnectivityType
	(NetworkBoundary)(0),            // 1: kentik.interface.v202108alpha1.NetworkBoundary
	(IpFilter)(0),                   // 2: kentik.interface.v202108alpha1.IpFilter
	(MatchAttribute)(0),             // 3: kentik.interface.v202108alpha1.MatchAttribute
	(Operator)(0),                   // 4: kentik.interface.v202108alpha1.Operator
	(*Interface)(nil),               // 5: kentik.interface.v202108alpha1.Interface
	(*InterfaceClassification)(nil), // 6: kentik.interface.v202108alpha1.InterfaceClassification
	(*ClassifyCounter)(nil),         // 7: kentik.interface.v202108alpha1.ClassifyCounter
	(*InterfaceClassifyInfo)(nil),   // 8: kentik.interface.v202108alpha1.InterfaceClassifyInfo
	(*DeviceClassifyInfo)(nil),      // 9: kentik.interface.v202108alpha1.DeviceClassifyInfo
	(*InterfaceFilter)(nil),         // 10: kentik.interface.v202108alpha1.InterfaceFilter
	(*AutoClassifyRequest)(nil),     // 11: kentik.interface.v202108alpha1.AutoClassifyRequest
	(*AutoClassifyResponse)(nil),    // 12: kentik.interface.v202108alpha1.AutoClassifyResponse
	(*ManualClassifyRequest)(nil),   // 13: kentik.interface.v202108alpha1.ManualClassifyRequest
	(*ManualClassifyResponse)(nil),  // 14: kentik.interface.v202108alpha1.ManualClassifyResponse
	(*ListInterfaceRequest)(nil),    // 15: kentik.interface.v202108alpha1.ListInterfaceRequest
	(*ListInterfaceResponse)(nil),   // 16: kentik.interface.v202108alpha1.ListInterfaceResponse
	(*GetInterfaceRequest)(nil),     // 17: kentik.interface.v202108alpha1.GetInterfaceRequest
	(*GetInterfaceResponse)(nil),    // 18: kentik.interface.v202108alpha1.GetInterfaceResponse
	(*CreateInterfaceRequest)(nil),  // 19: kentik.interface.v202108alpha1.CreateInterfaceRequest
	(*CreateInterfaceResponse)(nil), // 20: kentik.interface.v202108alpha1.CreateInterfaceResponse
	(*UpdateInterfaceRequest)(nil),  // 21: kentik.interface.v202108alpha1.UpdateInterfaceRequest
	(*UpdateInterfaceResponse)(nil), // 22: kentik.interface.v202108alpha1.UpdateInterfaceResponse
	(*DeleteInterfaceRequest)(nil),  // 23: kentik.interface.v202108alpha1.DeleteInterfaceRequest
	(*DeleteInterfaceResponse)(nil), // 24: kentik.interface.v202108alpha1.DeleteInterfaceResponse
	(*Match)(nil),                   // 25: kentik.interface.v202108alpha1.Match
	(*Action)(nil),                  // 26: kentik.interface.v202108alpha1.Action
	(*DeviceFilter)(nil),            // 27: kentik.interface.v202108alpha1.DeviceFilter
	(*Rule)(nil),                    // 28: kentik.interface.v202108alpha1.Rule
	(*timestamppb.Timestamp)(nil),   // 29: google.protobuf.Timestamp
}
var file_kentik_interface_v202108alpha1_interface_proto_depIdxs = []int32{
	29, // 0: kentik.interface.v202108alpha1.Interface.cdate:type_name -> google.protobuf.Timestamp
	29, // 1: kentik.interface.v202108alpha1.Interface.edate:type_name -> google.protobuf.Timestamp
	0,  // 2: kentik.interface.v202108alpha1.Interface.connectivity_type:type_name -> kentik.interface.v202108alpha1.ConnectivityType
	1,  // 3: kentik.interface.v202108alpha1.Interface.network_boundary:type_name -> kentik.interface.v202108alpha1.NetworkBoundary
	0,  // 4: kentik.interface.v202108alpha1.InterfaceClassification.connectivity_type:type_name -> kentik.interface.v202108alpha1.ConnectivityType
	1,  // 5: kentik.interface.v202108alpha1.InterfaceClassification.network_boundary:type_name -> kentik.interface.v202108alpha1.NetworkBoundary
	6,  // 6: kentik.interface.v202108alpha1.InterfaceClassifyInfo.auto_classification:type_name -> kentik.interface.v202108alpha1.InterfaceClassification
	6,  // 7: kentik.interface.v202108alpha1.InterfaceClassifyInfo.previous_classification:type_name -> kentik.interface.v202108alpha1.InterfaceClassification
	7,  // 8: kentik.interface.v202108alpha1.DeviceClassifyInfo.previously_classified_counter:type_name -> kentik.interface.v202108alpha1.ClassifyCounter
	7,  // 9: kentik.interface.v202108alpha1.DeviceClassifyInfo.auto_classified_counter:type_name -> kentik.interface.v202108alpha1.ClassifyCounter
	8,  // 10: kentik.interface.v202108alpha1.DeviceClassifyInfo.interfaces:type_name -> kentik.interface.v202108alpha1.InterfaceClassifyInfo
	0,  // 11: kentik.interface.v202108alpha1.InterfaceFilter.connectivity_types:type_name -> kentik.interface.v202108alpha1.ConnectivityType
	1,  // 12: kentik.interface.v202108alpha1.InterfaceFilter.network_boundaries:type_name -> kentik.interface.v202108alpha1.NetworkBoundary
	2,  // 13: kentik.interface.v202108alpha1.InterfaceFilter.ip_types:type_name -> kentik.interface.v202108alpha1.IpFilter
	7,  // 14: kentik.interface.v202108alpha1.AutoClassifyResponse.total_auto_classify_counter:type_name -> kentik.interface.v202108alpha1.ClassifyCounter
	7,  // 15: kentik.interface.v202108alpha1.AutoClassifyResponse.total_previous_counter:type_name -> kentik.interface.v202108alpha1.ClassifyCounter
	9,  // 16: kentik.interface.v202108alpha1.AutoClassifyResponse.devices:type_name -> kentik.interface.v202108alpha1.DeviceClassifyInfo
	0,  // 17: kentik.interface.v202108alpha1.ManualClassifyRequest.connectivity_type:type_name -> kentik.interface.v202108alpha1.ConnectivityType
	1,  // 18: kentik.interface.v202108alpha1.ManualClassifyRequest.network_boundary:type_name -> kentik.interface.v202108alpha1.NetworkBoundary
	10, // 19: kentik.interface.v202108alpha1.ListInterfaceRequest.filters:type_name -> kentik.interface.v202108alpha1.InterfaceFilter
	5,  // 20: kentik.interface.v202108alpha1.ListInterfaceResponse.interfaces:type_name -> kentik.interface.v202108alpha1.Interface
	5,  // 21: kentik.interface.v202108alpha1.GetInterfaceResponse.interface:type_name -> kentik.interface.v202108alpha1.Interface
	5,  // 22: kentik.interface.v202108alpha1.CreateInterfaceRequest.interface:type_name -> kentik.interface.v202108alpha1.Interface
	5,  // 23: kentik.interface.v202108alpha1.CreateInterfaceResponse.interface:type_name -> kentik.interface.v202108alpha1.Interface
	5,  // 24: kentik.interface.v202108alpha1.UpdateInterfaceRequest.interface:type_name -> kentik.interface.v202108alpha1.Interface
	5,  // 25: kentik.interface.v202108alpha1.UpdateInterfaceResponse.interface:type_name -> kentik.interface.v202108alpha1.Interface
	3,  // 26: kentik.interface.v202108alpha1.Match.match_attribute:type_name -> kentik.interface.v202108alpha1.MatchAttribute
	4,  // 27: kentik.interface.v202108alpha1.Match.match_operator:type_name -> kentik.interface.v202108alpha1.Operator
	0,  // 28: kentik.interface.v202108alpha1.Action.set_connectivity_type:type_name -> kentik.interface.v202108alpha1.ConnectivityType
	1,  // 29: kentik.interface.v202108alpha1.Action.set_network_boundary:type_name -> kentik.interface.v202108alpha1.NetworkBoundary
	25, // 30: kentik.interface.v202108alpha1.Rule.match_clause:type_name -> kentik.interface.v202108alpha1.Match
	26, // 31: kentik.interface.v202108alpha1.Rule.action_set:type_name -> kentik.interface.v202108alpha1.Action
	29, // 32: kentik.interface.v202108alpha1.Rule.cdate:type_name -> google.protobuf.Timestamp
	29, // 33: kentik.interface.v202108alpha1.Rule.edate:type_name -> google.protobuf.Timestamp
	27, // 34: kentik.interface.v202108alpha1.Rule.included_devices:type_name -> kentik.interface.v202108alpha1.DeviceFilter
	27, // 35: kentik.interface.v202108alpha1.Rule.excluded_devices:type_name -> kentik.interface.v202108alpha1.DeviceFilter
	13, // 36: kentik.interface.v202108alpha1.InterfaceService.ManualClassify:input_type -> kentik.interface.v202108alpha1.ManualClassifyRequest
	15, // 37: kentik.interface.v202108alpha1.InterfaceService.ListInterface:input_type -> kentik.interface.v202108alpha1.ListInterfaceRequest
	17, // 38: kentik.interface.v202108alpha1.InterfaceService.GetInterface:input_type -> kentik.interface.v202108alpha1.GetInterfaceRequest
	19, // 39: kentik.interface.v202108alpha1.InterfaceService.CreateInterface:input_type -> kentik.interface.v202108alpha1.CreateInterfaceRequest
	21, // 40: kentik.interface.v202108alpha1.InterfaceService.UpdateInterface:input_type -> kentik.interface.v202108alpha1.UpdateInterfaceRequest
	23, // 41: kentik.interface.v202108alpha1.InterfaceService.DeleteInterface:input_type -> kentik.interface.v202108alpha1.DeleteInterfaceRequest
	14, // 42: kentik.interface.v202108alpha1.InterfaceService.ManualClassify:output_type -> kentik.interface.v202108alpha1.ManualClassifyResponse
	16, // 43: kentik.interface.v202108alpha1.InterfaceService.ListInterface:output_type -> kentik.interface.v202108alpha1.ListInterfaceResponse
	18, // 44: kentik.interface.v202108alpha1.InterfaceService.GetInterface:output_type -> kentik.interface.v202108alpha1.GetInterfaceResponse
	20, // 45: kentik.interface.v202108alpha1.InterfaceService.CreateInterface:output_type -> kentik.interface.v202108alpha1.CreateInterfaceResponse
	22, // 46: kentik.interface.v202108alpha1.InterfaceService.UpdateInterface:output_type -> kentik.interface.v202108alpha1.UpdateInterfaceResponse
	24, // 47: kentik.interface.v202108alpha1.InterfaceService.DeleteInterface:output_type -> kentik.interface.v202108alpha1.DeleteInterfaceResponse
	42, // [42:48] is the sub-list for method output_type
	36, // [36:42] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_kentik_interface_v202108alpha1_interface_proto_init() }
func file_kentik_interface_v202108alpha1_interface_proto_init() {
	if File_kentik_interface_v202108alpha1_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifyCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceClassifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceClassifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoClassifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoClassifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualClassifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualClassifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_interface_v202108alpha1_interface_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_interface_v202108alpha1_interface_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_interface_v202108alpha1_interface_proto_goTypes,
		DependencyIndexes: file_kentik_interface_v202108alpha1_interface_proto_depIdxs,
		EnumInfos:         file_kentik_interface_v202108alpha1_interface_proto_enumTypes,
		MessageInfos:      file_kentik_interface_v202108alpha1_interface_proto_msgTypes,
	}.Build()
	File_kentik_interface_v202108alpha1_interface_proto = out.File
	file_kentik_interface_v202108alpha1_interface_proto_rawDesc = nil
	file_kentik_interface_v202108alpha1_interface_proto_goTypes = nil
	file_kentik_interface_v202108alpha1_interface_proto_depIdxs = nil
}
