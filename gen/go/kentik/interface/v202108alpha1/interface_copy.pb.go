// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/interface/v202108alpha1/interface.proto

package iface

import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Interface) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Interface:
		x.Id = v.GetId()
		x.DeviceId = v.GetDeviceId()
		x.SnmpId = v.GetSnmpId()
		x.SnmpSpeed = v.GetSnmpSpeed()
		x.SnmpType = v.GetSnmpType()
		x.SnmpAlias = v.GetSnmpAlias()
		x.InterfaceIp = v.GetInterfaceIp()
		x.InterfaceDescription = v.GetInterfaceDescription()
		x.Cdate = v.GetCdate()
		x.Edate = v.GetEdate()
		x.InterfaceIpNetmask = v.GetInterfaceIpNetmask()
		x.ConnectivityType = v.GetConnectivityType()
		x.NetworkBoundary = v.GetNetworkBoundary()
		x.TopNexthopAsns = v.GetTopNexthopAsns()
		x.Provider = v.GetProvider()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetDeviceId() string }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetSnmpId() string }); ok {
			x.SnmpId = v.GetSnmpId()
		}
		if v, ok := v.(interface{ GetSnmpSpeed() rune }); ok {
			x.SnmpSpeed = v.GetSnmpSpeed()
		}
		if v, ok := v.(interface{ GetSnmpType() rune }); ok {
			x.SnmpType = v.GetSnmpType()
		}
		if v, ok := v.(interface{ GetSnmpAlias() string }); ok {
			x.SnmpAlias = v.GetSnmpAlias()
		}
		if v, ok := v.(interface{ GetInterfaceIp() string }); ok {
			x.InterfaceIp = v.GetInterfaceIp()
		}
		if v, ok := v.(interface{ GetInterfaceDescription() string }); ok {
			x.InterfaceDescription = v.GetInterfaceDescription()
		}
		if v, ok := v.(interface{ GetCdate() *timestamppb.Timestamp }); ok {
			x.Cdate = v.GetCdate()
		}
		if v, ok := v.(interface{ GetEdate() *timestamppb.Timestamp }); ok {
			x.Edate = v.GetEdate()
		}
		if v, ok := v.(interface{ GetInterfaceIpNetmask() string }); ok {
			x.InterfaceIpNetmask = v.GetInterfaceIpNetmask()
		}
		if v, ok := v.(interface{ GetConnectivityType() ConnectivityType }); ok {
			x.ConnectivityType = v.GetConnectivityType()
		}
		if v, ok := v.(interface{ GetNetworkBoundary() NetworkBoundary }); ok {
			x.NetworkBoundary = v.GetNetworkBoundary()
		}
		if v, ok := v.(interface{ GetTopNexthopAsns() []rune }); ok {
			x.TopNexthopAsns = v.GetTopNexthopAsns()
		}
		if v, ok := v.(interface{ GetProvider() string }); ok {
			x.Provider = v.GetProvider()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Interface) Proto_ShallowClone() (c *Interface) {
	if x != nil {
		c = new(Interface)
		c.Id = x.Id
		c.DeviceId = x.DeviceId
		c.SnmpId = x.SnmpId
		c.SnmpSpeed = x.SnmpSpeed
		c.SnmpType = x.SnmpType
		c.SnmpAlias = x.SnmpAlias
		c.InterfaceIp = x.InterfaceIp
		c.InterfaceDescription = x.InterfaceDescription
		c.Cdate = x.Cdate
		c.Edate = x.Edate
		c.InterfaceIpNetmask = x.InterfaceIpNetmask
		c.ConnectivityType = x.ConnectivityType
		c.NetworkBoundary = x.NetworkBoundary
		c.TopNexthopAsns = x.TopNexthopAsns
		c.Provider = x.Provider
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *InterfaceClassification) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *InterfaceClassification:
		x.Classified = v.GetClassified()
		x.ConnectivityType = v.GetConnectivityType()
		x.NetworkBoundary = v.GetNetworkBoundary()
	default:
		if v, ok := v.(interface{ GetClassified() bool }); ok {
			x.Classified = v.GetClassified()
		}
		if v, ok := v.(interface{ GetConnectivityType() ConnectivityType }); ok {
			x.ConnectivityType = v.GetConnectivityType()
		}
		if v, ok := v.(interface{ GetNetworkBoundary() NetworkBoundary }); ok {
			x.NetworkBoundary = v.GetNetworkBoundary()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *InterfaceClassification) Proto_ShallowClone() (c *InterfaceClassification) {
	if x != nil {
		c = new(InterfaceClassification)
		c.Classified = x.Classified
		c.ConnectivityType = x.ConnectivityType
		c.NetworkBoundary = x.NetworkBoundary
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ClassifyCounter) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ClassifyCounter:
		x.Count = v.GetCount()
		x.ExternalCount = v.GetExternalCount()
		x.FreePniCount = v.GetFreePniCount()
		x.IxCount = v.GetIxCount()
		x.ProviderCount = v.GetProviderCount()
		x.TransitCount = v.GetTransitCount()
	default:
		if v, ok := v.(interface{ GetCount() rune }); ok {
			x.Count = v.GetCount()
		}
		if v, ok := v.(interface{ GetExternalCount() rune }); ok {
			x.ExternalCount = v.GetExternalCount()
		}
		if v, ok := v.(interface{ GetFreePniCount() rune }); ok {
			x.FreePniCount = v.GetFreePniCount()
		}
		if v, ok := v.(interface{ GetIxCount() rune }); ok {
			x.IxCount = v.GetIxCount()
		}
		if v, ok := v.(interface{ GetProviderCount() rune }); ok {
			x.ProviderCount = v.GetProviderCount()
		}
		if v, ok := v.(interface{ GetTransitCount() rune }); ok {
			x.TransitCount = v.GetTransitCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ClassifyCounter) Proto_ShallowClone() (c *ClassifyCounter) {
	if x != nil {
		c = new(ClassifyCounter)
		c.Count = x.Count
		c.ExternalCount = x.ExternalCount
		c.FreePniCount = x.FreePniCount
		c.IxCount = x.IxCount
		c.ProviderCount = x.ProviderCount
		c.TransitCount = x.TransitCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *InterfaceClassifyInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *InterfaceClassifyInfo:
		x.DeviceId = v.GetDeviceId()
		x.SnmpId = v.GetSnmpId()
		x.SnmpAlias = v.GetSnmpAlias()
		x.InterfaceIp = v.GetInterfaceIp()
		x.InterfaceIpAsn = v.GetInterfaceIpAsn()
		x.IsInternalIp = v.GetIsInternalIp()
		x.IsInternalAsn = v.GetIsInternalAsn()
		x.TopNexthopAsns = v.GetTopNexthopAsns()
		x.PdbGlobalName = v.GetPdbGlobalName()
		x.AutoClassification = v.GetAutoClassification()
		x.PreviousClassification = v.GetPreviousClassification()
		x.Provider = v.GetProvider()
		x.NetworkBoundaryConfidence = v.GetNetworkBoundaryConfidence()
		x.ConnectivityTypeConfidence = v.GetConnectivityTypeConfidence()
		x.ProviderConfidence = v.GetProviderConfidence()
		x.AutoClassifiedProvider = v.GetAutoClassifiedProvider()
		x.PreviouslyClassifiedProvider = v.GetPreviouslyClassifiedProvider()
		x.PreviouslyClassifiedExternal = v.GetPreviouslyClassifiedExternal()
		x.IpAsnMatched = v.GetIpAsnMatched()
		x.IxMatched = v.GetIxMatched()
		x.NexthopMatched = v.GetNexthopMatched()
		x.ConnectivityTypeMatched = v.GetConnectivityTypeMatched()
		x.ProviderMatched = v.GetProviderMatched()
		x.ChangedClassification = v.GetChangedClassification()
	default:
		if v, ok := v.(interface{ GetDeviceId() string }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetSnmpId() string }); ok {
			x.SnmpId = v.GetSnmpId()
		}
		if v, ok := v.(interface{ GetSnmpAlias() string }); ok {
			x.SnmpAlias = v.GetSnmpAlias()
		}
		if v, ok := v.(interface{ GetInterfaceIp() string }); ok {
			x.InterfaceIp = v.GetInterfaceIp()
		}
		if v, ok := v.(interface{ GetInterfaceIpAsn() string }); ok {
			x.InterfaceIpAsn = v.GetInterfaceIpAsn()
		}
		if v, ok := v.(interface{ GetIsInternalIp() bool }); ok {
			x.IsInternalIp = v.GetIsInternalIp()
		}
		if v, ok := v.(interface{ GetIsInternalAsn() bool }); ok {
			x.IsInternalAsn = v.GetIsInternalAsn()
		}
		if v, ok := v.(interface{ GetTopNexthopAsns() []string }); ok {
			x.TopNexthopAsns = v.GetTopNexthopAsns()
		}
		if v, ok := v.(interface{ GetPdbGlobalName() string }); ok {
			x.PdbGlobalName = v.GetPdbGlobalName()
		}
		if v, ok := v.(interface {
			GetAutoClassification() *InterfaceClassification
		}); ok {
			x.AutoClassification = v.GetAutoClassification()
		}
		if v, ok := v.(interface {
			GetPreviousClassification() *InterfaceClassification
		}); ok {
			x.PreviousClassification = v.GetPreviousClassification()
		}
		if v, ok := v.(interface{ GetProvider() string }); ok {
			x.Provider = v.GetProvider()
		}
		if v, ok := v.(interface{ GetNetworkBoundaryConfidence() rune }); ok {
			x.NetworkBoundaryConfidence = v.GetNetworkBoundaryConfidence()
		}
		if v, ok := v.(interface{ GetConnectivityTypeConfidence() rune }); ok {
			x.ConnectivityTypeConfidence = v.GetConnectivityTypeConfidence()
		}
		if v, ok := v.(interface{ GetProviderConfidence() rune }); ok {
			x.ProviderConfidence = v.GetProviderConfidence()
		}
		if v, ok := v.(interface{ GetAutoClassifiedProvider() bool }); ok {
			x.AutoClassifiedProvider = v.GetAutoClassifiedProvider()
		}
		if v, ok := v.(interface{ GetPreviouslyClassifiedProvider() string }); ok {
			x.PreviouslyClassifiedProvider = v.GetPreviouslyClassifiedProvider()
		}
		if v, ok := v.(interface{ GetPreviouslyClassifiedExternal() bool }); ok {
			x.PreviouslyClassifiedExternal = v.GetPreviouslyClassifiedExternal()
		}
		if v, ok := v.(interface{ GetIpAsnMatched() bool }); ok {
			x.IpAsnMatched = v.GetIpAsnMatched()
		}
		if v, ok := v.(interface{ GetIxMatched() bool }); ok {
			x.IxMatched = v.GetIxMatched()
		}
		if v, ok := v.(interface{ GetNexthopMatched() bool }); ok {
			x.NexthopMatched = v.GetNexthopMatched()
		}
		if v, ok := v.(interface{ GetConnectivityTypeMatched() bool }); ok {
			x.ConnectivityTypeMatched = v.GetConnectivityTypeMatched()
		}
		if v, ok := v.(interface{ GetProviderMatched() bool }); ok {
			x.ProviderMatched = v.GetProviderMatched()
		}
		if v, ok := v.(interface{ GetChangedClassification() bool }); ok {
			x.ChangedClassification = v.GetChangedClassification()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *InterfaceClassifyInfo) Proto_ShallowClone() (c *InterfaceClassifyInfo) {
	if x != nil {
		c = new(InterfaceClassifyInfo)
		c.DeviceId = x.DeviceId
		c.SnmpId = x.SnmpId
		c.SnmpAlias = x.SnmpAlias
		c.InterfaceIp = x.InterfaceIp
		c.InterfaceIpAsn = x.InterfaceIpAsn
		c.IsInternalIp = x.IsInternalIp
		c.IsInternalAsn = x.IsInternalAsn
		c.TopNexthopAsns = x.TopNexthopAsns
		c.PdbGlobalName = x.PdbGlobalName
		c.AutoClassification = x.AutoClassification
		c.PreviousClassification = x.PreviousClassification
		c.Provider = x.Provider
		c.NetworkBoundaryConfidence = x.NetworkBoundaryConfidence
		c.ConnectivityTypeConfidence = x.ConnectivityTypeConfidence
		c.ProviderConfidence = x.ProviderConfidence
		c.AutoClassifiedProvider = x.AutoClassifiedProvider
		c.PreviouslyClassifiedProvider = x.PreviouslyClassifiedProvider
		c.PreviouslyClassifiedExternal = x.PreviouslyClassifiedExternal
		c.IpAsnMatched = x.IpAsnMatched
		c.IxMatched = x.IxMatched
		c.NexthopMatched = x.NexthopMatched
		c.ConnectivityTypeMatched = x.ConnectivityTypeMatched
		c.ProviderMatched = x.ProviderMatched
		c.ChangedClassification = x.ChangedClassification
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeviceClassifyInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeviceClassifyInfo:
		x.DeviceId = v.GetDeviceId()
		x.TotalInterfaces = v.GetTotalInterfaces()
		x.PreviouslyClassifiedCounter = v.GetPreviouslyClassifiedCounter()
		x.AutoClassifiedCounter = v.GetAutoClassifiedCounter()
		x.ChangedClassificationCount = v.GetChangedClassificationCount()
		x.IpAsnMatchedCount = v.GetIpAsnMatchedCount()
		x.IxMatchedCount = v.GetIxMatchedCount()
		x.NexthopMatchedCount = v.GetNexthopMatchedCount()
		x.ConnectivityTypeMatchedCount = v.GetConnectivityTypeMatchedCount()
		x.ProviderMatchedCount = v.GetProviderMatchedCount()
		x.Interfaces = v.GetInterfaces()
	default:
		if v, ok := v.(interface{ GetDeviceId() string }); ok {
			x.DeviceId = v.GetDeviceId()
		}
		if v, ok := v.(interface{ GetTotalInterfaces() rune }); ok {
			x.TotalInterfaces = v.GetTotalInterfaces()
		}
		if v, ok := v.(interface{ GetPreviouslyClassifiedCounter() *ClassifyCounter }); ok {
			x.PreviouslyClassifiedCounter = v.GetPreviouslyClassifiedCounter()
		}
		if v, ok := v.(interface{ GetAutoClassifiedCounter() *ClassifyCounter }); ok {
			x.AutoClassifiedCounter = v.GetAutoClassifiedCounter()
		}
		if v, ok := v.(interface{ GetChangedClassificationCount() rune }); ok {
			x.ChangedClassificationCount = v.GetChangedClassificationCount()
		}
		if v, ok := v.(interface{ GetIpAsnMatchedCount() rune }); ok {
			x.IpAsnMatchedCount = v.GetIpAsnMatchedCount()
		}
		if v, ok := v.(interface{ GetIxMatchedCount() rune }); ok {
			x.IxMatchedCount = v.GetIxMatchedCount()
		}
		if v, ok := v.(interface{ GetNexthopMatchedCount() rune }); ok {
			x.NexthopMatchedCount = v.GetNexthopMatchedCount()
		}
		if v, ok := v.(interface{ GetConnectivityTypeMatchedCount() rune }); ok {
			x.ConnectivityTypeMatchedCount = v.GetConnectivityTypeMatchedCount()
		}
		if v, ok := v.(interface{ GetProviderMatchedCount() rune }); ok {
			x.ProviderMatchedCount = v.GetProviderMatchedCount()
		}
		if v, ok := v.(interface {
			GetInterfaces() []*InterfaceClassifyInfo
		}); ok {
			x.Interfaces = v.GetInterfaces()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeviceClassifyInfo) Proto_ShallowClone() (c *DeviceClassifyInfo) {
	if x != nil {
		c = new(DeviceClassifyInfo)
		c.DeviceId = x.DeviceId
		c.TotalInterfaces = x.TotalInterfaces
		c.PreviouslyClassifiedCounter = x.PreviouslyClassifiedCounter
		c.AutoClassifiedCounter = x.AutoClassifiedCounter
		c.ChangedClassificationCount = x.ChangedClassificationCount
		c.IpAsnMatchedCount = x.IpAsnMatchedCount
		c.IxMatchedCount = x.IxMatchedCount
		c.NexthopMatchedCount = x.NexthopMatchedCount
		c.ConnectivityTypeMatchedCount = x.ConnectivityTypeMatchedCount
		c.ProviderMatchedCount = x.ProviderMatchedCount
		c.Interfaces = x.Interfaces
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *InterfaceFilter) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *InterfaceFilter:
		x.Text = v.GetText()
		x.DeviceIds = v.GetDeviceIds()
		x.ConnectivityTypes = v.GetConnectivityTypes()
		x.NetworkBoundaries = v.GetNetworkBoundaries()
		x.Providers = v.GetProviders()
		x.SnmpSpeeds = v.GetSnmpSpeeds()
		x.IpTypes = v.GetIpTypes()
	default:
		if v, ok := v.(interface{ GetText() string }); ok {
			x.Text = v.GetText()
		}
		if v, ok := v.(interface{ GetDeviceIds() []string }); ok {
			x.DeviceIds = v.GetDeviceIds()
		}
		if v, ok := v.(interface{ GetConnectivityTypes() []ConnectivityType }); ok {
			x.ConnectivityTypes = v.GetConnectivityTypes()
		}
		if v, ok := v.(interface{ GetNetworkBoundaries() []NetworkBoundary }); ok {
			x.NetworkBoundaries = v.GetNetworkBoundaries()
		}
		if v, ok := v.(interface{ GetProviders() []string }); ok {
			x.Providers = v.GetProviders()
		}
		if v, ok := v.(interface{ GetSnmpSpeeds() []rune }); ok {
			x.SnmpSpeeds = v.GetSnmpSpeeds()
		}
		if v, ok := v.(interface{ GetIpTypes() []IpFilter }); ok {
			x.IpTypes = v.GetIpTypes()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *InterfaceFilter) Proto_ShallowClone() (c *InterfaceFilter) {
	if x != nil {
		c = new(InterfaceFilter)
		c.Text = x.Text
		c.DeviceIds = x.DeviceIds
		c.ConnectivityTypes = x.ConnectivityTypes
		c.NetworkBoundaries = x.NetworkBoundaries
		c.Providers = x.Providers
		c.SnmpSpeeds = x.SnmpSpeeds
		c.IpTypes = x.IpTypes
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AutoClassifyRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AutoClassifyRequest) Proto_ShallowClone() (c *AutoClassifyRequest) {
	if x != nil {
		c = new(AutoClassifyRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *AutoClassifyResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AutoClassifyResponse:
		x.PercAutoClassified = v.GetPercAutoClassified()
		x.NetChangedTransit = v.GetNetChangedTransit()
		x.NetChangedIx = v.GetNetChangedIx()
		x.NetChangedProvider = v.GetNetChangedProvider()
		x.TotalChangedClassificationCount = v.GetTotalChangedClassificationCount()
		x.TotalAutoClassifyCount = v.GetTotalAutoClassifyCount()
		x.TotalAutoClassifyCounter = v.GetTotalAutoClassifyCounter()
		x.TotalPreviousCounter = v.GetTotalPreviousCounter()
		x.TotalInterfaces = v.GetTotalInterfaces()
		x.Devices = v.GetDevices()
	default:
		if v, ok := v.(interface{ GetPercAutoClassified() float64 }); ok {
			x.PercAutoClassified = v.GetPercAutoClassified()
		}
		if v, ok := v.(interface{ GetNetChangedTransit() rune }); ok {
			x.NetChangedTransit = v.GetNetChangedTransit()
		}
		if v, ok := v.(interface{ GetNetChangedIx() rune }); ok {
			x.NetChangedIx = v.GetNetChangedIx()
		}
		if v, ok := v.(interface{ GetNetChangedProvider() rune }); ok {
			x.NetChangedProvider = v.GetNetChangedProvider()
		}
		if v, ok := v.(interface{ GetTotalChangedClassificationCount() rune }); ok {
			x.TotalChangedClassificationCount = v.GetTotalChangedClassificationCount()
		}
		if v, ok := v.(interface{ GetTotalAutoClassifyCount() rune }); ok {
			x.TotalAutoClassifyCount = v.GetTotalAutoClassifyCount()
		}
		if v, ok := v.(interface{ GetTotalAutoClassifyCounter() *ClassifyCounter }); ok {
			x.TotalAutoClassifyCounter = v.GetTotalAutoClassifyCounter()
		}
		if v, ok := v.(interface{ GetTotalPreviousCounter() *ClassifyCounter }); ok {
			x.TotalPreviousCounter = v.GetTotalPreviousCounter()
		}
		if v, ok := v.(interface{ GetTotalInterfaces() rune }); ok {
			x.TotalInterfaces = v.GetTotalInterfaces()
		}
		if v, ok := v.(interface{ GetDevices() []*DeviceClassifyInfo }); ok {
			x.Devices = v.GetDevices()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AutoClassifyResponse) Proto_ShallowClone() (c *AutoClassifyResponse) {
	if x != nil {
		c = new(AutoClassifyResponse)
		c.PercAutoClassified = x.PercAutoClassified
		c.NetChangedTransit = x.NetChangedTransit
		c.NetChangedIx = x.NetChangedIx
		c.NetChangedProvider = x.NetChangedProvider
		c.TotalChangedClassificationCount = x.TotalChangedClassificationCount
		c.TotalAutoClassifyCount = x.TotalAutoClassifyCount
		c.TotalAutoClassifyCounter = x.TotalAutoClassifyCounter
		c.TotalPreviousCounter = x.TotalPreviousCounter
		c.TotalInterfaces = x.TotalInterfaces
		c.Devices = x.Devices
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ManualClassifyRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ManualClassifyRequest:
		x.InterfaceIds = v.GetInterfaceIds()
		x.ConnectivityType = v.GetConnectivityType()
		x.NetworkBoundary = v.GetNetworkBoundary()
		x.Provider = v.GetProvider()
	default:
		if v, ok := v.(interface{ GetInterfaceIds() []string }); ok {
			x.InterfaceIds = v.GetInterfaceIds()
		}
		if v, ok := v.(interface{ GetConnectivityType() ConnectivityType }); ok {
			x.ConnectivityType = v.GetConnectivityType()
		}
		if v, ok := v.(interface{ GetNetworkBoundary() NetworkBoundary }); ok {
			x.NetworkBoundary = v.GetNetworkBoundary()
		}
		if v, ok := v.(interface{ GetProvider() string }); ok {
			x.Provider = v.GetProvider()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ManualClassifyRequest) Proto_ShallowClone() (c *ManualClassifyRequest) {
	if x != nil {
		c = new(ManualClassifyRequest)
		c.InterfaceIds = x.InterfaceIds
		c.ConnectivityType = x.ConnectivityType
		c.NetworkBoundary = x.NetworkBoundary
		c.Provider = x.Provider
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ManualClassifyResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ManualClassifyResponse:
		x.DeviceIds = v.GetDeviceIds()
	default:
		if v, ok := v.(interface{ GetDeviceIds() []string }); ok {
			x.DeviceIds = v.GetDeviceIds()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ManualClassifyResponse) Proto_ShallowClone() (c *ManualClassifyResponse) {
	if x != nil {
		c = new(ManualClassifyResponse)
		c.DeviceIds = x.DeviceIds
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListInterfaceRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListInterfaceRequest:
		x.Filters = v.GetFilters()
	default:
		if v, ok := v.(interface{ GetFilters() *InterfaceFilter }); ok {
			x.Filters = v.GetFilters()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListInterfaceRequest) Proto_ShallowClone() (c *ListInterfaceRequest) {
	if x != nil {
		c = new(ListInterfaceRequest)
		c.Filters = x.Filters
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ListInterfaceResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListInterfaceResponse:
		x.Interfaces = v.GetInterfaces()
		x.TotalCount = v.GetTotalCount()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetInterfaces() []*Interface }); ok {
			x.Interfaces = v.GetInterfaces()
		}
		if v, ok := v.(interface{ GetTotalCount() rune }); ok {
			x.TotalCount = v.GetTotalCount()
		}
		if v, ok := v.(interface{ GetInvalidCount() rune }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListInterfaceResponse) Proto_ShallowClone() (c *ListInterfaceResponse) {
	if x != nil {
		c = new(ListInterfaceResponse)
		c.Interfaces = x.Interfaces
		c.TotalCount = x.TotalCount
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetInterfaceRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetInterfaceRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetInterfaceRequest) Proto_ShallowClone() (c *GetInterfaceRequest) {
	if x != nil {
		c = new(GetInterfaceRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetInterfaceResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetInterfaceResponse:
		x.Interface = v.GetInterface()
	default:
		if v, ok := v.(interface{ GetInterface() *Interface }); ok {
			x.Interface = v.GetInterface()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetInterfaceResponse) Proto_ShallowClone() (c *GetInterfaceResponse) {
	if x != nil {
		c = new(GetInterfaceResponse)
		c.Interface = x.Interface
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateInterfaceRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateInterfaceRequest:
		x.Interface = v.GetInterface()
	default:
		if v, ok := v.(interface{ GetInterface() *Interface }); ok {
			x.Interface = v.GetInterface()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateInterfaceRequest) Proto_ShallowClone() (c *CreateInterfaceRequest) {
	if x != nil {
		c = new(CreateInterfaceRequest)
		c.Interface = x.Interface
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CreateInterfaceResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateInterfaceResponse:
		x.Interface = v.GetInterface()
	default:
		if v, ok := v.(interface{ GetInterface() *Interface }); ok {
			x.Interface = v.GetInterface()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateInterfaceResponse) Proto_ShallowClone() (c *CreateInterfaceResponse) {
	if x != nil {
		c = new(CreateInterfaceResponse)
		c.Interface = x.Interface
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateInterfaceRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateInterfaceRequest:
		x.Interface = v.GetInterface()
	default:
		if v, ok := v.(interface{ GetInterface() *Interface }); ok {
			x.Interface = v.GetInterface()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateInterfaceRequest) Proto_ShallowClone() (c *UpdateInterfaceRequest) {
	if x != nil {
		c = new(UpdateInterfaceRequest)
		c.Interface = x.Interface
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *UpdateInterfaceResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateInterfaceResponse:
		x.Interface = v.GetInterface()
	default:
		if v, ok := v.(interface{ GetInterface() *Interface }); ok {
			x.Interface = v.GetInterface()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateInterfaceResponse) Proto_ShallowClone() (c *UpdateInterfaceResponse) {
	if x != nil {
		c = new(UpdateInterfaceResponse)
		c.Interface = x.Interface
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteInterfaceRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteInterfaceRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteInterfaceRequest) Proto_ShallowClone() (c *DeleteInterfaceRequest) {
	if x != nil {
		c = new(DeleteInterfaceRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeleteInterfaceResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteInterfaceResponse) Proto_ShallowClone() (c *DeleteInterfaceResponse) {
	if x != nil {
		c = new(DeleteInterfaceResponse)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Match) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Match:
		x.MatchAttribute = v.GetMatchAttribute()
		x.MatchOperator = v.GetMatchOperator()
		x.Pattern = v.GetPattern()
	default:
		if v, ok := v.(interface{ GetMatchAttribute() MatchAttribute }); ok {
			x.MatchAttribute = v.GetMatchAttribute()
		}
		if v, ok := v.(interface{ GetMatchOperator() Operator }); ok {
			x.MatchOperator = v.GetMatchOperator()
		}
		if v, ok := v.(interface{ GetPattern() string }); ok {
			x.Pattern = v.GetPattern()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Match) Proto_ShallowClone() (c *Match) {
	if x != nil {
		c = new(Match)
		c.MatchAttribute = x.MatchAttribute
		c.MatchOperator = x.MatchOperator
		c.Pattern = x.Pattern
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Action) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Action:
		x.SetConnectivityType = v.GetSetConnectivityType()
		x.SetNetworkBoundary = v.GetSetNetworkBoundary()
		x.SetConnectedAsns = v.GetSetConnectedAsns()
		x.SetProvider = v.GetSetProvider()
	default:
		if v, ok := v.(interface{ GetSetConnectivityType() ConnectivityType }); ok {
			x.SetConnectivityType = v.GetSetConnectivityType()
		}
		if v, ok := v.(interface{ GetSetNetworkBoundary() NetworkBoundary }); ok {
			x.SetNetworkBoundary = v.GetSetNetworkBoundary()
		}
		if v, ok := v.(interface{ GetSetConnectedAsns() string }); ok {
			x.SetConnectedAsns = v.GetSetConnectedAsns()
		}
		if v, ok := v.(interface{ GetSetProvider() string }); ok {
			x.SetProvider = v.GetSetProvider()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Action) Proto_ShallowClone() (c *Action) {
	if x != nil {
		c = new(Action)
		c.SetConnectivityType = x.SetConnectivityType
		c.SetNetworkBoundary = x.SetNetworkBoundary
		c.SetConnectedAsns = x.SetConnectedAsns
		c.SetProvider = x.SetProvider
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *DeviceFilter) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeviceFilter:
		x.AllDevices = v.GetAllDevices()
		x.DeviceName = v.GetDeviceName()
		x.DeviceLabels = v.GetDeviceLabels()
		x.DeviceRules = v.GetDeviceRules()
		x.DeviceTypes = v.GetDeviceTypes()
	default:
		if v, ok := v.(interface{ GetAllDevices() bool }); ok {
			x.AllDevices = v.GetAllDevices()
		}
		if v, ok := v.(interface{ GetDeviceName() []string }); ok {
			x.DeviceName = v.GetDeviceName()
		}
		if v, ok := v.(interface{ GetDeviceLabels() []string }); ok {
			x.DeviceLabels = v.GetDeviceLabels()
		}
		if v, ok := v.(interface{ GetDeviceRules() []string }); ok {
			x.DeviceRules = v.GetDeviceRules()
		}
		if v, ok := v.(interface{ GetDeviceTypes() []string }); ok {
			x.DeviceTypes = v.GetDeviceTypes()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeviceFilter) Proto_ShallowClone() (c *DeviceFilter) {
	if x != nil {
		c = new(DeviceFilter)
		c.AllDevices = x.AllDevices
		c.DeviceName = x.DeviceName
		c.DeviceLabels = x.DeviceLabels
		c.DeviceRules = x.DeviceRules
		c.DeviceTypes = x.DeviceTypes
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Rule) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Rule:
		x.Id = v.GetId()
		x.Enabled = v.GetEnabled()
		x.Rank = v.GetRank()
		x.MatchClause = v.GetMatchClause()
		x.ActionSet = v.GetActionSet()
		x.Cdate = v.GetCdate()
		x.Edate = v.GetEdate()
		x.IncludedDevices = v.GetIncludedDevices()
		x.ExcludedDevices = v.GetExcludedDevices()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetEnabled() bool }); ok {
			x.Enabled = v.GetEnabled()
		}
		if v, ok := v.(interface{ GetRank() rune }); ok {
			x.Rank = v.GetRank()
		}
		if v, ok := v.(interface{ GetMatchClause() *Match }); ok {
			x.MatchClause = v.GetMatchClause()
		}
		if v, ok := v.(interface{ GetActionSet() *Action }); ok {
			x.ActionSet = v.GetActionSet()
		}
		if v, ok := v.(interface{ GetCdate() *timestamppb.Timestamp }); ok {
			x.Cdate = v.GetCdate()
		}
		if v, ok := v.(interface{ GetEdate() *timestamppb.Timestamp }); ok {
			x.Edate = v.GetEdate()
		}
		if v, ok := v.(interface{ GetIncludedDevices() *DeviceFilter }); ok {
			x.IncludedDevices = v.GetIncludedDevices()
		}
		if v, ok := v.(interface{ GetExcludedDevices() *DeviceFilter }); ok {
			x.ExcludedDevices = v.GetExcludedDevices()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Rule) Proto_ShallowClone() (c *Rule) {
	if x != nil {
		c = new(Rule)
		c.Id = x.Id
		c.Enabled = x.Enabled
		c.Rank = x.Rank
		c.MatchClause = x.MatchClause
		c.ActionSet = x.ActionSet
		c.Cdate = x.Cdate
		c.Edate = x.Edate
		c.IncludedDevices = x.IncludedDevices
		c.ExcludedDevices = x.ExcludedDevices
	}
	return
}
