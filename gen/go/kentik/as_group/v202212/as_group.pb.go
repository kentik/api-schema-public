// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/as_group/v202212/as_group.proto

package as_group

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type AutonomousSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn  uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AutonomousSystem) Reset() {
	*x = AutonomousSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutonomousSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutonomousSystem) ProtoMessage() {}

func (x *AutonomousSystem) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutonomousSystem.ProtoReflect.Descriptor instead.
func (*AutonomousSystem) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{0}
}

func (x *AutonomousSystem) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *AutonomousSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// {{.Name}}
type ASGroupConcise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Asn         []string               `protobuf:"bytes,3,rep,name=asn,proto3" json:"asn,omitempty"`
	CreatedDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	UpdatedDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
}

func (x *ASGroupConcise) Reset() {
	*x = ASGroupConcise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASGroupConcise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASGroupConcise) ProtoMessage() {}

func (x *ASGroupConcise) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASGroupConcise.ProtoReflect.Descriptor instead.
func (*ASGroupConcise) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{1}
}

func (x *ASGroupConcise) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASGroupConcise) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ASGroupConcise) GetAsn() []string {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *ASGroupConcise) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *ASGroupConcise) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

// {{.Name}}
type ASGroupDetailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Asn         []*AutonomousSystem    `protobuf:"bytes,3,rep,name=asn,proto3" json:"asn,omitempty"`
	CreatedDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	UpdatedDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_date,json=updatedDate,proto3" json:"updated_date,omitempty"`
}

func (x *ASGroupDetailed) Reset() {
	*x = ASGroupDetailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASGroupDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASGroupDetailed) ProtoMessage() {}

func (x *ASGroupDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASGroupDetailed.ProtoReflect.Descriptor instead.
func (*ASGroupDetailed) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{2}
}

func (x *ASGroupDetailed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASGroupDetailed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ASGroupDetailed) GetAsn() []*AutonomousSystem {
	if x != nil {
		return x.Asn
	}
	return nil
}

func (x *ASGroupDetailed) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *ASGroupDetailed) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

// {{.Name}}
type ListASGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListASGroupsRequest) Reset() {
	*x = ListASGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListASGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListASGroupsRequest) ProtoMessage() {}

func (x *ListASGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListASGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListASGroupsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{3}
}

// {{.Name}}
type ListASGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsGroups     []*ASGroupDetailed `protobuf:"bytes,1,rep,name=as_groups,json=asGroups,proto3" json:"as_groups,omitempty"`
	InvalidCount uint32             `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListASGroupsResponse) Reset() {
	*x = ListASGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListASGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListASGroupsResponse) ProtoMessage() {}

func (x *ListASGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListASGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListASGroupsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{4}
}

func (x *ListASGroupsResponse) GetAsGroups() []*ASGroupDetailed {
	if x != nil {
		return x.AsGroups
	}
	return nil
}

func (x *ListASGroupsResponse) GetInvalidCount() uint32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type GetASGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetASGroupRequest) Reset() {
	*x = GetASGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetASGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetASGroupRequest) ProtoMessage() {}

func (x *GetASGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetASGroupRequest.ProtoReflect.Descriptor instead.
func (*GetASGroupRequest) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{5}
}

func (x *GetASGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type GetASGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsGroup *ASGroupDetailed `protobuf:"bytes,1,opt,name=as_group,json=asGroup,proto3" json:"as_group,omitempty"`
}

func (x *GetASGroupResponse) Reset() {
	*x = GetASGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetASGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetASGroupResponse) ProtoMessage() {}

func (x *GetASGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetASGroupResponse.ProtoReflect.Descriptor instead.
func (*GetASGroupResponse) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{6}
}

func (x *GetASGroupResponse) GetAsGroup() *ASGroupDetailed {
	if x != nil {
		return x.AsGroup
	}
	return nil
}

// {{.Name}}
type CreateASGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsGroup *ASGroupConcise `protobuf:"bytes,1,opt,name=as_group,json=asGroup,proto3" json:"as_group,omitempty"`
}

func (x *CreateASGroupRequest) Reset() {
	*x = CreateASGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateASGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateASGroupRequest) ProtoMessage() {}

func (x *CreateASGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateASGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateASGroupRequest) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{7}
}

func (x *CreateASGroupRequest) GetAsGroup() *ASGroupConcise {
	if x != nil {
		return x.AsGroup
	}
	return nil
}

// {{.Name}}
type CreateASGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsGroup *ASGroupDetailed `protobuf:"bytes,1,opt,name=as_group,json=asGroup,proto3" json:"as_group,omitempty"`
}

func (x *CreateASGroupResponse) Reset() {
	*x = CreateASGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateASGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateASGroupResponse) ProtoMessage() {}

func (x *CreateASGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateASGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateASGroupResponse) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{8}
}

func (x *CreateASGroupResponse) GetAsGroup() *ASGroupDetailed {
	if x != nil {
		return x.AsGroup
	}
	return nil
}

// {{.Name}}
type UpdateASGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsGroup *ASGroupConcise `protobuf:"bytes,1,opt,name=as_group,json=asGroup,proto3" json:"as_group,omitempty"`
}

func (x *UpdateASGroupRequest) Reset() {
	*x = UpdateASGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateASGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateASGroupRequest) ProtoMessage() {}

func (x *UpdateASGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateASGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateASGroupRequest) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateASGroupRequest) GetAsGroup() *ASGroupConcise {
	if x != nil {
		return x.AsGroup
	}
	return nil
}

// {{.Name}}
type UpdateASGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsGroup *ASGroupDetailed `protobuf:"bytes,1,opt,name=as_group,json=asGroup,proto3" json:"as_group,omitempty"`
}

func (x *UpdateASGroupResponse) Reset() {
	*x = UpdateASGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateASGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateASGroupResponse) ProtoMessage() {}

func (x *UpdateASGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateASGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateASGroupResponse) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateASGroupResponse) GetAsGroup() *ASGroupDetailed {
	if x != nil {
		return x.AsGroup
	}
	return nil
}

// {{.Name}}
type DeleteASGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteASGroupRequest) Reset() {
	*x = DeleteASGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteASGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteASGroupRequest) ProtoMessage() {}

func (x *DeleteASGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteASGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteASGroupRequest) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteASGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteASGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteASGroupResponse) Reset() {
	*x = DeleteASGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteASGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteASGroupResponse) ProtoMessage() {}

func (x *DeleteASGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_as_group_v202212_as_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteASGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteASGroupResponse) Descriptor() ([]byte, []int) {
	return file_kentik_as_group_v202212_as_group_proto_rawDescGZIP(), []int{12}
}

var File_kentik_as_group_v202212_as_group_proto protoreflect.FileDescriptor

var file_kentik_as_group_v202212_as_group_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x38, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf3, 0x02, 0x0a, 0x0e,
	0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32,
	0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x55,
	0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x53, 0x4e,
	0x73, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x29, 0x92, 0x41, 0x23, 0x32, 0x21,
	0x4c, 0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54, 0x43,
	0x29, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x9f, 0x03, 0x0a, 0x0f, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x41,
	0x53, 0x4e, 0x73, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x29, 0x92, 0x41, 0x23,
	0x32, 0x21, 0x4c, 0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x28, 0x55,
	0x54, 0x43, 0x29, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x53, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32,
	0x2e, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x08, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x65,
	0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x53, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x87, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x08, 0x61, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x32, 0x2e, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x07, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x08, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e,
	0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x42, 0x29,
	0x92, 0x41, 0x23, 0x32, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x53,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x53, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x08,
	0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x61, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x87, 0x01, 0x0a,
	0x08, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x42, 0x43, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x4e,
	0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x08, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x41, 0x53, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x32, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x61, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x50, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x22, 0x32, 0x20, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0xe0, 0x41, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x53, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfd, 0x0b, 0x0a,
	0x0e, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xf4, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x2c, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x53, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01,
	0x92, 0x41, 0x4a, 0x12, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x41, 0x53,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x1a, 0x25, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x2a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0xf2, 0xd7, 0x02,
	0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x61, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x92, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa,
	0x01, 0x92, 0x41, 0x69, 0x12, 0x25, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x1a, 0x34, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44,
	0x2e, 0x2a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xd7, 0x02,
	0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x61, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xae, 0x02, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x53, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x92,
	0x41, 0x7d, 0x12, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x61, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x1a, 0x51, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x53,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x2a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2,
	0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x22, 0x1a, 0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x32, 0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xde, 0x02, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x53,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x01,
	0x92, 0x41, 0x9e, 0x01, 0x12, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x1a, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x2a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0xf2, 0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x7b, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x02,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad,
	0x01, 0x92, 0x41, 0x6b, 0x12, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x1a, 0x35, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x41, 0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x49, 0x44, 0x2e,
	0x2a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x53, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2,
	0xd7, 0x02, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f,
	0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32,
	0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x2c,
	0xca, 0x41, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x90, 0xd8, 0x02, 0x03, 0x42, 0xcd, 0x04, 0x5a,
	0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x32, 0x3b, 0x61, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x92, 0x41, 0xfc, 0x03,
	0x12, 0x95, 0x02, 0x0a, 0x1a, 0x41, 0x53, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x12,
	0xa6, 0x01, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x0a, 0x54, 0x68, 0x65,
	0x20, 0x41, 0x53, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x53, 0x20,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x0a, 0x0a, 0x2a, 0x20, 0x2a, 0x2a, 0x41, 0x53, 0x20,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2a, 0x2a, 0x3a, 0x20, 0x41, 0x53, 0x4e, 0x73, 0x20, 0x63, 0x61,
	0x6e, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x41,
	0x53, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32,
	0x07, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a,
	0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f,
	0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13,
	0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a,
	0x25, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30,
	0x2f, 0x41, 0x62, 0x30, 0x39, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x41, 0x62, 0x30, 0x39, 0x2d, 0x41,
	0x50, 0x49, 0x73, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_as_group_v202212_as_group_proto_rawDescOnce sync.Once
	file_kentik_as_group_v202212_as_group_proto_rawDescData = file_kentik_as_group_v202212_as_group_proto_rawDesc
)

func file_kentik_as_group_v202212_as_group_proto_rawDescGZIP() []byte {
	file_kentik_as_group_v202212_as_group_proto_rawDescOnce.Do(func() {
		file_kentik_as_group_v202212_as_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_as_group_v202212_as_group_proto_rawDescData)
	})
	return file_kentik_as_group_v202212_as_group_proto_rawDescData
}

var file_kentik_as_group_v202212_as_group_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_kentik_as_group_v202212_as_group_proto_goTypes = []interface{}{
	(*AutonomousSystem)(nil),      // 0: kentik.as_group.v202212.AutonomousSystem
	(*ASGroupConcise)(nil),        // 1: kentik.as_group.v202212.ASGroupConcise
	(*ASGroupDetailed)(nil),       // 2: kentik.as_group.v202212.ASGroupDetailed
	(*ListASGroupsRequest)(nil),   // 3: kentik.as_group.v202212.ListASGroupsRequest
	(*ListASGroupsResponse)(nil),  // 4: kentik.as_group.v202212.ListASGroupsResponse
	(*GetASGroupRequest)(nil),     // 5: kentik.as_group.v202212.GetASGroupRequest
	(*GetASGroupResponse)(nil),    // 6: kentik.as_group.v202212.GetASGroupResponse
	(*CreateASGroupRequest)(nil),  // 7: kentik.as_group.v202212.CreateASGroupRequest
	(*CreateASGroupResponse)(nil), // 8: kentik.as_group.v202212.CreateASGroupResponse
	(*UpdateASGroupRequest)(nil),  // 9: kentik.as_group.v202212.UpdateASGroupRequest
	(*UpdateASGroupResponse)(nil), // 10: kentik.as_group.v202212.UpdateASGroupResponse
	(*DeleteASGroupRequest)(nil),  // 11: kentik.as_group.v202212.DeleteASGroupRequest
	(*DeleteASGroupResponse)(nil), // 12: kentik.as_group.v202212.DeleteASGroupResponse
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_kentik_as_group_v202212_as_group_proto_depIdxs = []int32{
	13, // 0: kentik.as_group.v202212.ASGroupConcise.created_date:type_name -> google.protobuf.Timestamp
	13, // 1: kentik.as_group.v202212.ASGroupConcise.updated_date:type_name -> google.protobuf.Timestamp
	0,  // 2: kentik.as_group.v202212.ASGroupDetailed.asn:type_name -> kentik.as_group.v202212.AutonomousSystem
	13, // 3: kentik.as_group.v202212.ASGroupDetailed.created_date:type_name -> google.protobuf.Timestamp
	13, // 4: kentik.as_group.v202212.ASGroupDetailed.updated_date:type_name -> google.protobuf.Timestamp
	2,  // 5: kentik.as_group.v202212.ListASGroupsResponse.as_groups:type_name -> kentik.as_group.v202212.ASGroupDetailed
	2,  // 6: kentik.as_group.v202212.GetASGroupResponse.as_group:type_name -> kentik.as_group.v202212.ASGroupDetailed
	1,  // 7: kentik.as_group.v202212.CreateASGroupRequest.as_group:type_name -> kentik.as_group.v202212.ASGroupConcise
	2,  // 8: kentik.as_group.v202212.CreateASGroupResponse.as_group:type_name -> kentik.as_group.v202212.ASGroupDetailed
	1,  // 9: kentik.as_group.v202212.UpdateASGroupRequest.as_group:type_name -> kentik.as_group.v202212.ASGroupConcise
	2,  // 10: kentik.as_group.v202212.UpdateASGroupResponse.as_group:type_name -> kentik.as_group.v202212.ASGroupDetailed
	3,  // 11: kentik.as_group.v202212.ASGroupService.ListASGroups:input_type -> kentik.as_group.v202212.ListASGroupsRequest
	5,  // 12: kentik.as_group.v202212.ASGroupService.GetASGroup:input_type -> kentik.as_group.v202212.GetASGroupRequest
	7,  // 13: kentik.as_group.v202212.ASGroupService.CreateASGroup:input_type -> kentik.as_group.v202212.CreateASGroupRequest
	9,  // 14: kentik.as_group.v202212.ASGroupService.UpdateASGroup:input_type -> kentik.as_group.v202212.UpdateASGroupRequest
	11, // 15: kentik.as_group.v202212.ASGroupService.DeleteASGroup:input_type -> kentik.as_group.v202212.DeleteASGroupRequest
	4,  // 16: kentik.as_group.v202212.ASGroupService.ListASGroups:output_type -> kentik.as_group.v202212.ListASGroupsResponse
	6,  // 17: kentik.as_group.v202212.ASGroupService.GetASGroup:output_type -> kentik.as_group.v202212.GetASGroupResponse
	8,  // 18: kentik.as_group.v202212.ASGroupService.CreateASGroup:output_type -> kentik.as_group.v202212.CreateASGroupResponse
	10, // 19: kentik.as_group.v202212.ASGroupService.UpdateASGroup:output_type -> kentik.as_group.v202212.UpdateASGroupResponse
	12, // 20: kentik.as_group.v202212.ASGroupService.DeleteASGroup:output_type -> kentik.as_group.v202212.DeleteASGroupResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_kentik_as_group_v202212_as_group_proto_init() }
func file_kentik_as_group_v202212_as_group_proto_init() {
	if File_kentik_as_group_v202212_as_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_as_group_v202212_as_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutonomousSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASGroupConcise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASGroupDetailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListASGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListASGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetASGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetASGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateASGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateASGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateASGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateASGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteASGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_as_group_v202212_as_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteASGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_as_group_v202212_as_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_as_group_v202212_as_group_proto_goTypes,
		DependencyIndexes: file_kentik_as_group_v202212_as_group_proto_depIdxs,
		MessageInfos:      file_kentik_as_group_v202212_as_group_proto_msgTypes,
	}.Build()
	File_kentik_as_group_v202212_as_group_proto = out.File
	file_kentik_as_group_v202212_as_group_proto_rawDesc = nil
	file_kentik_as_group_v202212_as_group_proto_goTypes = nil
	file_kentik_as_group_v202212_as_group_proto_depIdxs = nil
}
