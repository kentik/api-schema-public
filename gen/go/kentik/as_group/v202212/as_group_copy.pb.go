// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: kentik/as_group/v202212/as_group.proto

package as_group

import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *AutonomousSystem) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *AutonomousSystem:
		x.Asn = v.GetAsn()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetAsn() uint32 }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *AutonomousSystem) Proto_ShallowClone() (c *AutonomousSystem) {
	if x != nil {
		c = new(AutonomousSystem)
		c.Asn = x.Asn
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *ASGroupConcise) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ASGroupConcise:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Asn = v.GetAsn()
		x.CreatedDate = v.GetCreatedDate()
		x.UpdatedDate = v.GetUpdatedDate()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetAsn() []string }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetCreatedDate() *timestamppb.Timestamp }); ok {
			x.CreatedDate = v.GetCreatedDate()
		}
		if v, ok := v.(interface{ GetUpdatedDate() *timestamppb.Timestamp }); ok {
			x.UpdatedDate = v.GetUpdatedDate()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ASGroupConcise) Proto_ShallowClone() (c *ASGroupConcise) {
	if x != nil {
		c = new(ASGroupConcise)
		c.Id = x.Id
		c.Name = x.Name
		c.Asn = x.Asn
		c.CreatedDate = x.CreatedDate
		c.UpdatedDate = x.UpdatedDate
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *ASGroupDetailed) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ASGroupDetailed:
		x.Id = v.GetId()
		x.Name = v.GetName()
		x.Asn = v.GetAsn()
		x.CreatedDate = v.GetCreatedDate()
		x.UpdatedDate = v.GetUpdatedDate()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetAsn() []*AutonomousSystem }); ok {
			x.Asn = v.GetAsn()
		}
		if v, ok := v.(interface{ GetCreatedDate() *timestamppb.Timestamp }); ok {
			x.CreatedDate = v.GetCreatedDate()
		}
		if v, ok := v.(interface{ GetUpdatedDate() *timestamppb.Timestamp }); ok {
			x.UpdatedDate = v.GetUpdatedDate()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ASGroupDetailed) Proto_ShallowClone() (c *ASGroupDetailed) {
	if x != nil {
		c = new(ASGroupDetailed)
		c.Id = x.Id
		c.Name = x.Name
		c.Asn = x.Asn
		c.CreatedDate = x.CreatedDate
		c.UpdatedDate = x.UpdatedDate
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *ListASGroupsRequest) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListASGroupsRequest) Proto_ShallowClone() (c *ListASGroupsRequest) {
	if x != nil {
		c = new(ListASGroupsRequest)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *ListASGroupsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ListASGroupsResponse:
		x.AsGroups = v.GetAsGroups()
		x.InvalidCount = v.GetInvalidCount()
	default:
		if v, ok := v.(interface{ GetAsGroups() []*ASGroupDetailed }); ok {
			x.AsGroups = v.GetAsGroups()
		}
		if v, ok := v.(interface{ GetInvalidCount() uint32 }); ok {
			x.InvalidCount = v.GetInvalidCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ListASGroupsResponse) Proto_ShallowClone() (c *ListASGroupsResponse) {
	if x != nil {
		c = new(ListASGroupsResponse)
		c.AsGroups = x.AsGroups
		c.InvalidCount = x.InvalidCount
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *GetASGroupRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetASGroupRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetASGroupRequest) Proto_ShallowClone() (c *GetASGroupRequest) {
	if x != nil {
		c = new(GetASGroupRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *GetASGroupResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetASGroupResponse:
		x.AsGroup = v.GetAsGroup()
	default:
		if v, ok := v.(interface{ GetAsGroup() *ASGroupDetailed }); ok {
			x.AsGroup = v.GetAsGroup()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetASGroupResponse) Proto_ShallowClone() (c *GetASGroupResponse) {
	if x != nil {
		c = new(GetASGroupResponse)
		c.AsGroup = x.AsGroup
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *CreateASGroupRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateASGroupRequest:
		x.AsGroup = v.GetAsGroup()
	default:
		if v, ok := v.(interface{ GetAsGroup() *ASGroupConcise }); ok {
			x.AsGroup = v.GetAsGroup()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateASGroupRequest) Proto_ShallowClone() (c *CreateASGroupRequest) {
	if x != nil {
		c = new(CreateASGroupRequest)
		c.AsGroup = x.AsGroup
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *CreateASGroupResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CreateASGroupResponse:
		x.AsGroup = v.GetAsGroup()
	default:
		if v, ok := v.(interface{ GetAsGroup() *ASGroupDetailed }); ok {
			x.AsGroup = v.GetAsGroup()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CreateASGroupResponse) Proto_ShallowClone() (c *CreateASGroupResponse) {
	if x != nil {
		c = new(CreateASGroupResponse)
		c.AsGroup = x.AsGroup
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *UpdateASGroupRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateASGroupRequest:
		x.AsGroup = v.GetAsGroup()
	default:
		if v, ok := v.(interface{ GetAsGroup() *ASGroupConcise }); ok {
			x.AsGroup = v.GetAsGroup()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateASGroupRequest) Proto_ShallowClone() (c *UpdateASGroupRequest) {
	if x != nil {
		c = new(UpdateASGroupRequest)
		c.AsGroup = x.AsGroup
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *UpdateASGroupResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *UpdateASGroupResponse:
		x.AsGroup = v.GetAsGroup()
	default:
		if v, ok := v.(interface{ GetAsGroup() *ASGroupDetailed }); ok {
			x.AsGroup = v.GetAsGroup()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *UpdateASGroupResponse) Proto_ShallowClone() (c *UpdateASGroupResponse) {
	if x != nil {
		c = new(UpdateASGroupResponse)
		c.AsGroup = x.AsGroup
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *DeleteASGroupRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *DeleteASGroupRequest:
		x.Id = v.GetId()
	default:
		if v, ok := v.(interface{ GetId() string }); ok {
			x.Id = v.GetId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteASGroupRequest) Proto_ShallowClone() (c *DeleteASGroupRequest) {
	if x != nil {
		c = new(DeleteASGroupRequest)
		c.Id = x.Id
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
// WARNING: Optional fields may be ignored, if v is not the receiver type.
func (x *DeleteASGroupResponse) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *DeleteASGroupResponse) Proto_ShallowClone() (c *DeleteASGroupResponse) {
	if x != nil {
		c = new(DeleteASGroupResponse)
	}
	return
}
