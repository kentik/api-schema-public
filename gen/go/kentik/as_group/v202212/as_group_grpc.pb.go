// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package as_group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ASGroupServiceClient is the client API for ASGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ASGroupServiceClient interface {
	ListASGroups(ctx context.Context, in *ListASGroupsRequest, opts ...grpc.CallOption) (*ListASGroupsResponse, error)
	GetASGroup(ctx context.Context, in *GetASGroupRequest, opts ...grpc.CallOption) (*GetASGroupResponse, error)
	CreateASGroup(ctx context.Context, in *CreateASGroupRequest, opts ...grpc.CallOption) (*CreateASGroupResponse, error)
	UpdateASGroup(ctx context.Context, in *UpdateASGroupRequest, opts ...grpc.CallOption) (*UpdateASGroupResponse, error)
	DeleteASGroup(ctx context.Context, in *DeleteASGroupRequest, opts ...grpc.CallOption) (*DeleteASGroupResponse, error)
}

type aSGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewASGroupServiceClient(cc grpc.ClientConnInterface) ASGroupServiceClient {
	return &aSGroupServiceClient{cc}
}

func (c *aSGroupServiceClient) ListASGroups(ctx context.Context, in *ListASGroupsRequest, opts ...grpc.CallOption) (*ListASGroupsResponse, error) {
	out := new(ListASGroupsResponse)
	err := c.cc.Invoke(ctx, "/kentik.as_group.v202212.ASGroupService/ListASGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSGroupServiceClient) GetASGroup(ctx context.Context, in *GetASGroupRequest, opts ...grpc.CallOption) (*GetASGroupResponse, error) {
	out := new(GetASGroupResponse)
	err := c.cc.Invoke(ctx, "/kentik.as_group.v202212.ASGroupService/GetASGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSGroupServiceClient) CreateASGroup(ctx context.Context, in *CreateASGroupRequest, opts ...grpc.CallOption) (*CreateASGroupResponse, error) {
	out := new(CreateASGroupResponse)
	err := c.cc.Invoke(ctx, "/kentik.as_group.v202212.ASGroupService/CreateASGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSGroupServiceClient) UpdateASGroup(ctx context.Context, in *UpdateASGroupRequest, opts ...grpc.CallOption) (*UpdateASGroupResponse, error) {
	out := new(UpdateASGroupResponse)
	err := c.cc.Invoke(ctx, "/kentik.as_group.v202212.ASGroupService/UpdateASGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSGroupServiceClient) DeleteASGroup(ctx context.Context, in *DeleteASGroupRequest, opts ...grpc.CallOption) (*DeleteASGroupResponse, error) {
	out := new(DeleteASGroupResponse)
	err := c.cc.Invoke(ctx, "/kentik.as_group.v202212.ASGroupService/DeleteASGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ASGroupServiceServer is the server API for ASGroupService service.
// All implementations should embed UnimplementedASGroupServiceServer
// for forward compatibility
type ASGroupServiceServer interface {
	ListASGroups(context.Context, *ListASGroupsRequest) (*ListASGroupsResponse, error)
	GetASGroup(context.Context, *GetASGroupRequest) (*GetASGroupResponse, error)
	CreateASGroup(context.Context, *CreateASGroupRequest) (*CreateASGroupResponse, error)
	UpdateASGroup(context.Context, *UpdateASGroupRequest) (*UpdateASGroupResponse, error)
	DeleteASGroup(context.Context, *DeleteASGroupRequest) (*DeleteASGroupResponse, error)
}

// UnimplementedASGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedASGroupServiceServer struct {
}

func (UnimplementedASGroupServiceServer) ListASGroups(context.Context, *ListASGroupsRequest) (*ListASGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListASGroups not implemented")
}
func (UnimplementedASGroupServiceServer) GetASGroup(context.Context, *GetASGroupRequest) (*GetASGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetASGroup not implemented")
}
func (UnimplementedASGroupServiceServer) CreateASGroup(context.Context, *CreateASGroupRequest) (*CreateASGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateASGroup not implemented")
}
func (UnimplementedASGroupServiceServer) UpdateASGroup(context.Context, *UpdateASGroupRequest) (*UpdateASGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateASGroup not implemented")
}
func (UnimplementedASGroupServiceServer) DeleteASGroup(context.Context, *DeleteASGroupRequest) (*DeleteASGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteASGroup not implemented")
}

// UnsafeASGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ASGroupServiceServer will
// result in compilation errors.
type UnsafeASGroupServiceServer interface {
	mustEmbedUnimplementedASGroupServiceServer()
}

func RegisterASGroupServiceServer(s grpc.ServiceRegistrar, srv ASGroupServiceServer) {
	s.RegisterService(&ASGroupService_ServiceDesc, srv)
}

func _ASGroupService_ListASGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListASGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASGroupServiceServer).ListASGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.as_group.v202212.ASGroupService/ListASGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASGroupServiceServer).ListASGroups(ctx, req.(*ListASGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASGroupService_GetASGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetASGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASGroupServiceServer).GetASGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.as_group.v202212.ASGroupService/GetASGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASGroupServiceServer).GetASGroup(ctx, req.(*GetASGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASGroupService_CreateASGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateASGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASGroupServiceServer).CreateASGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.as_group.v202212.ASGroupService/CreateASGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASGroupServiceServer).CreateASGroup(ctx, req.(*CreateASGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASGroupService_UpdateASGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateASGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASGroupServiceServer).UpdateASGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.as_group.v202212.ASGroupService/UpdateASGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASGroupServiceServer).UpdateASGroup(ctx, req.(*UpdateASGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASGroupService_DeleteASGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteASGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASGroupServiceServer).DeleteASGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.as_group.v202212.ASGroupService/DeleteASGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASGroupServiceServer).DeleteASGroup(ctx, req.(*DeleteASGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ASGroupService_ServiceDesc is the grpc.ServiceDesc for ASGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ASGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.as_group.v202212.ASGroupService",
	HandlerType: (*ASGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListASGroups",
			Handler:    _ASGroupService_ListASGroups_Handler,
		},
		{
			MethodName: "GetASGroup",
			Handler:    _ASGroupService_GetASGroup_Handler,
		},
		{
			MethodName: "CreateASGroup",
			Handler:    _ASGroupService_CreateASGroup_Handler,
		},
		{
			MethodName: "UpdateASGroup",
			Handler:    _ASGroupService_UpdateASGroup_Handler,
		},
		{
			MethodName: "DeleteASGroup",
			Handler:    _ASGroupService_DeleteASGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/as_group/v202212/as_group.proto",
}
