// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cloud_export

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CloudExportAdminServiceClient is the client API for CloudExportAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudExportAdminServiceClient interface {
	CreateCloudExport(ctx context.Context, in *CreateCloudExportRequest, opts ...grpc.CallOption) (*CreateCloudExportResponse, error)
	GetCloudExport(ctx context.Context, in *GetCloudExportRequest, opts ...grpc.CallOption) (*GetCloudExportResponse, error)
	UpdateCloudExport(ctx context.Context, in *UpdateCloudExportRequest, opts ...grpc.CallOption) (*UpdateCloudExportResponse, error)
	DeleteCloudExport(ctx context.Context, in *DeleteCloudExportRequest, opts ...grpc.CallOption) (*DeleteCloudExportResponse, error)
}

type cloudExportAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudExportAdminServiceClient(cc grpc.ClientConnInterface) CloudExportAdminServiceClient {
	return &cloudExportAdminServiceClient{cc}
}

func (c *cloudExportAdminServiceClient) CreateCloudExport(ctx context.Context, in *CreateCloudExportRequest, opts ...grpc.CallOption) (*CreateCloudExportResponse, error) {
	out := new(CreateCloudExportResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_export.v202012.CloudExportAdminService/CreateCloudExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudExportAdminServiceClient) GetCloudExport(ctx context.Context, in *GetCloudExportRequest, opts ...grpc.CallOption) (*GetCloudExportResponse, error) {
	out := new(GetCloudExportResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_export.v202012.CloudExportAdminService/GetCloudExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudExportAdminServiceClient) UpdateCloudExport(ctx context.Context, in *UpdateCloudExportRequest, opts ...grpc.CallOption) (*UpdateCloudExportResponse, error) {
	out := new(UpdateCloudExportResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_export.v202012.CloudExportAdminService/UpdateCloudExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudExportAdminServiceClient) DeleteCloudExport(ctx context.Context, in *DeleteCloudExportRequest, opts ...grpc.CallOption) (*DeleteCloudExportResponse, error) {
	out := new(DeleteCloudExportResponse)
	err := c.cc.Invoke(ctx, "/kentik.cloud_export.v202012.CloudExportAdminService/DeleteCloudExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudExportAdminServiceServer is the server API for CloudExportAdminService service.
// All implementations should embed UnimplementedCloudExportAdminServiceServer
// for forward compatibility
type CloudExportAdminServiceServer interface {
	CreateCloudExport(context.Context, *CreateCloudExportRequest) (*CreateCloudExportResponse, error)
	GetCloudExport(context.Context, *GetCloudExportRequest) (*GetCloudExportResponse, error)
	UpdateCloudExport(context.Context, *UpdateCloudExportRequest) (*UpdateCloudExportResponse, error)
	DeleteCloudExport(context.Context, *DeleteCloudExportRequest) (*DeleteCloudExportResponse, error)
}

// UnimplementedCloudExportAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCloudExportAdminServiceServer struct {
}

func (UnimplementedCloudExportAdminServiceServer) CreateCloudExport(context.Context, *CreateCloudExportRequest) (*CreateCloudExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudExport not implemented")
}
func (UnimplementedCloudExportAdminServiceServer) GetCloudExport(context.Context, *GetCloudExportRequest) (*GetCloudExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudExport not implemented")
}
func (UnimplementedCloudExportAdminServiceServer) UpdateCloudExport(context.Context, *UpdateCloudExportRequest) (*UpdateCloudExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudExport not implemented")
}
func (UnimplementedCloudExportAdminServiceServer) DeleteCloudExport(context.Context, *DeleteCloudExportRequest) (*DeleteCloudExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudExport not implemented")
}

// UnsafeCloudExportAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudExportAdminServiceServer will
// result in compilation errors.
type UnsafeCloudExportAdminServiceServer interface {
	mustEmbedUnimplementedCloudExportAdminServiceServer()
}

func RegisterCloudExportAdminServiceServer(s *grpc.Server, srv CloudExportAdminServiceServer) {
	s.RegisterService(&_CloudExportAdminService_serviceDesc, srv)
}

func _CloudExportAdminService_CreateCloudExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudExportAdminServiceServer).CreateCloudExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_export.v202012.CloudExportAdminService/CreateCloudExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudExportAdminServiceServer).CreateCloudExport(ctx, req.(*CreateCloudExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudExportAdminService_GetCloudExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudExportAdminServiceServer).GetCloudExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_export.v202012.CloudExportAdminService/GetCloudExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudExportAdminServiceServer).GetCloudExport(ctx, req.(*GetCloudExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudExportAdminService_UpdateCloudExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudExportAdminServiceServer).UpdateCloudExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_export.v202012.CloudExportAdminService/UpdateCloudExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudExportAdminServiceServer).UpdateCloudExport(ctx, req.(*UpdateCloudExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudExportAdminService_DeleteCloudExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudExportAdminServiceServer).DeleteCloudExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kentik.cloud_export.v202012.CloudExportAdminService/DeleteCloudExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudExportAdminServiceServer).DeleteCloudExport(ctx, req.(*DeleteCloudExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudExportAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kentik.cloud_export.v202012.CloudExportAdminService",
	HandlerType: (*CloudExportAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudExport",
			Handler:    _CloudExportAdminService_CreateCloudExport_Handler,
		},
		{
			MethodName: "GetCloudExport",
			Handler:    _CloudExportAdminService_GetCloudExport_Handler,
		},
		{
			MethodName: "UpdateCloudExport",
			Handler:    _CloudExportAdminService_UpdateCloudExport_Handler,
		},
		{
			MethodName: "DeleteCloudExport",
			Handler:    _CloudExportAdminService_DeleteCloudExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kentik/cloud_export/v202012/cloud_export.proto",
}
