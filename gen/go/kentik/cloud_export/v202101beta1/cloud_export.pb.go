// Cloud exports management

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: kentik/cloud_export/v202101beta1/cloud_export.proto

package cloud_export

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-schema-public/gen/go/kentik/core/v202012alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CloudExportType int32

const (
	// Invalid or incomplete exports.
	CloudExportType_CLOUD_EXPORT_TYPE_UNSPECIFIED CloudExportType = 0
	// Cloud exports that are managed by Kentik.
	CloudExportType_CLOUD_EXPORT_TYPE_KENTIK_MANAGED CloudExportType = 1
	// Exports that are managed by Kentik customers (eg. by running an agent)
	CloudExportType_CLOUD_EXPORT_TYPE_CUSTOMER_MANAGED CloudExportType = 2
)

// Enum value maps for CloudExportType.
var (
	CloudExportType_name = map[int32]string{
		0: "CLOUD_EXPORT_TYPE_UNSPECIFIED",
		1: "CLOUD_EXPORT_TYPE_KENTIK_MANAGED",
		2: "CLOUD_EXPORT_TYPE_CUSTOMER_MANAGED",
	}
	CloudExportType_value = map[string]int32{
		"CLOUD_EXPORT_TYPE_UNSPECIFIED":      0,
		"CLOUD_EXPORT_TYPE_KENTIK_MANAGED":   1,
		"CLOUD_EXPORT_TYPE_CUSTOMER_MANAGED": 2,
	}
)

func (x CloudExportType) Enum() *CloudExportType {
	p := new(CloudExportType)
	*p = x
	return p
}

func (x CloudExportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudExportType) Descriptor() protoreflect.EnumDescriptor {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_enumTypes[0].Descriptor()
}

func (CloudExportType) Type() protoreflect.EnumType {
	return &file_kentik_cloud_export_v202101beta1_cloud_export_proto_enumTypes[0]
}

func (x CloudExportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudExportType.Descriptor instead.
func (CloudExportType) EnumDescriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{0}
}

// The CloudExport message defines a cloud export task
type CloudExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The internal cloud export identifier. This is Read-only and assigned by Kentik.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The kind of export task
	Type CloudExportType `protobuf:"varint,15,opt,name=type,proto3,enum=kentik.cloud_export.v202101beta1.CloudExportType" json:"type,omitempty"`
	// Whether this task is enabled and intended to run, or disabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// A short name for this export.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// An optional, longer description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Hostname of the Kentik deployment where the API calls related to this export should go, eg. api.kentik.com
	ApiRoot string `protobuf:"bytes,5,opt,name=api_root,json=apiRoot,proto3" json:"api_root,omitempty"`
	// Hostname of the Kentik deployment where the data generated by this export should go, eg. flow.kentik.com
	FlowDest string `protobuf:"bytes,6,opt,name=flow_dest,json=flowDest,proto3" json:"flow_dest,omitempty"`
	// The identifier of the Kentik plan associated with this task.
	PlanId string `protobuf:"bytes,7,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// The cloud provider targeted by this export (eg. aws, azure, gce, ibm...)
	CloudProvider string `protobuf:"bytes,8,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	// Properties specific to the cloud provider above.
	//
	// Types that are assignable to Properties:
	//	*CloudExport_Aws
	//	*CloudExport_Azure
	//	*CloudExport_Gce
	//	*CloudExport_Ibm
	Properties isCloudExport_Properties `protobuf_oneof:"properties"`
	// Optional BGP settings.
	Bgp *BgpProperties `protobuf:"bytes,13,opt,name=bgp,proto3" json:"bgp,omitempty"`
	// The most current status Kentik has about this export.
	CurrentStatus *Status `protobuf:"bytes,14,opt,name=current_status,json=currentStatus,proto3" json:"current_status,omitempty"`
}

func (x *CloudExport) Reset() {
	*x = CloudExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudExport) ProtoMessage() {}

func (x *CloudExport) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudExport.ProtoReflect.Descriptor instead.
func (*CloudExport) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{0}
}

func (x *CloudExport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudExport) GetType() CloudExportType {
	if x != nil {
		return x.Type
	}
	return CloudExportType_CLOUD_EXPORT_TYPE_UNSPECIFIED
}

func (x *CloudExport) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CloudExport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudExport) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CloudExport) GetApiRoot() string {
	if x != nil {
		return x.ApiRoot
	}
	return ""
}

func (x *CloudExport) GetFlowDest() string {
	if x != nil {
		return x.FlowDest
	}
	return ""
}

func (x *CloudExport) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *CloudExport) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (m *CloudExport) GetProperties() isCloudExport_Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (x *CloudExport) GetAws() *AwsProperties {
	if x, ok := x.GetProperties().(*CloudExport_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *CloudExport) GetAzure() *AzureProperties {
	if x, ok := x.GetProperties().(*CloudExport_Azure); ok {
		return x.Azure
	}
	return nil
}

func (x *CloudExport) GetGce() *GceProperties {
	if x, ok := x.GetProperties().(*CloudExport_Gce); ok {
		return x.Gce
	}
	return nil
}

func (x *CloudExport) GetIbm() *IbmProperties {
	if x, ok := x.GetProperties().(*CloudExport_Ibm); ok {
		return x.Ibm
	}
	return nil
}

func (x *CloudExport) GetBgp() *BgpProperties {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *CloudExport) GetCurrentStatus() *Status {
	if x != nil {
		return x.CurrentStatus
	}
	return nil
}

type isCloudExport_Properties interface {
	isCloudExport_Properties()
}

type CloudExport_Aws struct {
	Aws *AwsProperties `protobuf:"bytes,9,opt,name=aws,proto3,oneof"`
}

type CloudExport_Azure struct {
	Azure *AzureProperties `protobuf:"bytes,10,opt,name=azure,proto3,oneof"`
}

type CloudExport_Gce struct {
	Gce *GceProperties `protobuf:"bytes,11,opt,name=gce,proto3,oneof"`
}

type CloudExport_Ibm struct {
	Ibm *IbmProperties `protobuf:"bytes,12,opt,name=ibm,proto3,oneof"`
}

func (*CloudExport_Aws) isCloudExport_Properties() {}

func (*CloudExport_Azure) isCloudExport_Properties() {}

func (*CloudExport_Gce) isCloudExport_Properties() {}

func (*CloudExport_Ibm) isCloudExport_Properties() {}

// Optional BGP related settings.
type BgpProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, apply BGP data discovered via another device to the flow from this export.
	ApplyBgp bool `protobuf:"varint,1,opt,name=apply_bgp,json=applyBgp,proto3" json:"apply_bgp,omitempty"`
	// Which other device to get BGP data from
	UseBgpDeviceId string `protobuf:"bytes,2,opt,name=use_bgp_device_id,json=useBgpDeviceId,proto3" json:"use_bgp_device_id,omitempty"`
	// FIXME: unclear. "device", "other_device" or "none"?
	DeviceBgpType string `protobuf:"bytes,3,opt,name=device_bgp_type,json=deviceBgpType,proto3" json:"device_bgp_type,omitempty"`
}

func (x *BgpProperties) Reset() {
	*x = BgpProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpProperties) ProtoMessage() {}

func (x *BgpProperties) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpProperties.ProtoReflect.Descriptor instead.
func (*BgpProperties) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{1}
}

func (x *BgpProperties) GetApplyBgp() bool {
	if x != nil {
		return x.ApplyBgp
	}
	return false
}

func (x *BgpProperties) GetUseBgpDeviceId() string {
	if x != nil {
		return x.UseBgpDeviceId
	}
	return ""
}

func (x *BgpProperties) GetDeviceBgpType() string {
	if x != nil {
		return x.DeviceBgpType
	}
	return ""
}

// Properties specific to Amazon Web Services "vpc flow logs" exports
type AwsProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source S3 bucket to fetch vpc flow logs from
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// ARN for the IAM role to assume when fetching data or making AWS calls for this export
	IamRoleArn string `protobuf:"bytes,2,opt,name=iam_role_arn,json=iamRoleArn,proto3" json:"iam_role_arn,omitempty"`
	// AWS region where this bucket resides (FIXME is that right?)
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// If true, attempt to delete vpc flow log chunks from S3 after they've been read
	DeleteAfterRead bool `protobuf:"varint,4,opt,name=delete_after_read,json=deleteAfterRead,proto3" json:"delete_after_read,omitempty"`
	// FIXME
	MultipleBuckets bool `protobuf:"varint,5,opt,name=multiple_buckets,json=multipleBuckets,proto3" json:"multiple_buckets,omitempty"`
}

func (x *AwsProperties) Reset() {
	*x = AwsProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsProperties) ProtoMessage() {}

func (x *AwsProperties) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsProperties.ProtoReflect.Descriptor instead.
func (*AwsProperties) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{2}
}

func (x *AwsProperties) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *AwsProperties) GetIamRoleArn() string {
	if x != nil {
		return x.IamRoleArn
	}
	return ""
}

func (x *AwsProperties) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsProperties) GetDeleteAfterRead() bool {
	if x != nil {
		return x.DeleteAfterRead
	}
	return false
}

func (x *AwsProperties) GetMultipleBuckets() bool {
	if x != nil {
		return x.MultipleBuckets
	}
	return false
}

// Properties specific to Azure exports
type AzureProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location                 string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	ResourceGroup            string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	StorageAccount           string `protobuf:"bytes,3,opt,name=storage_account,json=storageAccount,proto3" json:"storage_account,omitempty"`
	SubscriptionId           string `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	SecurityPrincipalEnabled bool   `protobuf:"varint,5,opt,name=security_principal_enabled,json=securityPrincipalEnabled,proto3" json:"security_principal_enabled,omitempty"`
}

func (x *AzureProperties) Reset() {
	*x = AzureProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureProperties) ProtoMessage() {}

func (x *AzureProperties) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureProperties.ProtoReflect.Descriptor instead.
func (*AzureProperties) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{3}
}

func (x *AzureProperties) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AzureProperties) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *AzureProperties) GetStorageAccount() string {
	if x != nil {
		return x.StorageAccount
	}
	return ""
}

func (x *AzureProperties) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *AzureProperties) GetSecurityPrincipalEnabled() bool {
	if x != nil {
		return x.SecurityPrincipalEnabled
	}
	return false
}

// Properties specific to Google Cloud export
type GceProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project      string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Subscription string `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GceProperties) Reset() {
	*x = GceProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GceProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GceProperties) ProtoMessage() {}

func (x *GceProperties) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GceProperties.ProtoReflect.Descriptor instead.
func (*GceProperties) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{4}
}

func (x *GceProperties) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GceProperties) GetSubscription() string {
	if x != nil {
		return x.Subscription
	}
	return ""
}

// Properties specific to IBM Cloud exports
type IbmProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *IbmProperties) Reset() {
	*x = IbmProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IbmProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IbmProperties) ProtoMessage() {}

func (x *IbmProperties) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IbmProperties.ProtoReflect.Descriptor instead.
func (*IbmProperties) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{5}
}

func (x *IbmProperties) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

// Export task status
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FIXME
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// If not empty, the current error
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// If true, we found flow logs
	FlowFound            *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=flow_found,json=flowFound,proto3" json:"flow_found,omitempty"`
	ApiAccess            *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=api_access,json=apiAccess,proto3" json:"api_access,omitempty"`
	StorageAccountAccess *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=storage_account_access,json=storageAccountAccess,proto3" json:"storage_account_access,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{6}
}

func (x *Status) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Status) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Status) GetFlowFound() *wrapperspb.BoolValue {
	if x != nil {
		return x.FlowFound
	}
	return nil
}

func (x *Status) GetApiAccess() *wrapperspb.BoolValue {
	if x != nil {
		return x.ApiAccess
	}
	return nil
}

func (x *Status) GetStorageAccountAccess() *wrapperspb.BoolValue {
	if x != nil {
		return x.StorageAccountAccess
	}
	return nil
}

type CreateCloudExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *CloudExport `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
}

func (x *CreateCloudExportRequest) Reset() {
	*x = CreateCloudExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudExportRequest) ProtoMessage() {}

func (x *CreateCloudExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudExportRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudExportRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCloudExportRequest) GetExport() *CloudExport {
	if x != nil {
		return x.Export
	}
	return nil
}

type CreateCloudExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *CloudExport `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
}

func (x *CreateCloudExportResponse) Reset() {
	*x = CreateCloudExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudExportResponse) ProtoMessage() {}

func (x *CreateCloudExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudExportResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudExportResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCloudExportResponse) GetExport() *CloudExport {
	if x != nil {
		return x.Export
	}
	return nil
}

type ListCloudExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCloudExportRequest) Reset() {
	*x = ListCloudExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudExportRequest) ProtoMessage() {}

func (x *ListCloudExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudExportRequest.ProtoReflect.Descriptor instead.
func (*ListCloudExportRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{9}
}

type ListCloudExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exports             []*CloudExport `protobuf:"bytes,1,rep,name=exports,proto3" json:"exports,omitempty"`
	InvalidExportsCount uint32         `protobuf:"varint,2,opt,name=invalid_exports_count,json=invalidExportsCount,proto3" json:"invalid_exports_count,omitempty"`
}

func (x *ListCloudExportResponse) Reset() {
	*x = ListCloudExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudExportResponse) ProtoMessage() {}

func (x *ListCloudExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudExportResponse.ProtoReflect.Descriptor instead.
func (*ListCloudExportResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{10}
}

func (x *ListCloudExportResponse) GetExports() []*CloudExport {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *ListCloudExportResponse) GetInvalidExportsCount() uint32 {
	if x != nil {
		return x.InvalidExportsCount
	}
	return 0
}

type GetCloudExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCloudExportRequest) Reset() {
	*x = GetCloudExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudExportRequest) ProtoMessage() {}

func (x *GetCloudExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudExportRequest.ProtoReflect.Descriptor instead.
func (*GetCloudExportRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{11}
}

func (x *GetCloudExportRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCloudExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *CloudExport `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
}

func (x *GetCloudExportResponse) Reset() {
	*x = GetCloudExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudExportResponse) ProtoMessage() {}

func (x *GetCloudExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudExportResponse.ProtoReflect.Descriptor instead.
func (*GetCloudExportResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{12}
}

func (x *GetCloudExportResponse) GetExport() *CloudExport {
	if x != nil {
		return x.Export
	}
	return nil
}

type PatchCloudExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *CloudExport           `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
	Mask   *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *PatchCloudExportRequest) Reset() {
	*x = PatchCloudExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCloudExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCloudExportRequest) ProtoMessage() {}

func (x *PatchCloudExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCloudExportRequest.ProtoReflect.Descriptor instead.
func (*PatchCloudExportRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{13}
}

func (x *PatchCloudExportRequest) GetExport() *CloudExport {
	if x != nil {
		return x.Export
	}
	return nil
}

func (x *PatchCloudExportRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type PatchCloudExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *CloudExport `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
}

func (x *PatchCloudExportResponse) Reset() {
	*x = PatchCloudExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCloudExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCloudExportResponse) ProtoMessage() {}

func (x *PatchCloudExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCloudExportResponse.ProtoReflect.Descriptor instead.
func (*PatchCloudExportResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{14}
}

func (x *PatchCloudExportResponse) GetExport() *CloudExport {
	if x != nil {
		return x.Export
	}
	return nil
}

type UpdateCloudExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *CloudExport `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
}

func (x *UpdateCloudExportRequest) Reset() {
	*x = UpdateCloudExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudExportRequest) ProtoMessage() {}

func (x *UpdateCloudExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudExportRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudExportRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateCloudExportRequest) GetExport() *CloudExport {
	if x != nil {
		return x.Export
	}
	return nil
}

type UpdateCloudExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export *CloudExport `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
}

func (x *UpdateCloudExportResponse) Reset() {
	*x = UpdateCloudExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudExportResponse) ProtoMessage() {}

func (x *UpdateCloudExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudExportResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudExportResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateCloudExportResponse) GetExport() *CloudExport {
	if x != nil {
		return x.Export
	}
	return nil
}

type DeleteCloudExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCloudExportRequest) Reset() {
	*x = DeleteCloudExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudExportRequest) ProtoMessage() {}

func (x *DeleteCloudExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudExportRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudExportRequest) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteCloudExportRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCloudExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCloudExportResponse) Reset() {
	*x = DeleteCloudExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloudExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudExportResponse) ProtoMessage() {}

func (x *DeleteCloudExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudExportResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudExportResponse) Descriptor() ([]byte, []int) {
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP(), []int{18}
}

var File_kentik_cloud_export_v202101beta1_cloud_export_proto protoreflect.FileDescriptor

var file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30,
	0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe8, 0x05, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x69,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x41, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x49, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x12, 0x43, 0x0a, 0x03, 0x67, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x47, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x03, 0x67, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x69, 0x62, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x62, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x03, 0x69, 0x62, 0x6d, 0x12, 0x41, 0x0a, 0x03, 0x62,
	0x67, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x03, 0x62, 0x67, 0x70, 0x12, 0x4f,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x7f, 0x0a,
	0x0d, 0x42, 0x67, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x62, 0x67, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x67, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x42, 0x67, 0x70, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb8,
	0x01, 0x0a, 0x0d, 0x41, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x61, 0x6d, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x4d, 0x0a, 0x0d, 0x47, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x27, 0x0a, 0x0d, 0x49, 0x62, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x70, 0x69,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x61, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22,
	0x61, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x61, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2a, 0x82, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b,
	0x45, 0x4e, 0x54, 0x49, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x02, 0x32, 0xa9, 0x0f, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xba, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xab, 0x01, 0x92, 0x41, 0x5f, 0x12, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x1a, 0x39,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x2a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x92, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x92, 0x41, 0x41, 0x12,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x1a, 0x1f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x2a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0xf2, 0xd7, 0x02, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xbc, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01, 0x92, 0x41,
	0x69, 0x12, 0x20, 0x47, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x1a, 0x3a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x49, 0x44, 0x2e, 0x2a,
	0x09, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0xf2, 0xd7, 0x02, 0x17, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd9, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31,
	0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcd, 0x01, 0x92, 0x41, 0x75, 0x12, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x6e,
	0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x1a, 0x54, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x6c, 0x79, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x69, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x2a, 0x0b,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0xf2, 0xd7, 0x02, 0x18, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x32, 0x2e, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0xc2, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30,
	0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb3, 0x01, 0x92, 0x41, 0x5b, 0x12, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e,
	0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x1a, 0x38, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x20, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x69,
	0x64, 0x2e, 0x2a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x1a, 0x2e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x92, 0x41, 0x48, 0x12, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x1a, 0x25, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x69, 0x64, 0x2e, 0x2a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0xf2, 0xd7, 0x02, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x34, 0xca,
	0x41, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02,
	0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0xf3, 0x02, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x76, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x92, 0x41, 0x9c, 0x02, 0x12, 0x5e, 0x0a,
	0x16, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x22, 0x37, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x20, 0x41, 0x50, 0x49, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x32, 0x0b, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2a, 0x01, 0x02,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x2d, 0x41,
	0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62, 0x16, 0x0a, 0x09, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x00, 0x72, 0x35, 0x0a, 0x16, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73, 0x12, 0x1b, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescOnce sync.Once
	file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescData = file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDesc
)

func file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescGZIP() []byte {
	file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescOnce.Do(func() {
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescData)
	})
	return file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDescData
}

var file_kentik_cloud_export_v202101beta1_cloud_export_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_kentik_cloud_export_v202101beta1_cloud_export_proto_goTypes = []interface{}{
	(CloudExportType)(0),              // 0: kentik.cloud_export.v202101beta1.CloudExportType
	(*CloudExport)(nil),               // 1: kentik.cloud_export.v202101beta1.CloudExport
	(*BgpProperties)(nil),             // 2: kentik.cloud_export.v202101beta1.BgpProperties
	(*AwsProperties)(nil),             // 3: kentik.cloud_export.v202101beta1.AwsProperties
	(*AzureProperties)(nil),           // 4: kentik.cloud_export.v202101beta1.AzureProperties
	(*GceProperties)(nil),             // 5: kentik.cloud_export.v202101beta1.GceProperties
	(*IbmProperties)(nil),             // 6: kentik.cloud_export.v202101beta1.IbmProperties
	(*Status)(nil),                    // 7: kentik.cloud_export.v202101beta1.Status
	(*CreateCloudExportRequest)(nil),  // 8: kentik.cloud_export.v202101beta1.CreateCloudExportRequest
	(*CreateCloudExportResponse)(nil), // 9: kentik.cloud_export.v202101beta1.CreateCloudExportResponse
	(*ListCloudExportRequest)(nil),    // 10: kentik.cloud_export.v202101beta1.ListCloudExportRequest
	(*ListCloudExportResponse)(nil),   // 11: kentik.cloud_export.v202101beta1.ListCloudExportResponse
	(*GetCloudExportRequest)(nil),     // 12: kentik.cloud_export.v202101beta1.GetCloudExportRequest
	(*GetCloudExportResponse)(nil),    // 13: kentik.cloud_export.v202101beta1.GetCloudExportResponse
	(*PatchCloudExportRequest)(nil),   // 14: kentik.cloud_export.v202101beta1.PatchCloudExportRequest
	(*PatchCloudExportResponse)(nil),  // 15: kentik.cloud_export.v202101beta1.PatchCloudExportResponse
	(*UpdateCloudExportRequest)(nil),  // 16: kentik.cloud_export.v202101beta1.UpdateCloudExportRequest
	(*UpdateCloudExportResponse)(nil), // 17: kentik.cloud_export.v202101beta1.UpdateCloudExportResponse
	(*DeleteCloudExportRequest)(nil),  // 18: kentik.cloud_export.v202101beta1.DeleteCloudExportRequest
	(*DeleteCloudExportResponse)(nil), // 19: kentik.cloud_export.v202101beta1.DeleteCloudExportResponse
	(*wrapperspb.BoolValue)(nil),      // 20: google.protobuf.BoolValue
	(*fieldmaskpb.FieldMask)(nil),     // 21: google.protobuf.FieldMask
}
var file_kentik_cloud_export_v202101beta1_cloud_export_proto_depIdxs = []int32{
	0,  // 0: kentik.cloud_export.v202101beta1.CloudExport.type:type_name -> kentik.cloud_export.v202101beta1.CloudExportType
	3,  // 1: kentik.cloud_export.v202101beta1.CloudExport.aws:type_name -> kentik.cloud_export.v202101beta1.AwsProperties
	4,  // 2: kentik.cloud_export.v202101beta1.CloudExport.azure:type_name -> kentik.cloud_export.v202101beta1.AzureProperties
	5,  // 3: kentik.cloud_export.v202101beta1.CloudExport.gce:type_name -> kentik.cloud_export.v202101beta1.GceProperties
	6,  // 4: kentik.cloud_export.v202101beta1.CloudExport.ibm:type_name -> kentik.cloud_export.v202101beta1.IbmProperties
	2,  // 5: kentik.cloud_export.v202101beta1.CloudExport.bgp:type_name -> kentik.cloud_export.v202101beta1.BgpProperties
	7,  // 6: kentik.cloud_export.v202101beta1.CloudExport.current_status:type_name -> kentik.cloud_export.v202101beta1.Status
	20, // 7: kentik.cloud_export.v202101beta1.Status.flow_found:type_name -> google.protobuf.BoolValue
	20, // 8: kentik.cloud_export.v202101beta1.Status.api_access:type_name -> google.protobuf.BoolValue
	20, // 9: kentik.cloud_export.v202101beta1.Status.storage_account_access:type_name -> google.protobuf.BoolValue
	1,  // 10: kentik.cloud_export.v202101beta1.CreateCloudExportRequest.export:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	1,  // 11: kentik.cloud_export.v202101beta1.CreateCloudExportResponse.export:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	1,  // 12: kentik.cloud_export.v202101beta1.ListCloudExportResponse.exports:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	1,  // 13: kentik.cloud_export.v202101beta1.GetCloudExportResponse.export:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	1,  // 14: kentik.cloud_export.v202101beta1.PatchCloudExportRequest.export:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	21, // 15: kentik.cloud_export.v202101beta1.PatchCloudExportRequest.mask:type_name -> google.protobuf.FieldMask
	1,  // 16: kentik.cloud_export.v202101beta1.PatchCloudExportResponse.export:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	1,  // 17: kentik.cloud_export.v202101beta1.UpdateCloudExportRequest.export:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	1,  // 18: kentik.cloud_export.v202101beta1.UpdateCloudExportResponse.export:type_name -> kentik.cloud_export.v202101beta1.CloudExport
	8,  // 19: kentik.cloud_export.v202101beta1.CloudExportAdminService.CreateCloudExport:input_type -> kentik.cloud_export.v202101beta1.CreateCloudExportRequest
	10, // 20: kentik.cloud_export.v202101beta1.CloudExportAdminService.ListCloudExport:input_type -> kentik.cloud_export.v202101beta1.ListCloudExportRequest
	12, // 21: kentik.cloud_export.v202101beta1.CloudExportAdminService.GetCloudExport:input_type -> kentik.cloud_export.v202101beta1.GetCloudExportRequest
	14, // 22: kentik.cloud_export.v202101beta1.CloudExportAdminService.PatchCloudExport:input_type -> kentik.cloud_export.v202101beta1.PatchCloudExportRequest
	16, // 23: kentik.cloud_export.v202101beta1.CloudExportAdminService.UpdateCloudExport:input_type -> kentik.cloud_export.v202101beta1.UpdateCloudExportRequest
	18, // 24: kentik.cloud_export.v202101beta1.CloudExportAdminService.DeleteCloudExport:input_type -> kentik.cloud_export.v202101beta1.DeleteCloudExportRequest
	9,  // 25: kentik.cloud_export.v202101beta1.CloudExportAdminService.CreateCloudExport:output_type -> kentik.cloud_export.v202101beta1.CreateCloudExportResponse
	11, // 26: kentik.cloud_export.v202101beta1.CloudExportAdminService.ListCloudExport:output_type -> kentik.cloud_export.v202101beta1.ListCloudExportResponse
	13, // 27: kentik.cloud_export.v202101beta1.CloudExportAdminService.GetCloudExport:output_type -> kentik.cloud_export.v202101beta1.GetCloudExportResponse
	15, // 28: kentik.cloud_export.v202101beta1.CloudExportAdminService.PatchCloudExport:output_type -> kentik.cloud_export.v202101beta1.PatchCloudExportResponse
	17, // 29: kentik.cloud_export.v202101beta1.CloudExportAdminService.UpdateCloudExport:output_type -> kentik.cloud_export.v202101beta1.UpdateCloudExportResponse
	19, // 30: kentik.cloud_export.v202101beta1.CloudExportAdminService.DeleteCloudExport:output_type -> kentik.cloud_export.v202101beta1.DeleteCloudExportResponse
	25, // [25:31] is the sub-list for method output_type
	19, // [19:25] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_kentik_cloud_export_v202101beta1_cloud_export_proto_init() }
func file_kentik_cloud_export_v202101beta1_cloud_export_proto_init() {
	if File_kentik_cloud_export_v202101beta1_cloud_export_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GceProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IbmProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloudExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCloudExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCloudExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloudExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CloudExport_Aws)(nil),
		(*CloudExport_Azure)(nil),
		(*CloudExport_Gce)(nil),
		(*CloudExport_Ibm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_cloud_export_v202101beta1_cloud_export_proto_goTypes,
		DependencyIndexes: file_kentik_cloud_export_v202101beta1_cloud_export_proto_depIdxs,
		EnumInfos:         file_kentik_cloud_export_v202101beta1_cloud_export_proto_enumTypes,
		MessageInfos:      file_kentik_cloud_export_v202101beta1_cloud_export_proto_msgTypes,
	}.Build()
	File_kentik_cloud_export_v202101beta1_cloud_export_proto = out.File
	file_kentik_cloud_export_v202101beta1_cloud_export_proto_rawDesc = nil
	file_kentik_cloud_export_v202101beta1_cloud_export_proto_goTypes = nil
	file_kentik_cloud_export_v202101beta1_cloud_export_proto_depIdxs = nil
}
