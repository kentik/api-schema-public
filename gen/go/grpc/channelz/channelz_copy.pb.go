// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: grpc/channelz/channelz.proto

package grpc_channelz_v1

import "google.golang.org/protobuf/types/known/anypb"
import "google.golang.org/protobuf/types/known/durationpb"
import "google.golang.org/protobuf/types/known/timestamppb"
import "google.golang.org/protobuf/types/known/wrapperspb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Channel) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Channel:
		x.Ref = v.GetRef()
		x.Data = v.GetData()
		x.ChannelRef = v.GetChannelRef()
		x.SubchannelRef = v.GetSubchannelRef()
		x.SocketRef = v.GetSocketRef()
	default:
		if v, ok := v.(interface{ GetRef() *ChannelRef }); ok {
			x.Ref = v.GetRef()
		}
		if v, ok := v.(interface{ GetData() *ChannelData }); ok {
			x.Data = v.GetData()
		}
		if v, ok := v.(interface{ GetChannelRef() []*ChannelRef }); ok {
			x.ChannelRef = v.GetChannelRef()
		}
		if v, ok := v.(interface{ GetSubchannelRef() []*SubchannelRef }); ok {
			x.SubchannelRef = v.GetSubchannelRef()
		}
		if v, ok := v.(interface{ GetSocketRef() []*SocketRef }); ok {
			x.SocketRef = v.GetSocketRef()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Channel) Proto_ShallowClone() (c *Channel) {
	if x != nil {
		c = new(Channel)
		c.Ref = x.Ref
		c.Data = x.Data
		c.ChannelRef = x.ChannelRef
		c.SubchannelRef = x.SubchannelRef
		c.SocketRef = x.SocketRef
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Subchannel) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Subchannel:
		x.Ref = v.GetRef()
		x.Data = v.GetData()
		x.ChannelRef = v.GetChannelRef()
		x.SubchannelRef = v.GetSubchannelRef()
		x.SocketRef = v.GetSocketRef()
	default:
		if v, ok := v.(interface{ GetRef() *SubchannelRef }); ok {
			x.Ref = v.GetRef()
		}
		if v, ok := v.(interface{ GetData() *ChannelData }); ok {
			x.Data = v.GetData()
		}
		if v, ok := v.(interface{ GetChannelRef() []*ChannelRef }); ok {
			x.ChannelRef = v.GetChannelRef()
		}
		if v, ok := v.(interface{ GetSubchannelRef() []*SubchannelRef }); ok {
			x.SubchannelRef = v.GetSubchannelRef()
		}
		if v, ok := v.(interface{ GetSocketRef() []*SocketRef }); ok {
			x.SocketRef = v.GetSocketRef()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Subchannel) Proto_ShallowClone() (c *Subchannel) {
	if x != nil {
		c = new(Subchannel)
		c.Ref = x.Ref
		c.Data = x.Data
		c.ChannelRef = x.ChannelRef
		c.SubchannelRef = x.SubchannelRef
		c.SocketRef = x.SocketRef
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ChannelConnectivityState) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ChannelConnectivityState:
		x.State = v.GetState()
	default:
		if v, ok := v.(interface {
			GetState() ChannelConnectivityState_State
		}); ok {
			x.State = v.GetState()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ChannelConnectivityState) Proto_ShallowClone() (c *ChannelConnectivityState) {
	if x != nil {
		c = new(ChannelConnectivityState)
		c.State = x.State
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ChannelData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ChannelData:
		x.State = v.GetState()
		x.Target = v.GetTarget()
		x.Trace = v.GetTrace()
		x.CallsStarted = v.GetCallsStarted()
		x.CallsSucceeded = v.GetCallsSucceeded()
		x.CallsFailed = v.GetCallsFailed()
		x.LastCallStartedTimestamp = v.GetLastCallStartedTimestamp()
	default:
		if v, ok := v.(interface {
			GetState() *ChannelConnectivityState
		}); ok {
			x.State = v.GetState()
		}
		if v, ok := v.(interface{ GetTarget() string }); ok {
			x.Target = v.GetTarget()
		}
		if v, ok := v.(interface{ GetTrace() *ChannelTrace }); ok {
			x.Trace = v.GetTrace()
		}
		if v, ok := v.(interface{ GetCallsStarted() int64 }); ok {
			x.CallsStarted = v.GetCallsStarted()
		}
		if v, ok := v.(interface{ GetCallsSucceeded() int64 }); ok {
			x.CallsSucceeded = v.GetCallsSucceeded()
		}
		if v, ok := v.(interface{ GetCallsFailed() int64 }); ok {
			x.CallsFailed = v.GetCallsFailed()
		}
		if v, ok := v.(interface{ GetLastCallStartedTimestamp() *timestamppb.Timestamp }); ok {
			x.LastCallStartedTimestamp = v.GetLastCallStartedTimestamp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ChannelData) Proto_ShallowClone() (c *ChannelData) {
	if x != nil {
		c = new(ChannelData)
		c.State = x.State
		c.Target = x.Target
		c.Trace = x.Trace
		c.CallsStarted = x.CallsStarted
		c.CallsSucceeded = x.CallsSucceeded
		c.CallsFailed = x.CallsFailed
		c.LastCallStartedTimestamp = x.LastCallStartedTimestamp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ChannelTraceEvent) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ChannelTraceEvent:
		x.Description = v.GetDescription()
		x.Severity = v.GetSeverity()
		x.Timestamp = v.GetTimestamp()
		x.ChildRef = v.GetChildRef()
	default:
		if v, ok := v.(interface{ GetDescription() string }); ok {
			x.Description = v.GetDescription()
		}
		if v, ok := v.(interface {
			GetSeverity() ChannelTraceEvent_Severity
		}); ok {
			x.Severity = v.GetSeverity()
		}
		if v, ok := v.(interface{ GetTimestamp() *timestamppb.Timestamp }); ok {
			x.Timestamp = v.GetTimestamp()
		}
		if v, ok := v.(interface {
			GetChildRef() isChannelTraceEvent_ChildRef
		}); ok {
			x.ChildRef = v.GetChildRef()
		} else {
			func() {
				if v, ok := v.(interface{ GetChannelRef() *ChannelRef }); ok {
					var defaultValue *ChannelRef
					if v := v.GetChannelRef(); v != defaultValue {
						x.ChildRef = &ChannelTraceEvent_ChannelRef{ChannelRef: v}
						return
					}
				}
				if v, ok := v.(interface{ GetSubchannelRef() *SubchannelRef }); ok {
					var defaultValue *SubchannelRef
					if v := v.GetSubchannelRef(); v != defaultValue {
						x.ChildRef = &ChannelTraceEvent_SubchannelRef{SubchannelRef: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ChannelTraceEvent) Proto_ShallowClone() (c *ChannelTraceEvent) {
	if x != nil {
		c = new(ChannelTraceEvent)
		c.Description = x.Description
		c.Severity = x.Severity
		c.Timestamp = x.Timestamp
		c.ChildRef = x.ChildRef
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ChannelTrace) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ChannelTrace:
		x.NumEventsLogged = v.GetNumEventsLogged()
		x.CreationTimestamp = v.GetCreationTimestamp()
		x.Events = v.GetEvents()
	default:
		if v, ok := v.(interface{ GetNumEventsLogged() int64 }); ok {
			x.NumEventsLogged = v.GetNumEventsLogged()
		}
		if v, ok := v.(interface{ GetCreationTimestamp() *timestamppb.Timestamp }); ok {
			x.CreationTimestamp = v.GetCreationTimestamp()
		}
		if v, ok := v.(interface{ GetEvents() []*ChannelTraceEvent }); ok {
			x.Events = v.GetEvents()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ChannelTrace) Proto_ShallowClone() (c *ChannelTrace) {
	if x != nil {
		c = new(ChannelTrace)
		c.NumEventsLogged = x.NumEventsLogged
		c.CreationTimestamp = x.CreationTimestamp
		c.Events = x.Events
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ChannelRef) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ChannelRef:
		x.ChannelId = v.GetChannelId()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetChannelId() int64 }); ok {
			x.ChannelId = v.GetChannelId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ChannelRef) Proto_ShallowClone() (c *ChannelRef) {
	if x != nil {
		c = new(ChannelRef)
		c.ChannelId = x.ChannelId
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SubchannelRef) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SubchannelRef:
		x.SubchannelId = v.GetSubchannelId()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetSubchannelId() int64 }); ok {
			x.SubchannelId = v.GetSubchannelId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SubchannelRef) Proto_ShallowClone() (c *SubchannelRef) {
	if x != nil {
		c = new(SubchannelRef)
		c.SubchannelId = x.SubchannelId
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SocketRef) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SocketRef:
		x.SocketId = v.GetSocketId()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetSocketId() int64 }); ok {
			x.SocketId = v.GetSocketId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SocketRef) Proto_ShallowClone() (c *SocketRef) {
	if x != nil {
		c = new(SocketRef)
		c.SocketId = x.SocketId
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ServerRef) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ServerRef:
		x.ServerId = v.GetServerId()
		x.Name = v.GetName()
	default:
		if v, ok := v.(interface{ GetServerId() int64 }); ok {
			x.ServerId = v.GetServerId()
		}
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ServerRef) Proto_ShallowClone() (c *ServerRef) {
	if x != nil {
		c = new(ServerRef)
		c.ServerId = x.ServerId
		c.Name = x.Name
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Server) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Server:
		x.Ref = v.GetRef()
		x.Data = v.GetData()
		x.ListenSocket = v.GetListenSocket()
	default:
		if v, ok := v.(interface{ GetRef() *ServerRef }); ok {
			x.Ref = v.GetRef()
		}
		if v, ok := v.(interface{ GetData() *ServerData }); ok {
			x.Data = v.GetData()
		}
		if v, ok := v.(interface{ GetListenSocket() []*SocketRef }); ok {
			x.ListenSocket = v.GetListenSocket()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Server) Proto_ShallowClone() (c *Server) {
	if x != nil {
		c = new(Server)
		c.Ref = x.Ref
		c.Data = x.Data
		c.ListenSocket = x.ListenSocket
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *ServerData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *ServerData:
		x.Trace = v.GetTrace()
		x.CallsStarted = v.GetCallsStarted()
		x.CallsSucceeded = v.GetCallsSucceeded()
		x.CallsFailed = v.GetCallsFailed()
		x.LastCallStartedTimestamp = v.GetLastCallStartedTimestamp()
	default:
		if v, ok := v.(interface{ GetTrace() *ChannelTrace }); ok {
			x.Trace = v.GetTrace()
		}
		if v, ok := v.(interface{ GetCallsStarted() int64 }); ok {
			x.CallsStarted = v.GetCallsStarted()
		}
		if v, ok := v.(interface{ GetCallsSucceeded() int64 }); ok {
			x.CallsSucceeded = v.GetCallsSucceeded()
		}
		if v, ok := v.(interface{ GetCallsFailed() int64 }); ok {
			x.CallsFailed = v.GetCallsFailed()
		}
		if v, ok := v.(interface{ GetLastCallStartedTimestamp() *timestamppb.Timestamp }); ok {
			x.LastCallStartedTimestamp = v.GetLastCallStartedTimestamp()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *ServerData) Proto_ShallowClone() (c *ServerData) {
	if x != nil {
		c = new(ServerData)
		c.Trace = x.Trace
		c.CallsStarted = x.CallsStarted
		c.CallsSucceeded = x.CallsSucceeded
		c.CallsFailed = x.CallsFailed
		c.LastCallStartedTimestamp = x.LastCallStartedTimestamp
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Socket) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Socket:
		x.Ref = v.GetRef()
		x.Data = v.GetData()
		x.Local = v.GetLocal()
		x.Remote = v.GetRemote()
		x.Security = v.GetSecurity()
		x.RemoteName = v.GetRemoteName()
	default:
		if v, ok := v.(interface{ GetRef() *SocketRef }); ok {
			x.Ref = v.GetRef()
		}
		if v, ok := v.(interface{ GetData() *SocketData }); ok {
			x.Data = v.GetData()
		}
		if v, ok := v.(interface{ GetLocal() *Address }); ok {
			x.Local = v.GetLocal()
		}
		if v, ok := v.(interface{ GetRemote() *Address }); ok {
			x.Remote = v.GetRemote()
		}
		if v, ok := v.(interface{ GetSecurity() *Security }); ok {
			x.Security = v.GetSecurity()
		}
		if v, ok := v.(interface{ GetRemoteName() string }); ok {
			x.RemoteName = v.GetRemoteName()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Socket) Proto_ShallowClone() (c *Socket) {
	if x != nil {
		c = new(Socket)
		c.Ref = x.Ref
		c.Data = x.Data
		c.Local = x.Local
		c.Remote = x.Remote
		c.Security = x.Security
		c.RemoteName = x.RemoteName
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SocketData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SocketData:
		x.StreamsStarted = v.GetStreamsStarted()
		x.StreamsSucceeded = v.GetStreamsSucceeded()
		x.StreamsFailed = v.GetStreamsFailed()
		x.MessagesSent = v.GetMessagesSent()
		x.MessagesReceived = v.GetMessagesReceived()
		x.KeepAlivesSent = v.GetKeepAlivesSent()
		x.LastLocalStreamCreatedTimestamp = v.GetLastLocalStreamCreatedTimestamp()
		x.LastRemoteStreamCreatedTimestamp = v.GetLastRemoteStreamCreatedTimestamp()
		x.LastMessageSentTimestamp = v.GetLastMessageSentTimestamp()
		x.LastMessageReceivedTimestamp = v.GetLastMessageReceivedTimestamp()
		x.LocalFlowControlWindow = v.GetLocalFlowControlWindow()
		x.RemoteFlowControlWindow = v.GetRemoteFlowControlWindow()
		x.Option = v.GetOption()
	default:
		if v, ok := v.(interface{ GetStreamsStarted() int64 }); ok {
			x.StreamsStarted = v.GetStreamsStarted()
		}
		if v, ok := v.(interface{ GetStreamsSucceeded() int64 }); ok {
			x.StreamsSucceeded = v.GetStreamsSucceeded()
		}
		if v, ok := v.(interface{ GetStreamsFailed() int64 }); ok {
			x.StreamsFailed = v.GetStreamsFailed()
		}
		if v, ok := v.(interface{ GetMessagesSent() int64 }); ok {
			x.MessagesSent = v.GetMessagesSent()
		}
		if v, ok := v.(interface{ GetMessagesReceived() int64 }); ok {
			x.MessagesReceived = v.GetMessagesReceived()
		}
		if v, ok := v.(interface{ GetKeepAlivesSent() int64 }); ok {
			x.KeepAlivesSent = v.GetKeepAlivesSent()
		}
		if v, ok := v.(interface{ GetLastLocalStreamCreatedTimestamp() *timestamppb.Timestamp }); ok {
			x.LastLocalStreamCreatedTimestamp = v.GetLastLocalStreamCreatedTimestamp()
		}
		if v, ok := v.(interface{ GetLastRemoteStreamCreatedTimestamp() *timestamppb.Timestamp }); ok {
			x.LastRemoteStreamCreatedTimestamp = v.GetLastRemoteStreamCreatedTimestamp()
		}
		if v, ok := v.(interface{ GetLastMessageSentTimestamp() *timestamppb.Timestamp }); ok {
			x.LastMessageSentTimestamp = v.GetLastMessageSentTimestamp()
		}
		if v, ok := v.(interface{ GetLastMessageReceivedTimestamp() *timestamppb.Timestamp }); ok {
			x.LastMessageReceivedTimestamp = v.GetLastMessageReceivedTimestamp()
		}
		if v, ok := v.(interface{ GetLocalFlowControlWindow() *wrapperspb.Int64Value }); ok {
			x.LocalFlowControlWindow = v.GetLocalFlowControlWindow()
		}
		if v, ok := v.(interface{ GetRemoteFlowControlWindow() *wrapperspb.Int64Value }); ok {
			x.RemoteFlowControlWindow = v.GetRemoteFlowControlWindow()
		}
		if v, ok := v.(interface{ GetOption() []*SocketOption }); ok {
			x.Option = v.GetOption()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SocketData) Proto_ShallowClone() (c *SocketData) {
	if x != nil {
		c = new(SocketData)
		c.StreamsStarted = x.StreamsStarted
		c.StreamsSucceeded = x.StreamsSucceeded
		c.StreamsFailed = x.StreamsFailed
		c.MessagesSent = x.MessagesSent
		c.MessagesReceived = x.MessagesReceived
		c.KeepAlivesSent = x.KeepAlivesSent
		c.LastLocalStreamCreatedTimestamp = x.LastLocalStreamCreatedTimestamp
		c.LastRemoteStreamCreatedTimestamp = x.LastRemoteStreamCreatedTimestamp
		c.LastMessageSentTimestamp = x.LastMessageSentTimestamp
		c.LastMessageReceivedTimestamp = x.LastMessageReceivedTimestamp
		c.LocalFlowControlWindow = x.LocalFlowControlWindow
		c.RemoteFlowControlWindow = x.RemoteFlowControlWindow
		c.Option = x.Option
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Address) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Address:
		x.Address = v.GetAddress()
	default:
		if v, ok := v.(interface{ GetAddress() isAddress_Address }); ok {
			x.Address = v.GetAddress()
		} else {
			func() {
				if v, ok := v.(interface{ GetTcpipAddress() *Address_TcpIpAddress }); ok {
					var defaultValue *Address_TcpIpAddress
					if v := v.GetTcpipAddress(); v != defaultValue {
						x.Address = &Address_TcpipAddress{TcpipAddress: v}
						return
					}
				}
				if v, ok := v.(interface{ GetUdsAddress() *Address_UdsAddress }); ok {
					var defaultValue *Address_UdsAddress
					if v := v.GetUdsAddress(); v != defaultValue {
						x.Address = &Address_UdsAddress_{UdsAddress: v}
						return
					}
				}
				if v, ok := v.(interface{ GetOtherAddress() *Address_OtherAddress }); ok {
					var defaultValue *Address_OtherAddress
					if v := v.GetOtherAddress(); v != defaultValue {
						x.Address = &Address_OtherAddress_{OtherAddress: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Address) Proto_ShallowClone() (c *Address) {
	if x != nil {
		c = new(Address)
		c.Address = x.Address
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Address_TcpIpAddress) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Address_TcpIpAddress:
		x.IpAddress = v.GetIpAddress()
		x.Port = v.GetPort()
	default:
		if v, ok := v.(interface{ GetIpAddress() []byte }); ok {
			x.IpAddress = v.GetIpAddress()
		}
		if v, ok := v.(interface{ GetPort() rune }); ok {
			x.Port = v.GetPort()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Address_TcpIpAddress) Proto_ShallowClone() (c *Address_TcpIpAddress) {
	if x != nil {
		c = new(Address_TcpIpAddress)
		c.IpAddress = x.IpAddress
		c.Port = x.Port
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Address_UdsAddress) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Address_UdsAddress:
		x.Filename = v.GetFilename()
	default:
		if v, ok := v.(interface{ GetFilename() string }); ok {
			x.Filename = v.GetFilename()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Address_UdsAddress) Proto_ShallowClone() (c *Address_UdsAddress) {
	if x != nil {
		c = new(Address_UdsAddress)
		c.Filename = x.Filename
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Address_OtherAddress) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Address_OtherAddress:
		x.Name = v.GetName()
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetValue() *anypb.Any }); ok {
			x.Value = v.GetValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Address_OtherAddress) Proto_ShallowClone() (c *Address_OtherAddress) {
	if x != nil {
		c = new(Address_OtherAddress)
		c.Name = x.Name
		c.Value = x.Value
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Security) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Security:
		x.Model = v.GetModel()
	default:
		if v, ok := v.(interface{ GetModel() isSecurity_Model }); ok {
			x.Model = v.GetModel()
		} else {
			func() {
				if v, ok := v.(interface{ GetTls() *Security_Tls }); ok {
					var defaultValue *Security_Tls
					if v := v.GetTls(); v != defaultValue {
						x.Model = &Security_Tls_{Tls: v}
						return
					}
				}
				if v, ok := v.(interface {
					GetOther() *Security_OtherSecurity
				}); ok {
					var defaultValue *Security_OtherSecurity
					if v := v.GetOther(); v != defaultValue {
						x.Model = &Security_Other{Other: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Security) Proto_ShallowClone() (c *Security) {
	if x != nil {
		c = new(Security)
		c.Model = x.Model
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Security_Tls) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Security_Tls:
		x.CipherSuite = v.GetCipherSuite()
		x.LocalCertificate = v.GetLocalCertificate()
		x.RemoteCertificate = v.GetRemoteCertificate()
	default:
		if v, ok := v.(interface {
			GetCipherSuite() isSecurity_Tls_CipherSuite
		}); ok {
			x.CipherSuite = v.GetCipherSuite()
		} else {
			func() {
				if v, ok := v.(interface{ GetStandardName() string }); ok {
					var defaultValue string
					if v := v.GetStandardName(); v != defaultValue {
						x.CipherSuite = &Security_Tls_StandardName{StandardName: v}
						return
					}
				}
				if v, ok := v.(interface{ GetOtherName() string }); ok {
					var defaultValue string
					if v := v.GetOtherName(); v != defaultValue {
						x.CipherSuite = &Security_Tls_OtherName{OtherName: v}
						return
					}
				}
			}()
		}
		if v, ok := v.(interface{ GetLocalCertificate() []byte }); ok {
			x.LocalCertificate = v.GetLocalCertificate()
		}
		if v, ok := v.(interface{ GetRemoteCertificate() []byte }); ok {
			x.RemoteCertificate = v.GetRemoteCertificate()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Security_Tls) Proto_ShallowClone() (c *Security_Tls) {
	if x != nil {
		c = new(Security_Tls)
		c.CipherSuite = x.CipherSuite
		c.LocalCertificate = x.LocalCertificate
		c.RemoteCertificate = x.RemoteCertificate
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Security_OtherSecurity) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Security_OtherSecurity:
		x.Name = v.GetName()
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetValue() *anypb.Any }); ok {
			x.Value = v.GetValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Security_OtherSecurity) Proto_ShallowClone() (c *Security_OtherSecurity) {
	if x != nil {
		c = new(Security_OtherSecurity)
		c.Name = x.Name
		c.Value = x.Value
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SocketOption) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SocketOption:
		x.Name = v.GetName()
		x.Value = v.GetValue()
		x.Additional = v.GetAdditional()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetValue() string }); ok {
			x.Value = v.GetValue()
		}
		if v, ok := v.(interface{ GetAdditional() *anypb.Any }); ok {
			x.Additional = v.GetAdditional()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SocketOption) Proto_ShallowClone() (c *SocketOption) {
	if x != nil {
		c = new(SocketOption)
		c.Name = x.Name
		c.Value = x.Value
		c.Additional = x.Additional
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SocketOptionTimeout) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SocketOptionTimeout:
		x.Duration = v.GetDuration()
	default:
		if v, ok := v.(interface{ GetDuration() *durationpb.Duration }); ok {
			x.Duration = v.GetDuration()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SocketOptionTimeout) Proto_ShallowClone() (c *SocketOptionTimeout) {
	if x != nil {
		c = new(SocketOptionTimeout)
		c.Duration = x.Duration
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SocketOptionLinger) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SocketOptionLinger:
		x.Active = v.GetActive()
		x.Duration = v.GetDuration()
	default:
		if v, ok := v.(interface{ GetActive() bool }); ok {
			x.Active = v.GetActive()
		}
		if v, ok := v.(interface{ GetDuration() *durationpb.Duration }); ok {
			x.Duration = v.GetDuration()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SocketOptionLinger) Proto_ShallowClone() (c *SocketOptionLinger) {
	if x != nil {
		c = new(SocketOptionLinger)
		c.Active = x.Active
		c.Duration = x.Duration
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *SocketOptionTcpInfo) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *SocketOptionTcpInfo:
		x.TcpiState = v.GetTcpiState()
		x.TcpiCaState = v.GetTcpiCaState()
		x.TcpiRetransmits = v.GetTcpiRetransmits()
		x.TcpiProbes = v.GetTcpiProbes()
		x.TcpiBackoff = v.GetTcpiBackoff()
		x.TcpiOptions = v.GetTcpiOptions()
		x.TcpiSndWscale = v.GetTcpiSndWscale()
		x.TcpiRcvWscale = v.GetTcpiRcvWscale()
		x.TcpiRto = v.GetTcpiRto()
		x.TcpiAto = v.GetTcpiAto()
		x.TcpiSndMss = v.GetTcpiSndMss()
		x.TcpiRcvMss = v.GetTcpiRcvMss()
		x.TcpiUnacked = v.GetTcpiUnacked()
		x.TcpiSacked = v.GetTcpiSacked()
		x.TcpiLost = v.GetTcpiLost()
		x.TcpiRetrans = v.GetTcpiRetrans()
		x.TcpiFackets = v.GetTcpiFackets()
		x.TcpiLastDataSent = v.GetTcpiLastDataSent()
		x.TcpiLastAckSent = v.GetTcpiLastAckSent()
		x.TcpiLastDataRecv = v.GetTcpiLastDataRecv()
		x.TcpiLastAckRecv = v.GetTcpiLastAckRecv()
		x.TcpiPmtu = v.GetTcpiPmtu()
		x.TcpiRcvSsthresh = v.GetTcpiRcvSsthresh()
		x.TcpiRtt = v.GetTcpiRtt()
		x.TcpiRttvar = v.GetTcpiRttvar()
		x.TcpiSndSsthresh = v.GetTcpiSndSsthresh()
		x.TcpiSndCwnd = v.GetTcpiSndCwnd()
		x.TcpiAdvmss = v.GetTcpiAdvmss()
		x.TcpiReordering = v.GetTcpiReordering()
	default:
		if v, ok := v.(interface{ GetTcpiState() uint32 }); ok {
			x.TcpiState = v.GetTcpiState()
		}
		if v, ok := v.(interface{ GetTcpiCaState() uint32 }); ok {
			x.TcpiCaState = v.GetTcpiCaState()
		}
		if v, ok := v.(interface{ GetTcpiRetransmits() uint32 }); ok {
			x.TcpiRetransmits = v.GetTcpiRetransmits()
		}
		if v, ok := v.(interface{ GetTcpiProbes() uint32 }); ok {
			x.TcpiProbes = v.GetTcpiProbes()
		}
		if v, ok := v.(interface{ GetTcpiBackoff() uint32 }); ok {
			x.TcpiBackoff = v.GetTcpiBackoff()
		}
		if v, ok := v.(interface{ GetTcpiOptions() uint32 }); ok {
			x.TcpiOptions = v.GetTcpiOptions()
		}
		if v, ok := v.(interface{ GetTcpiSndWscale() uint32 }); ok {
			x.TcpiSndWscale = v.GetTcpiSndWscale()
		}
		if v, ok := v.(interface{ GetTcpiRcvWscale() uint32 }); ok {
			x.TcpiRcvWscale = v.GetTcpiRcvWscale()
		}
		if v, ok := v.(interface{ GetTcpiRto() uint32 }); ok {
			x.TcpiRto = v.GetTcpiRto()
		}
		if v, ok := v.(interface{ GetTcpiAto() uint32 }); ok {
			x.TcpiAto = v.GetTcpiAto()
		}
		if v, ok := v.(interface{ GetTcpiSndMss() uint32 }); ok {
			x.TcpiSndMss = v.GetTcpiSndMss()
		}
		if v, ok := v.(interface{ GetTcpiRcvMss() uint32 }); ok {
			x.TcpiRcvMss = v.GetTcpiRcvMss()
		}
		if v, ok := v.(interface{ GetTcpiUnacked() uint32 }); ok {
			x.TcpiUnacked = v.GetTcpiUnacked()
		}
		if v, ok := v.(interface{ GetTcpiSacked() uint32 }); ok {
			x.TcpiSacked = v.GetTcpiSacked()
		}
		if v, ok := v.(interface{ GetTcpiLost() uint32 }); ok {
			x.TcpiLost = v.GetTcpiLost()
		}
		if v, ok := v.(interface{ GetTcpiRetrans() uint32 }); ok {
			x.TcpiRetrans = v.GetTcpiRetrans()
		}
		if v, ok := v.(interface{ GetTcpiFackets() uint32 }); ok {
			x.TcpiFackets = v.GetTcpiFackets()
		}
		if v, ok := v.(interface{ GetTcpiLastDataSent() uint32 }); ok {
			x.TcpiLastDataSent = v.GetTcpiLastDataSent()
		}
		if v, ok := v.(interface{ GetTcpiLastAckSent() uint32 }); ok {
			x.TcpiLastAckSent = v.GetTcpiLastAckSent()
		}
		if v, ok := v.(interface{ GetTcpiLastDataRecv() uint32 }); ok {
			x.TcpiLastDataRecv = v.GetTcpiLastDataRecv()
		}
		if v, ok := v.(interface{ GetTcpiLastAckRecv() uint32 }); ok {
			x.TcpiLastAckRecv = v.GetTcpiLastAckRecv()
		}
		if v, ok := v.(interface{ GetTcpiPmtu() uint32 }); ok {
			x.TcpiPmtu = v.GetTcpiPmtu()
		}
		if v, ok := v.(interface{ GetTcpiRcvSsthresh() uint32 }); ok {
			x.TcpiRcvSsthresh = v.GetTcpiRcvSsthresh()
		}
		if v, ok := v.(interface{ GetTcpiRtt() uint32 }); ok {
			x.TcpiRtt = v.GetTcpiRtt()
		}
		if v, ok := v.(interface{ GetTcpiRttvar() uint32 }); ok {
			x.TcpiRttvar = v.GetTcpiRttvar()
		}
		if v, ok := v.(interface{ GetTcpiSndSsthresh() uint32 }); ok {
			x.TcpiSndSsthresh = v.GetTcpiSndSsthresh()
		}
		if v, ok := v.(interface{ GetTcpiSndCwnd() uint32 }); ok {
			x.TcpiSndCwnd = v.GetTcpiSndCwnd()
		}
		if v, ok := v.(interface{ GetTcpiAdvmss() uint32 }); ok {
			x.TcpiAdvmss = v.GetTcpiAdvmss()
		}
		if v, ok := v.(interface{ GetTcpiReordering() uint32 }); ok {
			x.TcpiReordering = v.GetTcpiReordering()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *SocketOptionTcpInfo) Proto_ShallowClone() (c *SocketOptionTcpInfo) {
	if x != nil {
		c = new(SocketOptionTcpInfo)
		c.TcpiState = x.TcpiState
		c.TcpiCaState = x.TcpiCaState
		c.TcpiRetransmits = x.TcpiRetransmits
		c.TcpiProbes = x.TcpiProbes
		c.TcpiBackoff = x.TcpiBackoff
		c.TcpiOptions = x.TcpiOptions
		c.TcpiSndWscale = x.TcpiSndWscale
		c.TcpiRcvWscale = x.TcpiRcvWscale
		c.TcpiRto = x.TcpiRto
		c.TcpiAto = x.TcpiAto
		c.TcpiSndMss = x.TcpiSndMss
		c.TcpiRcvMss = x.TcpiRcvMss
		c.TcpiUnacked = x.TcpiUnacked
		c.TcpiSacked = x.TcpiSacked
		c.TcpiLost = x.TcpiLost
		c.TcpiRetrans = x.TcpiRetrans
		c.TcpiFackets = x.TcpiFackets
		c.TcpiLastDataSent = x.TcpiLastDataSent
		c.TcpiLastAckSent = x.TcpiLastAckSent
		c.TcpiLastDataRecv = x.TcpiLastDataRecv
		c.TcpiLastAckRecv = x.TcpiLastAckRecv
		c.TcpiPmtu = x.TcpiPmtu
		c.TcpiRcvSsthresh = x.TcpiRcvSsthresh
		c.TcpiRtt = x.TcpiRtt
		c.TcpiRttvar = x.TcpiRttvar
		c.TcpiSndSsthresh = x.TcpiSndSsthresh
		c.TcpiSndCwnd = x.TcpiSndCwnd
		c.TcpiAdvmss = x.TcpiAdvmss
		c.TcpiReordering = x.TcpiReordering
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTopChannelsRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTopChannelsRequest:
		x.StartChannelId = v.GetStartChannelId()
		x.MaxResults = v.GetMaxResults()
	default:
		if v, ok := v.(interface{ GetStartChannelId() int64 }); ok {
			x.StartChannelId = v.GetStartChannelId()
		}
		if v, ok := v.(interface{ GetMaxResults() int64 }); ok {
			x.MaxResults = v.GetMaxResults()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTopChannelsRequest) Proto_ShallowClone() (c *GetTopChannelsRequest) {
	if x != nil {
		c = new(GetTopChannelsRequest)
		c.StartChannelId = x.StartChannelId
		c.MaxResults = x.MaxResults
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetTopChannelsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetTopChannelsResponse:
		x.Channel = v.GetChannel()
		x.End = v.GetEnd()
	default:
		if v, ok := v.(interface{ GetChannel() []*Channel }); ok {
			x.Channel = v.GetChannel()
		}
		if v, ok := v.(interface{ GetEnd() bool }); ok {
			x.End = v.GetEnd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetTopChannelsResponse) Proto_ShallowClone() (c *GetTopChannelsResponse) {
	if x != nil {
		c = new(GetTopChannelsResponse)
		c.Channel = x.Channel
		c.End = x.End
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetServersRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetServersRequest:
		x.StartServerId = v.GetStartServerId()
		x.MaxResults = v.GetMaxResults()
	default:
		if v, ok := v.(interface{ GetStartServerId() int64 }); ok {
			x.StartServerId = v.GetStartServerId()
		}
		if v, ok := v.(interface{ GetMaxResults() int64 }); ok {
			x.MaxResults = v.GetMaxResults()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetServersRequest) Proto_ShallowClone() (c *GetServersRequest) {
	if x != nil {
		c = new(GetServersRequest)
		c.StartServerId = x.StartServerId
		c.MaxResults = x.MaxResults
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetServersResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetServersResponse:
		x.Server = v.GetServer()
		x.End = v.GetEnd()
	default:
		if v, ok := v.(interface{ GetServer() []*Server }); ok {
			x.Server = v.GetServer()
		}
		if v, ok := v.(interface{ GetEnd() bool }); ok {
			x.End = v.GetEnd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetServersResponse) Proto_ShallowClone() (c *GetServersResponse) {
	if x != nil {
		c = new(GetServersResponse)
		c.Server = x.Server
		c.End = x.End
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetServerRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetServerRequest:
		x.ServerId = v.GetServerId()
	default:
		if v, ok := v.(interface{ GetServerId() int64 }); ok {
			x.ServerId = v.GetServerId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetServerRequest) Proto_ShallowClone() (c *GetServerRequest) {
	if x != nil {
		c = new(GetServerRequest)
		c.ServerId = x.ServerId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetServerResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetServerResponse:
		x.Server = v.GetServer()
	default:
		if v, ok := v.(interface{ GetServer() *Server }); ok {
			x.Server = v.GetServer()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetServerResponse) Proto_ShallowClone() (c *GetServerResponse) {
	if x != nil {
		c = new(GetServerResponse)
		c.Server = x.Server
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetServerSocketsRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetServerSocketsRequest:
		x.ServerId = v.GetServerId()
		x.StartSocketId = v.GetStartSocketId()
		x.MaxResults = v.GetMaxResults()
	default:
		if v, ok := v.(interface{ GetServerId() int64 }); ok {
			x.ServerId = v.GetServerId()
		}
		if v, ok := v.(interface{ GetStartSocketId() int64 }); ok {
			x.StartSocketId = v.GetStartSocketId()
		}
		if v, ok := v.(interface{ GetMaxResults() int64 }); ok {
			x.MaxResults = v.GetMaxResults()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetServerSocketsRequest) Proto_ShallowClone() (c *GetServerSocketsRequest) {
	if x != nil {
		c = new(GetServerSocketsRequest)
		c.ServerId = x.ServerId
		c.StartSocketId = x.StartSocketId
		c.MaxResults = x.MaxResults
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetServerSocketsResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetServerSocketsResponse:
		x.SocketRef = v.GetSocketRef()
		x.End = v.GetEnd()
	default:
		if v, ok := v.(interface{ GetSocketRef() []*SocketRef }); ok {
			x.SocketRef = v.GetSocketRef()
		}
		if v, ok := v.(interface{ GetEnd() bool }); ok {
			x.End = v.GetEnd()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetServerSocketsResponse) Proto_ShallowClone() (c *GetServerSocketsResponse) {
	if x != nil {
		c = new(GetServerSocketsResponse)
		c.SocketRef = x.SocketRef
		c.End = x.End
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetChannelRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetChannelRequest:
		x.ChannelId = v.GetChannelId()
	default:
		if v, ok := v.(interface{ GetChannelId() int64 }); ok {
			x.ChannelId = v.GetChannelId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetChannelRequest) Proto_ShallowClone() (c *GetChannelRequest) {
	if x != nil {
		c = new(GetChannelRequest)
		c.ChannelId = x.ChannelId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetChannelResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetChannelResponse:
		x.Channel = v.GetChannel()
	default:
		if v, ok := v.(interface{ GetChannel() *Channel }); ok {
			x.Channel = v.GetChannel()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetChannelResponse) Proto_ShallowClone() (c *GetChannelResponse) {
	if x != nil {
		c = new(GetChannelResponse)
		c.Channel = x.Channel
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetSubchannelRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetSubchannelRequest:
		x.SubchannelId = v.GetSubchannelId()
	default:
		if v, ok := v.(interface{ GetSubchannelId() int64 }); ok {
			x.SubchannelId = v.GetSubchannelId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetSubchannelRequest) Proto_ShallowClone() (c *GetSubchannelRequest) {
	if x != nil {
		c = new(GetSubchannelRequest)
		c.SubchannelId = x.SubchannelId
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetSubchannelResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetSubchannelResponse:
		x.Subchannel = v.GetSubchannel()
	default:
		if v, ok := v.(interface{ GetSubchannel() *Subchannel }); ok {
			x.Subchannel = v.GetSubchannel()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetSubchannelResponse) Proto_ShallowClone() (c *GetSubchannelResponse) {
	if x != nil {
		c = new(GetSubchannelResponse)
		c.Subchannel = x.Subchannel
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetSocketRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetSocketRequest:
		x.SocketId = v.GetSocketId()
		x.Summary = v.GetSummary()
	default:
		if v, ok := v.(interface{ GetSocketId() int64 }); ok {
			x.SocketId = v.GetSocketId()
		}
		if v, ok := v.(interface{ GetSummary() bool }); ok {
			x.Summary = v.GetSummary()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetSocketRequest) Proto_ShallowClone() (c *GetSocketRequest) {
	if x != nil {
		c = new(GetSocketRequest)
		c.SocketId = x.SocketId
		c.Summary = x.Summary
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *GetSocketResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *GetSocketResponse:
		x.Socket = v.GetSocket()
	default:
		if v, ok := v.(interface{ GetSocket() *Socket }); ok {
			x.Socket = v.GetSocket()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *GetSocketResponse) Proto_ShallowClone() (c *GetSocketResponse) {
	if x != nil {
		c = new(GetSocketResponse)
		c.Socket = x.Socket
	}
	return
}
