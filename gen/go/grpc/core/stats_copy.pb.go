// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: grpc/core/stats.proto

package grpc_core

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Bucket) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Bucket:
		x.Start = v.GetStart()
		x.Count = v.GetCount()
	default:
		if v, ok := v.(interface{ GetStart() float64 }); ok {
			x.Start = v.GetStart()
		}
		if v, ok := v.(interface{ GetCount() uint64 }); ok {
			x.Count = v.GetCount()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Bucket) Proto_ShallowClone() (c *Bucket) {
	if x != nil {
		c = new(Bucket)
		c.Start = x.Start
		c.Count = x.Count
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Histogram) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Histogram:
		x.Buckets = v.GetBuckets()
	default:
		if v, ok := v.(interface{ GetBuckets() []*Bucket }); ok {
			x.Buckets = v.GetBuckets()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Histogram) Proto_ShallowClone() (c *Histogram) {
	if x != nil {
		c = new(Histogram)
		c.Buckets = x.Buckets
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Metric) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Metric:
		x.Name = v.GetName()
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetName() string }); ok {
			x.Name = v.GetName()
		}
		if v, ok := v.(interface{ GetValue() isMetric_Value }); ok {
			x.Value = v.GetValue()
		} else {
			func() {
				if v, ok := v.(interface{ GetCount() uint64 }); ok {
					var defaultValue uint64
					if v := v.GetCount(); v != defaultValue {
						x.Value = &Metric_Count{Count: v}
						return
					}
				}
				if v, ok := v.(interface{ GetHistogram() *Histogram }); ok {
					var defaultValue *Histogram
					if v := v.GetHistogram(); v != defaultValue {
						x.Value = &Metric_Histogram{Histogram: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Metric) Proto_ShallowClone() (c *Metric) {
	if x != nil {
		c = new(Metric)
		c.Name = x.Name
		c.Value = x.Value
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Stats) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Stats:
		x.Metrics = v.GetMetrics()
	default:
		if v, ok := v.(interface{ GetMetrics() []*Metric }); ok {
			x.Metrics = v.GetMetrics()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Stats) Proto_ShallowClone() (c *Stats) {
	if x != nil {
		c = new(Stats)
		c.Metrics = x.Metrics
	}
	return
}
