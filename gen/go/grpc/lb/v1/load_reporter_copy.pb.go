// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: grpc/lb/v1/load_reporter.proto

package grpc_lb_v1

import "google.golang.org/protobuf/types/known/durationpb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *LoadReportRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *LoadReportRequest:
		x.InitialRequest = v.GetInitialRequest()
	default:
		if v, ok := v.(interface {
			GetInitialRequest() *InitialLoadReportRequest
		}); ok {
			x.InitialRequest = v.GetInitialRequest()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *LoadReportRequest) Proto_ShallowClone() (c *LoadReportRequest) {
	if x != nil {
		c = new(LoadReportRequest)
		c.InitialRequest = x.InitialRequest
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *InitialLoadReportRequest) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *InitialLoadReportRequest:
		x.LoadBalancedHostname = v.GetLoadBalancedHostname()
		x.LoadKey = v.GetLoadKey()
		x.LoadReportInterval = v.GetLoadReportInterval()
	default:
		if v, ok := v.(interface{ GetLoadBalancedHostname() string }); ok {
			x.LoadBalancedHostname = v.GetLoadBalancedHostname()
		}
		if v, ok := v.(interface{ GetLoadKey() []byte }); ok {
			x.LoadKey = v.GetLoadKey()
		}
		if v, ok := v.(interface{ GetLoadReportInterval() *durationpb.Duration }); ok {
			x.LoadReportInterval = v.GetLoadReportInterval()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *InitialLoadReportRequest) Proto_ShallowClone() (c *InitialLoadReportRequest) {
	if x != nil {
		c = new(InitialLoadReportRequest)
		c.LoadBalancedHostname = x.LoadBalancedHostname
		c.LoadKey = x.LoadKey
		c.LoadReportInterval = x.LoadReportInterval
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *LoadReportResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *LoadReportResponse:
		x.InitialResponse = v.GetInitialResponse()
		x.LoadBalancingFeedback = v.GetLoadBalancingFeedback()
		x.Load = v.GetLoad()
	default:
		if v, ok := v.(interface {
			GetInitialResponse() *InitialLoadReportResponse
		}); ok {
			x.InitialResponse = v.GetInitialResponse()
		}
		if v, ok := v.(interface{ GetLoadBalancingFeedback() *LoadBalancingFeedback }); ok {
			x.LoadBalancingFeedback = v.GetLoadBalancingFeedback()
		}
		if v, ok := v.(interface{ GetLoad() []*Load }); ok {
			x.Load = v.GetLoad()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *LoadReportResponse) Proto_ShallowClone() (c *LoadReportResponse) {
	if x != nil {
		c = new(LoadReportResponse)
		c.InitialResponse = x.InitialResponse
		c.LoadBalancingFeedback = x.LoadBalancingFeedback
		c.Load = x.Load
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *InitialLoadReportResponse) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *InitialLoadReportResponse:
		x.LoadBalancerId = v.GetLoadBalancerId()
		x.ImplementationId = v.GetImplementationId()
		x.ServerVersion = v.GetServerVersion()
	default:
		if v, ok := v.(interface{ GetLoadBalancerId() string }); ok {
			x.LoadBalancerId = v.GetLoadBalancerId()
		}
		if v, ok := v.(interface {
			GetImplementationId() InitialLoadReportResponse_ImplementationIdentifier
		}); ok {
			x.ImplementationId = v.GetImplementationId()
		}
		if v, ok := v.(interface{ GetServerVersion() int64 }); ok {
			x.ServerVersion = v.GetServerVersion()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *InitialLoadReportResponse) Proto_ShallowClone() (c *InitialLoadReportResponse) {
	if x != nil {
		c = new(InitialLoadReportResponse)
		c.LoadBalancerId = x.LoadBalancerId
		c.ImplementationId = x.ImplementationId
		c.ServerVersion = x.ServerVersion
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *LoadBalancingFeedback) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *LoadBalancingFeedback:
		x.ServerUtilization = v.GetServerUtilization()
		x.CallsPerSecond = v.GetCallsPerSecond()
		x.ErrorsPerSecond = v.GetErrorsPerSecond()
	default:
		if v, ok := v.(interface{ GetServerUtilization() float32 }); ok {
			x.ServerUtilization = v.GetServerUtilization()
		}
		if v, ok := v.(interface{ GetCallsPerSecond() float32 }); ok {
			x.CallsPerSecond = v.GetCallsPerSecond()
		}
		if v, ok := v.(interface{ GetErrorsPerSecond() float32 }); ok {
			x.ErrorsPerSecond = v.GetErrorsPerSecond()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *LoadBalancingFeedback) Proto_ShallowClone() (c *LoadBalancingFeedback) {
	if x != nil {
		c = new(LoadBalancingFeedback)
		c.ServerUtilization = x.ServerUtilization
		c.CallsPerSecond = x.CallsPerSecond
		c.ErrorsPerSecond = x.ErrorsPerSecond
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Load) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Load:
		x.LoadBalanceTag = v.GetLoadBalanceTag()
		x.UserId = v.GetUserId()
		x.ClientIpAddress = v.GetClientIpAddress()
		x.NumCallsStarted = v.GetNumCallsStarted()
		x.InProgressReport = v.GetInProgressReport()
		x.NumCallsFinishedWithoutError = v.GetNumCallsFinishedWithoutError()
		x.NumCallsFinishedWithError = v.GetNumCallsFinishedWithError()
		x.NumCallsFinishedWithServerError = v.GetNumCallsFinishedWithServerError()
		x.TotalBytesSent = v.GetTotalBytesSent()
		x.TotalBytesReceived = v.GetTotalBytesReceived()
		x.TotalLatency = v.GetTotalLatency()
		x.MetricData = v.GetMetricData()
		x.OrphanedLoad = v.GetOrphanedLoad()
	default:
		if v, ok := v.(interface{ GetLoadBalanceTag() string }); ok {
			x.LoadBalanceTag = v.GetLoadBalanceTag()
		}
		if v, ok := v.(interface{ GetUserId() string }); ok {
			x.UserId = v.GetUserId()
		}
		if v, ok := v.(interface{ GetClientIpAddress() []byte }); ok {
			x.ClientIpAddress = v.GetClientIpAddress()
		}
		if v, ok := v.(interface{ GetNumCallsStarted() int64 }); ok {
			x.NumCallsStarted = v.GetNumCallsStarted()
		}
		if v, ok := v.(interface {
			GetInProgressReport() isLoad_InProgressReport
		}); ok {
			x.InProgressReport = v.GetInProgressReport()
		} else {
			func() {
				if v, ok := v.(interface{ GetNumCallsInProgress() int64 }); ok {
					var defaultValue int64
					if v := v.GetNumCallsInProgress(); v != defaultValue {
						x.InProgressReport = &Load_NumCallsInProgress{NumCallsInProgress: v}
						return
					}
				}
			}()
		}
		if v, ok := v.(interface{ GetNumCallsFinishedWithoutError() int64 }); ok {
			x.NumCallsFinishedWithoutError = v.GetNumCallsFinishedWithoutError()
		}
		if v, ok := v.(interface{ GetNumCallsFinishedWithError() int64 }); ok {
			x.NumCallsFinishedWithError = v.GetNumCallsFinishedWithError()
		}
		if v, ok := v.(interface{ GetNumCallsFinishedWithServerError() int64 }); ok {
			x.NumCallsFinishedWithServerError = v.GetNumCallsFinishedWithServerError()
		}
		if v, ok := v.(interface{ GetTotalBytesSent() int64 }); ok {
			x.TotalBytesSent = v.GetTotalBytesSent()
		}
		if v, ok := v.(interface{ GetTotalBytesReceived() int64 }); ok {
			x.TotalBytesReceived = v.GetTotalBytesReceived()
		}
		if v, ok := v.(interface{ GetTotalLatency() *durationpb.Duration }); ok {
			x.TotalLatency = v.GetTotalLatency()
		}
		if v, ok := v.(interface{ GetMetricData() []*CallMetricData }); ok {
			x.MetricData = v.GetMetricData()
		}
		if v, ok := v.(interface{ GetOrphanedLoad() isLoad_OrphanedLoad }); ok {
			x.OrphanedLoad = v.GetOrphanedLoad()
		} else {
			func() {
				if v, ok := v.(interface{ GetLoadKey() []byte }); ok {
					if v := v.GetLoadKey(); v != nil {
						x.OrphanedLoad = &Load_LoadKey{LoadKey: v}
						return
					}
				}
				if v, ok := v.(interface{ GetLoadKeyUnknown() bool }); ok {
					var defaultValue bool
					if v := v.GetLoadKeyUnknown(); v != defaultValue {
						x.OrphanedLoad = &Load_LoadKeyUnknown{LoadKeyUnknown: v}
						return
					}
				}
				if v, ok := v.(interface {
					GetOrphanedLoadIdentifier() *OrphanedLoadIdentifier
				}); ok {
					var defaultValue *OrphanedLoadIdentifier
					if v := v.GetOrphanedLoadIdentifier(); v != defaultValue {
						x.OrphanedLoad = &Load_OrphanedLoadIdentifier{OrphanedLoadIdentifier: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Load) Proto_ShallowClone() (c *Load) {
	if x != nil {
		c = new(Load)
		c.LoadBalanceTag = x.LoadBalanceTag
		c.UserId = x.UserId
		c.ClientIpAddress = x.ClientIpAddress
		c.NumCallsStarted = x.NumCallsStarted
		c.InProgressReport = x.InProgressReport
		c.NumCallsFinishedWithoutError = x.NumCallsFinishedWithoutError
		c.NumCallsFinishedWithError = x.NumCallsFinishedWithError
		c.NumCallsFinishedWithServerError = x.NumCallsFinishedWithServerError
		c.TotalBytesSent = x.TotalBytesSent
		c.TotalBytesReceived = x.TotalBytesReceived
		c.TotalLatency = x.TotalLatency
		c.MetricData = x.MetricData
		c.OrphanedLoad = x.OrphanedLoad
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *CallMetricData) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *CallMetricData:
		x.MetricName = v.GetMetricName()
		x.NumCallsFinishedWithMetric = v.GetNumCallsFinishedWithMetric()
		x.TotalMetricValue = v.GetTotalMetricValue()
	default:
		if v, ok := v.(interface{ GetMetricName() string }); ok {
			x.MetricName = v.GetMetricName()
		}
		if v, ok := v.(interface{ GetNumCallsFinishedWithMetric() int64 }); ok {
			x.NumCallsFinishedWithMetric = v.GetNumCallsFinishedWithMetric()
		}
		if v, ok := v.(interface{ GetTotalMetricValue() float64 }); ok {
			x.TotalMetricValue = v.GetTotalMetricValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *CallMetricData) Proto_ShallowClone() (c *CallMetricData) {
	if x != nil {
		c = new(CallMetricData)
		c.MetricName = x.MetricName
		c.NumCallsFinishedWithMetric = x.NumCallsFinishedWithMetric
		c.TotalMetricValue = x.TotalMetricValue
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *OrphanedLoadIdentifier) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *OrphanedLoadIdentifier:
		x.LoadKey = v.GetLoadKey()
		x.LoadBalancerId = v.GetLoadBalancerId()
	default:
		if v, ok := v.(interface{ GetLoadKey() []byte }); ok {
			x.LoadKey = v.GetLoadKey()
		}
		if v, ok := v.(interface{ GetLoadBalancerId() string }); ok {
			x.LoadBalancerId = v.GetLoadBalancerId()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *OrphanedLoadIdentifier) Proto_ShallowClone() (c *OrphanedLoadIdentifier) {
	if x != nil {
		c = new(OrphanedLoadIdentifier)
		c.LoadKey = x.LoadKey
		c.LoadBalancerId = x.LoadBalancerId
	}
	return
}
