// Code generated by protoc-gen-go-copy. DO NOT EDIT.
// source: grpc/binary_log/v1alpha/log.proto

package grpc_binary_log_v1alpha

import "google.golang.org/protobuf/types/known/timestamppb"

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *KeyValuePair) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *KeyValuePair:
		x.Key = v.GetKey()
		x.Value = v.GetValue()
	default:
		if v, ok := v.(interface{ GetKey() string }); ok {
			x.Key = v.GetKey()
		}
		if v, ok := v.(interface{ GetValue() string }); ok {
			x.Value = v.GetValue()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *KeyValuePair) Proto_ShallowClone() (c *KeyValuePair) {
	if x != nil {
		c = new(KeyValuePair)
		c.Key = x.Key
		c.Value = x.Value
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Metadata) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Metadata:
		x.RpcId = v.GetRpcId()
		x.Timestamp = v.GetTimestamp()
		x.Direction = v.GetDirection()
		x.Metadata = v.GetMetadata()
		x.Kind = v.GetKind()
	default:
		if v, ok := v.(interface{ GetRpcId() uint64 }); ok {
			x.RpcId = v.GetRpcId()
		}
		if v, ok := v.(interface{ GetTimestamp() *timestamppb.Timestamp }); ok {
			x.Timestamp = v.GetTimestamp()
		}
		if v, ok := v.(interface{ GetDirection() Direction }); ok {
			x.Direction = v.GetDirection()
		}
		if v, ok := v.(interface{ GetMetadata() []*KeyValuePair }); ok {
			x.Metadata = v.GetMetadata()
		}
		if v, ok := v.(interface{ GetKind() isMetadata_Kind }); ok {
			x.Kind = v.GetKind()
		} else {
			func() {
				if v, ok := v.(interface {
					GetClientInitialMetadata() *Metadata_ClientInitialMetadata
				}); ok {
					var defaultValue *Metadata_ClientInitialMetadata
					if v := v.GetClientInitialMetadata(); v != defaultValue {
						x.Kind = &Metadata_ClientInitialMetadata_{ClientInitialMetadata: v}
						return
					}
				}
				if v, ok := v.(interface{ GetUserData() *Metadata_UserData }); ok {
					var defaultValue *Metadata_UserData
					if v := v.GetUserData(); v != defaultValue {
						x.Kind = &Metadata_UserData_{UserData: v}
						return
					}
				}
				if v, ok := v.(interface {
					GetServerInitialMetadata() *Metadata_ServerInitialMetadata
				}); ok {
					var defaultValue *Metadata_ServerInitialMetadata
					if v := v.GetServerInitialMetadata(); v != defaultValue {
						x.Kind = &Metadata_ServerInitialMetadata_{ServerInitialMetadata: v}
						return
					}
				}
				if v, ok := v.(interface{ GetServerStatus() *Metadata_ServerStatus }); ok {
					var defaultValue *Metadata_ServerStatus
					if v := v.GetServerStatus(); v != defaultValue {
						x.Kind = &Metadata_ServerStatus_{ServerStatus: v}
						return
					}
				}
			}()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Metadata) Proto_ShallowClone() (c *Metadata) {
	if x != nil {
		c = new(Metadata)
		c.RpcId = x.RpcId
		c.Timestamp = x.Timestamp
		c.Direction = x.Direction
		c.Metadata = x.Metadata
		c.Kind = x.Kind
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Metadata_ClientInitialMetadata) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Metadata_ClientInitialMetadata:
		x.MethodName = v.GetMethodName()
		x.Deadline = v.GetDeadline()
		x.Peer = v.GetPeer()
	default:
		if v, ok := v.(interface{ GetMethodName() string }); ok {
			x.MethodName = v.GetMethodName()
		}
		if v, ok := v.(interface{ GetDeadline() *timestamppb.Timestamp }); ok {
			x.Deadline = v.GetDeadline()
		}
		if v, ok := v.(interface{ GetPeer() string }); ok {
			x.Peer = v.GetPeer()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Metadata_ClientInitialMetadata) Proto_ShallowClone() (c *Metadata_ClientInitialMetadata) {
	if x != nil {
		c = new(Metadata_ClientInitialMetadata)
		c.MethodName = x.MethodName
		c.Deadline = x.Deadline
		c.Peer = x.Peer
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Metadata_UserData) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Metadata_UserData) Proto_ShallowClone() (c *Metadata_UserData) {
	if x != nil {
		c = new(Metadata_UserData)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Metadata_ServerInitialMetadata) Proto_ShallowCopy(v interface{}) {
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Metadata_ServerInitialMetadata) Proto_ShallowClone() (c *Metadata_ServerInitialMetadata) {
	if x != nil {
		c = new(Metadata_ServerInitialMetadata)
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Metadata_ServerStatus) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Metadata_ServerStatus:
		x.Code = v.GetCode()
		x.Details = v.GetDetails()
	default:
		if v, ok := v.(interface{ GetCode() uint32 }); ok {
			x.Code = v.GetCode()
		}
		if v, ok := v.(interface{ GetDetails() string }); ok {
			x.Details = v.GetDetails()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Metadata_ServerStatus) Proto_ShallowClone() (c *Metadata_ServerStatus) {
	if x != nil {
		c = new(Metadata_ServerStatus)
		c.Code = x.Code
		c.Details = x.Details
	}
	return
}

// Proto_ShallowCopy copies fields, from v to the receiver, using field getters.
// Note that v is of an arbitrary type, which may implement any number of the
// field getters, which are defined as any methods of the same signature as those
// generated for the receiver type, with a name starting with Get.
func (x *Message) Proto_ShallowCopy(v interface{}) {
	switch v := v.(type) {
	case *Message:
		x.RpcId = v.GetRpcId()
		x.SequenceNumber = v.GetSequenceNumber()
		x.Direction = v.GetDirection()
		x.Length = v.GetLength()
		x.Data = v.GetData()
	default:
		if v, ok := v.(interface{ GetRpcId() uint64 }); ok {
			x.RpcId = v.GetRpcId()
		}
		if v, ok := v.(interface{ GetSequenceNumber() uint32 }); ok {
			x.SequenceNumber = v.GetSequenceNumber()
		}
		if v, ok := v.(interface{ GetDirection() Direction }); ok {
			x.Direction = v.GetDirection()
		}
		if v, ok := v.(interface{ GetLength() uint32 }); ok {
			x.Length = v.GetLength()
		}
		if v, ok := v.(interface{ GetData() []byte }); ok {
			x.Data = v.GetData()
		}
	}
}

// Proto_ShallowClone returns a shallow copy of the receiver or nil if it's nil.
func (x *Message) Proto_ShallowClone() (c *Message) {
	if x != nil {
		c = new(Message)
		c.RpcId = x.RpcId
		c.SequenceNumber = x.SequenceNumber
		c.Direction = x.Direction
		c.Length = x.Length
		c.Data = x.Data
	}
	return
}
