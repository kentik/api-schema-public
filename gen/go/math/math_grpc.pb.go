// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package math

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathClient is the client API for Math service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathClient interface {
	// Div divides DivArgs.dividend by DivArgs.divisor and returns the quotient
	// and remainder.
	Div(ctx context.Context, in *DivArgs, opts ...grpc.CallOption) (*DivReply, error)
	// DivMany accepts an arbitrary number of division args from the client stream
	// and sends back the results in the reply stream.  The stream continues until
	// the client closes its end; the server does the same after sending all the
	// replies.  The stream ends immediately if either end aborts.
	DivMany(ctx context.Context, opts ...grpc.CallOption) (Math_DivManyClient, error)
	// Fib generates numbers in the Fibonacci sequence.  If FibArgs.limit > 0, Fib
	// generates up to limit numbers; otherwise it continues until the call is
	// canceled.  Unlike Fib above, Fib has no final FibReply.
	Fib(ctx context.Context, in *FibArgs, opts ...grpc.CallOption) (Math_FibClient, error)
	// Sum sums a stream of numbers, returning the final result once the stream
	// is closed.
	Sum(ctx context.Context, opts ...grpc.CallOption) (Math_SumClient, error)
}

type mathClient struct {
	cc grpc.ClientConnInterface
}

func NewMathClient(cc grpc.ClientConnInterface) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Div(ctx context.Context, in *DivArgs, opts ...grpc.CallOption) (*DivReply, error) {
	out := new(DivReply)
	err := c.cc.Invoke(ctx, "/math.Math/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) DivMany(ctx context.Context, opts ...grpc.CallOption) (Math_DivManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Math_ServiceDesc.Streams[0], "/math.Math/DivMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathDivManyClient{stream}
	return x, nil
}

type Math_DivManyClient interface {
	Send(*DivArgs) error
	Recv() (*DivReply, error)
	grpc.ClientStream
}

type mathDivManyClient struct {
	grpc.ClientStream
}

func (x *mathDivManyClient) Send(m *DivArgs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathDivManyClient) Recv() (*DivReply, error) {
	m := new(DivReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mathClient) Fib(ctx context.Context, in *FibArgs, opts ...grpc.CallOption) (Math_FibClient, error) {
	stream, err := c.cc.NewStream(ctx, &Math_ServiceDesc.Streams[1], "/math.Math/Fib", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathFibClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Math_FibClient interface {
	Recv() (*Num, error)
	grpc.ClientStream
}

type mathFibClient struct {
	grpc.ClientStream
}

func (x *mathFibClient) Recv() (*Num, error) {
	m := new(Num)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mathClient) Sum(ctx context.Context, opts ...grpc.CallOption) (Math_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &Math_ServiceDesc.Streams[2], "/math.Math/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathSumClient{stream}
	return x, nil
}

type Math_SumClient interface {
	Send(*Num) error
	CloseAndRecv() (*Num, error)
	grpc.ClientStream
}

type mathSumClient struct {
	grpc.ClientStream
}

func (x *mathSumClient) Send(m *Num) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathSumClient) CloseAndRecv() (*Num, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Num)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathServer is the server API for Math service.
// All implementations should embed UnimplementedMathServer
// for forward compatibility
type MathServer interface {
	// Div divides DivArgs.dividend by DivArgs.divisor and returns the quotient
	// and remainder.
	Div(context.Context, *DivArgs) (*DivReply, error)
	// DivMany accepts an arbitrary number of division args from the client stream
	// and sends back the results in the reply stream.  The stream continues until
	// the client closes its end; the server does the same after sending all the
	// replies.  The stream ends immediately if either end aborts.
	DivMany(Math_DivManyServer) error
	// Fib generates numbers in the Fibonacci sequence.  If FibArgs.limit > 0, Fib
	// generates up to limit numbers; otherwise it continues until the call is
	// canceled.  Unlike Fib above, Fib has no final FibReply.
	Fib(*FibArgs, Math_FibServer) error
	// Sum sums a stream of numbers, returning the final result once the stream
	// is closed.
	Sum(Math_SumServer) error
}

// UnimplementedMathServer should be embedded to have forward compatible implementations.
type UnimplementedMathServer struct {
}

func (UnimplementedMathServer) Div(context.Context, *DivArgs) (*DivReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (UnimplementedMathServer) DivMany(Math_DivManyServer) error {
	return status.Errorf(codes.Unimplemented, "method DivMany not implemented")
}
func (UnimplementedMathServer) Fib(*FibArgs, Math_FibServer) error {
	return status.Errorf(codes.Unimplemented, "method Fib not implemented")
}
func (UnimplementedMathServer) Sum(Math_SumServer) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}

// UnsafeMathServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathServer will
// result in compilation errors.
type UnsafeMathServer interface {
	mustEmbedUnimplementedMathServer()
}

func RegisterMathServer(s grpc.ServiceRegistrar, srv MathServer) {
	s.RegisterService(&Math_ServiceDesc, srv)
}

func _Math_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math.Math/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Div(ctx, req.(*DivArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_DivMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathServer).DivMany(&mathDivManyServer{stream})
}

type Math_DivManyServer interface {
	Send(*DivReply) error
	Recv() (*DivArgs, error)
	grpc.ServerStream
}

type mathDivManyServer struct {
	grpc.ServerStream
}

func (x *mathDivManyServer) Send(m *DivReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathDivManyServer) Recv() (*DivArgs, error) {
	m := new(DivArgs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Math_Fib_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FibArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MathServer).Fib(m, &mathFibServer{stream})
}

type Math_FibServer interface {
	Send(*Num) error
	grpc.ServerStream
}

type mathFibServer struct {
	grpc.ServerStream
}

func (x *mathFibServer) Send(m *Num) error {
	return x.ServerStream.SendMsg(m)
}

func _Math_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathServer).Sum(&mathSumServer{stream})
}

type Math_SumServer interface {
	SendAndClose(*Num) error
	Recv() (*Num, error)
	grpc.ServerStream
}

type mathSumServer struct {
	grpc.ServerStream
}

func (x *mathSumServer) SendAndClose(m *Num) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathSumServer) Recv() (*Num, error) {
	m := new(Num)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Math_ServiceDesc is the grpc.ServiceDesc for Math service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Math_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "math.Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Div",
			Handler:    _Math_Div_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DivMany",
			Handler:       _Math_DivMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Fib",
			Handler:       _Math_Fib_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sum",
			Handler:       _Math_Sum_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "math/math.proto",
}
