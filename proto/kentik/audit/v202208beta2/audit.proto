syntax = "proto3";

package kentik.audit.v202208beta2;
option go_package = "github.com/kentik/api-schema/gen/go/kentik/audit/v202208beta2;audit";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "kentik/core/v202012alpha1/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Audit API"
    version: "202208beta1"
    contact: {
      name: "Kentik API Engineering"
      url: "https://github.com/kentik/api"
    }
  }
  external_docs: {
    url: "https://docs.kentik.com/api"
    description: "More about Kentik APIs"
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "email"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-Email"
      }
    }
    security: {
      key: "token"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-API-Token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "email"
      value: {}
    }
    security_requirement: {
      key: "token"
      value: {}
    }
  }
};

// models
// -------------------------------------------------------

enum RequestProtocol {
  REQUEST_PROTOCOL_UNSPECIFIED = 0;
  REQUEST_PROTOCOL_REST = 1;
  REQUEST_PROTOCOL_GRPC = 2;
}

// Event Types

// RequestEvent describes an event generated by an REST or a gRPC request
message RequestEvent {
  string request_method = 1;
  string request_path = 2;
  // IP address of the client that made the request. Example: 75.2.60.5
  string client_address = 3;
  uint32 response_code = 4;
  map<string, string> request_metadata = 5;
  map<string, string> response_metadata = 6;
  RequestProtocol request_protocol = 7;
}


// -------------------------------------------------------

message AuditEvent {
  // ID of the user (uid) that produced the event
  string user_id = 1;
  // ID of the company (cid) that produced the event
  string company_id = 2;
  // Name of the service that generated the event.
  string service_name = 3;  
  // Unique identifier of the event. EventID and ServiceName are used to identify an event uniquely
  string event_id = 4;
  // When the event was produced. Required.
  google.protobuf.Timestamp ctime = 5;
  // Event payload as a JSON string
  string event_payload = 6;
  // Idenfier for events generated by the same root transaction. For instrumented services, this is usually the trace ID
  string correlation_id = 7;
  // ID of the event in the database (read-only)
  uint64 id = 8;
  
  // TODO
  // Should we have a different event type for UI/portal events? How about events that are not related to a request? Like an internal event?

  oneof event_type {
    RequestEvent request = 20;
  }
}

message CreateAuditEventsRequest {
  repeated AuditEvent events = 1;
}

message CreateAuditEventsResponse {

}

message ListAuditEventsRequest {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  uint64 offset = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {default: "0"}];
  uint64 limit = 16 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {default: "100"}];
}

message ListAuditEventsResponse {
  repeated AuditEvent events = 1;
}

message GetAuditEventRequest {
  int64 id = 1;
  google.protobuf.Timestamp ctime = 2;
}

message GetAuditEventResponse {
  AuditEvent event = 1;
}

service AuditService {
    option (google.api.default_host) = "grpc.api.kentik.com";
    option (kentik.core.v202012alpha1.service_scope) = "admin.audit";

    rpc CreateAuditEvents (CreateAuditEventsRequest) returns (CreateAuditEventsResponse) {
      option (kentik.core.v202012alpha1.method_scope) = "audit:write";
      option (google.api.http) = {
        post: "/audit/v202208beta2/events"
        body: "*"
      };
      
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        operation_id: "CreateAuditEvents"
        summary: "Create one ore more audit events."
        description: "Create one ore more audit events."
      };
    }
    
    rpc ListAuditEvents(ListAuditEventsRequest) returns (ListAuditEventsResponse) {
      option (kentik.core.v202012alpha1.method_scope) = "audit:read";
      
      option (google.api.http) = {
        get: "/audit/v202208beta2/events"
      };

      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        operation_id: "AuditEventList"
        summary: "List Audit Events."
        description: "Returns a list of audit events."
      };
    }

    rpc GetAuditEvent(GetAuditEventRequest) returns (GetAuditEventResponse) {
      option (kentik.core.v202012alpha1.method_scope) = "audit:read";
      option (google.api.http) = {
        get: "/audit/v202208beta2/events/{id}/{ctime}"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        operation_id: "GetAuditEvent"
        summary: "Get an Audit Event"
        description: "Return a specific audit event."
      };
    }
}
