// Synthetics data and admin APIs

syntax = "proto3";

package kentik.synthetics.v202202;
option go_package = "github.com/kentik/api-schema/gen/go/kentik/synthetics/v202202;synthetics";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "kentik/core/v202012alpha1/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Synthetics Monitoring API"
    version: "202202"
    contact: {
      name: "Kentik API Engineering"
      url: "https://github.com/kentik/api"
    }
  }
  external_docs: {
    url: "https://docs.kentik.com/api"
    description: "More about Kentik APIs"
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "email"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-Email"
      }
    }
    security: {
      key: "token"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-API-Token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "email"
      value: {}
    }
    security_requirement: {
      key: "token"
      value: {}
    }
  }
};

// models
// -------------------------------------------------------

// === AGENT config and status ===

// Agent impl type determines capabilities of agent.
enum ImplementType {
  IMPLEMENT_TYPE_UNSPECIFIED = 0;
  // ksynth agent (implemented in Rust) capable of running all tasks except for page-load
  IMPLEMENT_TYPE_RUST = 1;
  // ksynth-agent (implemented in NodeJS) capable of running ping, traceroute and page-load tasks
  IMPLEMENT_TYPE_NODE = 2;
}

message Agent {
  // id of this agent.
  string id = 1;
  string site_name = 2;
  AgentStatus status = 3;
  string alias = 4;
  string type = 5;
  string os = 6;
  string ip = 7;
  double lat = 8;
  double long = 9;
  google.protobuf.Timestamp last_authed = 10;
  IPFamily family = 11;
  uint32 asn = 12;
  string site_id = 13;
  string version = 14;
  string city = 16;
  string region = 17;
  string country = 18;
  repeated string test_ids = 19;
  string local_ip = 20;
  string cloud_region = 22;
  string cloud_provider = 23;
  ImplementType agent_impl = 24;
  repeated string labels = 25;
}

enum IPFamily {
  IP_FAMILY_UNSPECIFIED = 0; // Invalid value.
  IP_FAMILY_V4 = 1;
  IP_FAMILY_V6 = 2;
  IP_FAMILY_DUAL = 3;
};

enum TestStatus {
  TEST_STATUS_UNSPECIFIED = 0; // Invalid value.
  TEST_STATUS_ACTIVE = 1; // Test is active.
  TEST_STATUS_PAUSED = 2; // Test is paused.
  TEST_STATUS_DELETED = 3; // Test is deleted. Not settable via SetTestStatus.
}

enum AgentStatus {
  AGENT_STATUS_UNSPECIFIED = 0; // Invalid value.
  AGENT_STATUS_OK = 1;
  AGENT_STATUS_WAIT = 2;
  AGENT_STATUS_DELETED = 3;
}


// === TEST config and status ===

message UserInfo {
  string id = 1;
  string email = 2;
  string full_name = 3;
}

message Test {
  string id = 1;
  string name = 2;
  string type = 3;
  TestStatus status = 5;
  TestSettings settings = 6;
  google.protobuf.Timestamp cdate = 7;
  google.protobuf.Timestamp edate = 8;
  UserInfo created_by = 9;
  UserInfo last_updated_by = 10;
  repeated string labels = 11;
}

enum DNSRecord {
  DNS_RECORD_UNSPECIFIED = 0;
  DNS_RECORD_A = 1;
  DNS_RECORD_AAAA = 2;
  DNS_RECORD_CNAME = 3;
  DNS_RECORD_DNAME = 4;
  DNS_RECORD_NS = 5;
  DNS_RECORD_MX = 6;
  DNS_RECORD_PTR = 7;
  DNS_RECORD_SOA = 8;
}

message TestSettings {

  oneof definition {
    HostnameTest hostname = 1;
    IpTest ip = 2;
    AgentTest agent = 3;
    FlowTest flow = 4;
    DnsTest dns = 5;
    UrlTest url = 6;
    IpTest network_grid = 7;
    PageLoadTest page_load = 8;
    DnsTest dns_grid = 9;
    NetworkMeshTest network_mesh = 18;
  }

  repeated string agent_ids = 10;
  repeated string tasks = 11; // Task types.

  HealthSettings health_settings = 12;
  TestPingSettings ping = 13;
  TestTraceSettings trace = 14;

  uint32 period = 15;
  IPFamily family = 16;
  repeated string notification_channels = 17;

}

message TestPingSettings {
  uint32 count = 1;
  string protocol = 2;
  uint32 port = 3;
  uint32 timeout = 4;
  float delay = 5;
}

message TestTraceSettings {
  uint32 count = 1;
  string protocol = 2;
  uint32 port = 3;
  uint32 timeout = 4;
  uint32 limit = 5;
  float delay = 6;
}

message ActivationSettings {
  string grace_period = 1;
  string time_unit = 2;
  string time_window = 3;
  string times = 4;
}

message HealthSettings {
  float latency_critical = 1;
  float latency_warning = 2;
  float packet_loss_critical = 3;
  float packet_loss_warning = 4;
  float jitter_critical = 5;
  float jitter_warning = 6;
  float http_latency_critical = 7;
  float http_latency_warning = 8;
  repeated uint32 http_valid_codes = 9;
  repeated uint32 dns_valid_codes = 10;
  float latency_critical_stddev = 11;
  float latency_warning_stddev = 12;
  float jitter_critical_stddev = 13;
  float jitter_warning_stddev = 14;
  float http_latency_critical_stddev = 15;
  float http_latency_warning_stddev = 16;
  uint32 unhealthy_subtest_threshold = 17;
  ActivationSettings activation = 18;
  uint32 cert_expiry_warning = 19;
  uint32 cert_expiry_critical = 20;
}

message HostnameTest {
  string target = 1;
}
message IpTest {
  repeated string targets = 1;
}
message AgentTest {
  string target = 1;
  bool use_local_ip = 2;
}

message FlowTest {
  string target = 1;
  uint32 target_refresh_interval_millis = 2; // How often to generate tasks.
  uint32 max_providers = 3; // see issue https://github.com/kentik/api-schema/issues/94
  uint32 max_ip_targets = 4; // see issue https://github.com/kentik/api-schema/issues/94
  string type = 5; // What type of flow to look at -- asn, cdn, country, ...
  string inet_direction = 6;
  string direction = 7;
}

message DnsTest {
  string target = 1;
  uint32 timeout = 2;
  DNSRecord record_type = 3;
  repeated string servers = 4;
  uint32 port = 5;
}

message UrlTest {
  string target = 1;
  uint32 timeout = 2;
  string method = 3;
  map<string, string> headers = 4;
  string body = 5;
  bool ignore_tls_errors = 6;
}

message PageLoadTest {
  string target = 1;
  uint32 timeout = 2;
  map<string, string> headers = 3;
  bool ignore_tls_errors = 4;
  map<string, string> css_selectors = 5;
}

message NetworkMeshTest {
  bool use_local_ip = 1;
}

// === TEST RESULTS (metrics, stats, responses, health)

message MetricData {
  uint32 current = 1;
  uint32 rolling_avg = 2;
  uint32 rolling_stddev = 3;
  string health = 4;
}

message PacketLossData {
  double current = 1;
  string health = 2;
}

message PingResults {
  string target = 1;
  PacketLossData packet_loss = 2;
  MetricData latency = 3;
  MetricData jitter = 4;
  string dst_ip = 5;
}

message HTTPResponseData {
  uint32 status = 1;
  uint32 size = 2;
  string data = 3;
}

message HTTPResults {
  string target = 1;
  MetricData latency = 2;
  HTTPResponseData response = 4;
  string dst_ip = 5;
}

message DNSResponseData {
  uint32 status = 1;
  string data = 2;
}

message DNSResults {
  string target = 1;
  string server = 2;
  MetricData latency = 3;
  DNSResponseData response = 5;
}

message TaskResults {
  oneof task_type {
    PingResults ping = 1;
    HTTPResults http = 2;
    DNSResults dns = 3;
  }
  string health = 4;
}

message AgentResults {
  string agent_id = 1;
  string health = 2;
  repeated TaskResults tasks = 3;
}

message TestResults {
  string test_id = 1;
  google.protobuf.Timestamp time = 2;
  string health = 3;
  repeated AgentResults agents = 4;
}

// === TEST TRACE results ===

message Stats {
  int32 average = 1;
  int32 min = 2;
  int32 max = 3;
}

message Location {
  double latitude = 8;
  double longitude = 9;
  string country = 1;
  string region = 2;
  string city = 3;
}

message NetNode {
  string ip = 2;
  uint32 asn = 3;
  string as_name = 4;
  Location location = 5;
  string dns_name = 6;
  string device_id = 7;
  string site_id = 8;
}

message TraceHop {
  // observed latency; 0 if node did not respond
  int32 latency = 3;
  // node_id refers to TracerouteResult.nodes; empty if hop did not respond
  string node_id = 5;
}

// Probing detail
message PathTrace {
  repeated int32 as_path = 1;
  bool is_complete = 2;
  repeated TraceHop hops = 6;
}

message Path {
  string agent_id = 1;
  string target_ip = 3;
  Stats hop_count = 4;
  int32 max_as_path_length = 7;
  repeated PathTrace traces = 8;
  google.protobuf.Timestamp time = 9;
}


// Data Service
// -------------------------------------------------------

message GetResultsForTestsRequest {
  // List of ids of the tests to get health for.
  repeated string ids = 1;

  // Start of the time interval for this query.
  google.protobuf.Timestamp start_time = 2;

  // End of the time interval for this query.
  google.protobuf.Timestamp end_time = 3;

  // Optionally, only look at a subset of agents
  repeated string agent_ids = 4;

  // Optionally only look at a subset of targets.
  repeated string targets = 5;
}

message GetResultsForTestsResponse {
  repeated TestResults results = 1;
}

message GetTraceForTestRequest {
  // Test id
  string id = 1;

  // Start of the time interval for this query.
  google.protobuf.Timestamp start_time = 2;

  // End of the time interval for this query.
  google.protobuf.Timestamp end_time = 3;

  // Optionally, limit the query to these agent ids
  repeated string agent_ids = 4;

  // Optionally, limit the query to these destination IP addresses
  repeated string target_ips = 5;
}

message GetTraceForTestResponse {
  map<string, NetNode>  nodes = 1;
  repeated Path paths = 2;
}

service SyntheticsDataService {
  option (google.api.default_host) = "grpc.api.kentik.com";
  option (kentik.core.v202012alpha1.service_scope) = "synthetics";

  // Get measurement results for a set of tests
  rpc GetResultsForTests (GetResultsForTestsRequest) returns (GetResultsForTestsResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "synthetics:read";
    option (google.api.http) = {
      post: "/synthetics/v202202/results"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "GetResultsForTests"
      summary: "Get results for synthetic tests."
      description: "Returns measurement results for a set of test for specified period of time, or the latest available data."
    };
  }

  rpc GetTraceForTest (GetTraceForTestRequest) returns (GetTraceForTestResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "synthetics:read";
    option (google.api.http) = {
      post: "/synthetics/v202202/trace"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "GetTraceForTest"
      summary: "Get trace route data."
      description: "Get trace route data for the specific test id."
    };
  }
}

// Admin Service
// -------------------------------------------------------

message ListAgentsRequest {}

message ListAgentsResponse {
  repeated Agent agents = 1;
  uint32 invalid_count = 2;
}

message GetAgentRequest {
  string id = 1;
}

message GetAgentResponse {
  Agent agent = 1;
}

message UpdateAgentRequest {
  Agent agent = 1;
}

message UpdateAgentResponse {
  Agent agent = 1;
}

message DeleteAgentRequest {
  string id = 1;
}

message DeleteAgentResponse {}

// list the company tests config, remove preset
message ListTestsRequest {
}



message ListTestsResponse {
  repeated Test tests = 1;
  uint32 invalid_count = 2;
}

message CreateTestRequest {
  Test test = 1;
}

message CreateTestResponse {
  Test test = 1;
}

message GetTestRequest {
  string id = 1;
}

message GetTestResponse {
  Test test = 1;
}

message UpdateTestRequest {
  Test test = 1;
}

message UpdateTestResponse {
  Test test = 1;
}

message DeleteTestRequest {
  string id = 1;
}

message DeleteTestResponse {}

message SetTestStatusRequest {
  string id = 1;
  TestStatus status = 2;
}

message SetTestStatusResponse {
}

service SyntheticsAdminService {
  option (google.api.default_host) = "grpc.api.kentik.com";
  option (kentik.core.v202012alpha1.service_scope) = "admin.synthetics";

  // Agents

  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:read";
    option (google.api.http) = {
      get: "/synthetics/v202202/agents"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "AgentsList"
      summary: "List Agents."
      description: "Returns a list of agents."
    };
  }

  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:read";
    option (google.api.http) = {
      get: "/synthetics/v202202/agents/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "AgentGet"
      summary: "Get information about an agent."
      description: "Returns information about the agent specified with id."
    };
  }

  rpc UpdateAgent(UpdateAgentRequest) returns (UpdateAgentResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:write";
    option (google.api.http) = {
      put: "/synthetics/v202202/agents/{agent.id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "AgentUpdate"
      summary: "Update an agent."
      description: "Update configuration of a synthetics agent."
    };
  }

  rpc DeleteAgent(DeleteAgentRequest) returns (DeleteAgentResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:write";
    option (google.api.http) = {
      delete: "/synthetics/v202202/agents/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "AgentDelete"
      summary: "Delete an agent."
      description: "Deletes the agent specified with id."
    };
  }

  // Tests

  rpc ListTests(ListTestsRequest) returns (ListTestsResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:read";
    option (google.api.http) = {
      get: "/synthetics/v202202/tests"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "TestsList"
      summary: "List Synthetics Tests."
      description: "Returns a list of syntehtics tests."
    };
  }

  rpc CreateTest(CreateTestRequest) returns (CreateTestResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:write";
    option (google.api.http) = {
      post: "/synthetics/v202202/tests"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "TestCreate"
      summary: "Create Synthetics Test."
      description: "Create synthetics test from request. Returns created test."
    };
  }

  rpc GetTest(GetTestRequest) returns (GetTestResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:read";
    option (google.api.http) = {
      get: "/synthetics/v202202/tests/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "TestGet"
      summary: "Get information about Synthetics Test."
      description: "Returns information about synthetics test specified with test ID."
    };
  }

  rpc UpdateTest(UpdateTestRequest) returns (UpdateTestResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:write";
    option (google.api.http) = {
      put: "/synthetics/v202202/tests/{test.id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "TestUpdate"
      summary: "Update a Synthetics Test."
      description: "Updates configuration of a synthetic test."
    };
  }

  rpc DeleteTest(DeleteTestRequest) returns (DeleteTestResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:write";
    option (google.api.http) = {
      delete: "/synthetics/v202202/tests/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "TestDelete"
      summary: "Delete an Synthetics Test."
      description: "Deletes the synthetics test specified with id."
    };
  }

  rpc SetTestStatus(SetTestStatusRequest) returns (SetTestStatusResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.synthetics:write";
    option (google.api.http) = {
      put: "/synthetics/v202202/tests/{id}/status"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "SetTestStatus"
      summary: "Update a test status."
      description: "Update the status of a test."
    };
  }
}
