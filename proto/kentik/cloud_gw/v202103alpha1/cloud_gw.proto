syntax = "proto3";

package kentik.cloud_gw.v202103alpha1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "kentik/core/v202012alpha1/errors.proto";
import "kentik/core/v202012alpha1/annotations.proto";
import "grpc/http_over_grpc/http_over_grpc.proto";

option go_package = "github.com/kentik/api-schema/gen/go/kentik/cloud_gw/v202103alpha1;cloudgw";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "CLOUD GW API"
    version: "202103alpha1"
    contact: {
      name: "Kentik API Engineering"
      url: "https://github.com/kentik/api"
    }
  }
  external_docs: {
    url: "https://docs.kentik.com/api"
    description: "More about Kentik APIs"
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "email"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-Email"
      }
    }
    security: {
      key: "token"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-API-Token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "email"
      value: {}
    }
    security_requirement: {
      key: "token"
      value: {}
    }
  }
};

// Called by clients of cloud-gw (Blake).
service AwsGwInternalService {
  option (google.api.default_host) = "cloud_gw.api.kentik.com";
  option (kentik.core.v202012alpha1.service_scope) = "admin.cloud_gw";

  rpc ProxyAws(ProxyAwsRequest) returns (ProxyAwsResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:write";
    option (google.api.http) = {
      post: "/cloud_gw/v202103alpha1/proxy_aws/{region}"
      body: "*"
    };
  }

  rpc ListAwsRoles(ListAwsRolesRequest) returns (ListAwsRolesResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:read";
    option (google.api.http) = {
      get: "/cloud_gw/v202103alpha1/list_aws_roles"
    };
  }
}

// Called by cloud-api-proxy instances in transfluo & orangeflow.
service AwsGwExternalService {
  // LoginAws is used to tell the gateway that there's a listener active for a
  // given region.  A proxy starts a LoginAws, then services Get/SendAws
  // requests, and ends the LoginAws via context cancellation when it shuts
  // down (or disconnects).
  rpc LoginAws(LoginAwsRequest) returns (LoginAwsResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:write";
    option (google.api.http) = {
      get: "/cloud_gw/v202103alpha1/login_aws/{region}"
    };
  }

  // The client calls GetAws to get a request from the gateway.  It runs the
  // request, and returns the result via SendAws, linking them together via
  // request_id.
  rpc GetAws(GetAwsRequest) returns (GetAwsResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:write";
    option (google.api.http) = {
      get: "/cloud_gw/v202103alpha1/get_aws"
    };
  }

  rpc SendAws(SendAwsRequest) returns (SendAwsResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:write";
    option (google.api.http) = {
      post: "/cloud_gw/v202103alpha1/send_aws/{request_id}"
      body: "*"
    };
  }
}

message LoginAwsRequest {
  string region = 1;
  string role = 2;
  // caller_id in LoginAwsRequest must be the same as caller_id in all
  // GetAwsRequests.
  string caller_id = 3;
}
message LoginAwsResponse {}

// cid from headers / context
message ProxyAwsRequest {
  string region = 1;
  grpc.http_over_grpc.HTTPOverGRPCRequest http_request = 3;
}

message ProxyAwsResponse {
  // HTTPOverGRPCResponse http_over_grpc_response = 1;
  grpc.http_over_grpc.HTTPOverGRPCReply http_response = 2;
}

message ListAwsRolesRequest {}

// This API is certainly open to discussion.  Instead of a map with a key you
// then have to parse, I could return a list of struct{cid, region, role} (or
// something else, of course), if that would work better.
//
// In raw Go I'd do it differently, but trying to mimic that in protobuf gets
// ugly, imho.
message ListAwsRolesResponse {
  // key is cid~region
  map<string, RoleList> cid_region_to_roles = 1;
}

message RoleList {
  repeated string roles = 1;
}

message GetAwsRequest {
  string region = 1;
  // caller_id in LoginAwsRequest must be the same as caller_id in all
  // GetAwsRequests.
  string caller_id = 2;
}

message GetAwsResponse {
  int64 request_id = 1;
  grpc.http_over_grpc.HTTPOverGRPCRequest http_request = 2;
}

message SendAwsRequest {
  int64 request_id = 1;
  grpc.http_over_grpc.HTTPOverGRPCReply http_response = 2;
}
message SendAwsResponse {}

message Header {
  string key = 1;
  repeated string values = 2;
}
