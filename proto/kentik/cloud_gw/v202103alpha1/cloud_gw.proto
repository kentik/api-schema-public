syntax = "proto3";

package kentik.cloud_gw.v202103alpha1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "kentik/core/v202012alpha1/errors.proto";
import "kentik/core/v202012alpha1/annotations.proto";
import "grpc/http_over_grpc/http_over_grpc.proto";

option go_package = "github.com/kentik/api-schema/gen/go/kentik/cloud_gw/v202103alpha1;cloudgw";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "CLOUD GW API"
    version: "202103"
    contact: {
      name: "Kentik API Engineering"
      url: "https://github.com/kentik/api"
    }
  }
  external_docs: {
    url: "https://docs.kentik.com/api"
    description: "More about Kentik APIs"
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "email"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-Email"
      }
    }
    security: {
      key: "token"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-API-Token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "email"
      value: {}
    }
    security_requirement: {
      key: "token"
      value: {}
    }
  }
};

// Was "HTTP"
service AWSGWInternalService {
  option (google.api.default_host) = "cloud_gw.api.kentik.com";
  option (kentik.core.v202012alpha1.service_scope) = "admin.cloud_gw";

  // Called by clients of cloud-server (Blake).
  rpc ProxyAWS(ProxyAWSRequest) returns (ProxyAWSResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:read";
    option (google.api.http) = {
      post: "/cloud_gw/v202103alpha1/proxy_aws"
      body: "*"
    };
  }
}

// Also was "HTTP"
service AWSGWExternalService {
  // LoginAWS is used to tell the server that there's a listener active for a
  // given region.  A proxy starts a LoginAWS, then services Get/SendAWS
  // requests, and ends the LoginAWS via context cancellation when it shuts
  // down (or disconnects).
  rpc LoginAWS(LoginAWSRequest) returns (LoginAWSResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:read";
    option (google.api.http) = {
      get: "/cloud_gw/v202103alpha1/login_aws"
    };
  }

  // The client calls GetAWS to get a request from the server.  It runs the
  // request, and returns the result via SendAWS, linking them together via
  // request_id.
  rpc GetAWS(GetAWSRequest) returns (GetAWSResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:read";
    option (google.api.http) = {
      get: "/cloud_gw/v202103alpha1/get_aws"
    };
  }

  rpc SendAWS(SendAWSRequest) returns (SendAWSResponse) {
    option (kentik.core.v202012alpha1.method_scope) = "admin.cloud_gw:read";
    option (google.api.http) = {
      post: "/cloud_gw/v202103alpha1/send_aws"
      body: "*"
    };
  }
}

message LoginAWSRequest {
  string region = 1;
}
message LoginAWSResponse {}

// cid from headers / context
message ProxyAWSRequest {
  string region = 1;
  // HTTPOverGRPCRequest http_over_grpc_request = 2;
  grpc.http_over_grpc.HTTPOverGRPCRequest http_over_grpc_request = 2;
}

message ProxyAWSResponse {
  // HTTPOverGRPCResponse http_over_grpc_response = 1;
  grpc.http_over_grpc.HTTPOverGRPCReply http_over_grpc_reply = 2;
}

message GetAWSRequest {}
message GetAWSResponse {
  int64 request_id = 1;
  ProxyAWSRequest proxy_aws_request = 2;
}

message SendAWSRequest {
  int64 request_id = 1;
  ProxyAWSRequest proxy_aws_request = 2;
}
message SendAWSResponse {}

message Header {
  string key = 1;
  repeated string values = 2;
}

// // These would apply to any HTTP wrapper
// message HTTPOverGRPCRequest {
//   string method = 1;
//   string url = 2;
//   repeated Header headers = 3;
//   bytes body = 4;
// }
//
// message HTTPOverGRPCResponse {
//   int32 code = 1;
//   repeated Header headers = 2;
//   bytes body = 3;
// }
