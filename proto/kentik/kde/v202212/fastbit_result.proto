syntax = "proto3";

package kentik.kde.v202212;
option go_package = "github.com/kentik/api-schema/gen/go/kentik/kde/v202212;kde";

/**
   Encapsulate all of the results of a fastbit query into a single
   block of memory, sutable for transmission over the wire.
*/

message FastbitResult {

  message ColumnHeaderInfo {
    optional string name = 1;
    optional int32 position = 2;
    optional string format = 3;
    optional string agg_name = 4;
  }

  message InputParams {
    optional string i_orderby = 1;
    optional int32 i_offset = 2;
    optional int32 i_limit = 3;
    optional int64 i_start_time = 4;
    optional int64 i_end_time = 5;
    optional string i_device_name = 6;
    optional int64 i_device_id = 7;
    optional int64 i_sq_start = 8;
    optional int64 i_sq_end = 9;
    optional int32 i_duration = 10;
    optional string i_device_site_name = 11;
    optional string i_device_type = 12;
    optional string i_debug_info = 13;

    // If use_member_id == true, then consult the member_id column to set
    // i_device_id, and use the member_id map to lookup i_device_name,
    // i_device_site_name, and i_device_type.
    optional bool use_member_id = 14;
    // Key is value from member_id Int32Column(? I think).
    map<int64, MemberId> member_id = 15;
  }

  message MemberId {
    optional string i_device_name = 1;
    optional string i_device_site_name = 2;
    optional string i_device_type = 3;
  }

  message Int32Column {
    optional ColumnHeaderInfo header = 1;
    repeated int32 values = 2 [packed=true];
  }

  message Int64Column {
    optional ColumnHeaderInfo header = 1;
    repeated int64 values = 2 [packed=true];
  }

  message UInt32Column {
    optional ColumnHeaderInfo header = 1;
    repeated uint32 values = 2 [packed=true];
  }

  message UInt64Column {
    optional ColumnHeaderInfo header = 1;
    repeated uint64 values = 2 [packed=true];
  }

  message StringColumn {
    optional ColumnHeaderInfo header = 1;
    repeated string values = 2;
  }

  message BytesColumn {
    optional ColumnHeaderInfo header = 1;
    repeated bytes values = 2;
  }

  message FloatColumn {
    optional ColumnHeaderInfo header = 1;
    repeated float values = 2 [packed=true];
  }

  message DoubleColumn {
    optional ColumnHeaderInfo header = 1;
    repeated double values = 2 [packed=true];
  }

  optional InputParams params = 1;

  repeated Int32Column int32_column = 2;
  repeated Int64Column int64_column = 3;

  repeated UInt32Column uint32_column = 4;
  repeated UInt64Column uint64_column = 5;

  repeated StringColumn string_column = 6;
  repeated BytesColumn bytes_column = 7;

  repeated FloatColumn float_column = 8;
  repeated DoubleColumn double_column = 9;
}

message FastbitResponse {
  optional string         target = 1;
  optional string         request_id = 2;
  optional FastbitResult  result = 3;
  optional string         error = 4;
  optional string         request_key = 5;
  optional bool           from_cache = 6;
  optional int32          num_resp = 7;
  optional int32          this_resp = 8;
  optional bool           missing_mds = 9;
  optional bool           too_large_entity = 10;
}
