syntax = "proto3";

package kentik.credential.v202407alpha1;
option go_package = "github.com/kentik/api-schema-public/gen/go/kentik/credential/v202407alpha1;credential";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "kentik/core/v202303/annotations.proto";
import "kentik/user/v202211/user.proto";
import "kentik/vault/v202312alpha1/vault.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Credentials Vault API"
    version: "v202407alpha1"
    contact: {
      name: "Kentik API Engineering"
      url: "https://github.com/kentik/api-schema-public"
    }
    description: "# Overview\n"
    "The Credentials Vault API enables programmatic access to credential information in Kentik Credential Vault.\n"
  }
  external_docs: {
    url: "https://kb.kentik.com/v0/Ab09.htm#Ab09-APIs_Overview"
    description: "General information about Kentik APIs"
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "email"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-Email"
      }
    }
    security: {
      key: "token"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-CH-Auth-API-Token"
      }
    }
  }
  security: {
    security_requirement: {
      key: "email"
      value: {}
    }
    security_requirement: {
      key: "token"
      value: {}
    }
  }
};

message CredentialGroup {
  string id = 1;
  string name = 2;
  uint32 version = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The secret's version"
    },
    (google.api.field_behavior) = REQUIRED
  ];
  string description = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Purpose of this secret"
    }
  ];
  kentik.vault.v202312alpha1.SecretType type = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The secret's type"
    }
  ];
  google.protobuf.Timestamp cdate = 6;
  google.protobuf.Timestamp edate = 7;
  kentik.user.v202211.User created_by = 8;
  repeated kentik.vault.v202312alpha1.Secret credentials = 9;
  repeated string labels = 10;
}

// {{.Name}}
message GetCredentialGroupRequest {
  string id = 1;
}

// {{.Name}}
message GetCredentialGroupResponse {
  CredentialGroup group = 1; 
}


// {{.Name}}
message ListCredentialGroupRequest {
}

// {{.Name}}
message ListCredentialGroupResponse {
  repeated CredentialGroup groups = 1;
  uint32 invalid_count = 2;
}

service CredentialService {
  option (google.api.default_host) = "grpc.api.kentik.com";
  option (kentik.core.v202303.visibility) = SERVICE_VISIBILITY_PUBLIC;
  option (kentik.core.v202303.service_scope) = "admin.credential";


  rpc GetCredentialGroup(GetCredentialGroupRequest)  returns (GetCredentialGroupResponse) {
    option (kentik.core.v202303.method_scope) = "admin.credential:read";
    option (google.api.http) = {
      get: "/credential/v202407alpha1/group/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "GetCredentialGroup"
      summary: "Get a credential group by id."
      description: "Returns specific credential group information in Kentik vault."
    };
  }


  rpc ListCredentialGroup(ListCredentialGroupRequest)  returns (ListCredentialGroupResponse) {
    option (kentik.core.v202303.method_scope) = "admin.credential:read";
    option (google.api.http) = {
      get: "/credential/v202407alpha1/group"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "ListCredentialGroup"
      summary: "List credential groups."
      description: "Returns list of credential group information in Kentik vault."
    };
  }
}
